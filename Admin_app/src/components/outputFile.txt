
//Brurya
"use client"

// stripped-down version without Ant Design, MUI, or CSS imports
import { useState, useEffect, useContext } from "react"
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom"

import AdminLogin from "./components/AdminLogin"
import BusinessAndAdmin from "./components/BusinessAndAdmin"
import ProductionReports from "./components/ProductionReports"
import UploadFiles from "./components/UploadFiles"
import UserLogin from "./components/UserLogin"
import UserRegister from "./components/UserRegister"
import GlobalContext, { globalContext } from "./context/GlobalContext"
import MyHome from "./components/MyHome"
import EditUserPage from "./components/EditUserPage"
import BusinessFiles from "./components/BusinessFiles"
import AccountTransactions from "./components/AccountTransactions"
import DataViewing from "./components/DataViweing"
import UserManagement from "./components/UserManagemet"

const navItems = [
  { key: "/", label: "בית", path: "/" },
  { key: "/register-user", label: "רישום משתמש", path: "/register-user" },
  { key: "/user-login", label: "כניסת משתמש", path: "/user-login" },
  { key: "/admin-login", label: "כניסת מנהל", path: "/admin-login" },
  { key: "/business-files", label: "קבצי העסק", path: "/business-files" },
  { key: "/upload-file", label: "העלאת קבצים", path: "/upload-file" },
  { key: "/view-data", label: "צפייה בנתונים", path: "/view-data" },
  { key: "/user-management", label: "משתמשים", path: "/user-management" },
  { key: "/production-reports", label: 'דו"ח ייצור', path: "/production-reports" },
  { key: "/account-transactions", label: "הוספת תנועה בחשבון", path: "/account-transactions" },
  { key: "/register-admin&business", label: "רישום עסק ומנהל חדש", path: "/register-admin&business" },
]

function ResponsiveDrawer() {
  const [mobileOpen, setMobileOpen] = useState(false)
  const location = useLocation()
  const globalContextDetails = useContext(globalContext)
  const [pageTitle, setPageTitle] = useState("")
  const [clientName, setClientName] = useState("אורח")

  useEffect(() => {
    const routeTitles = {
      "/": "דף הבית",
      "/register-user": "רישום משתמש",
      "/user-login": "כניסת משתמש",
      "/admin-login": "כניסת מנהל",
      "/business-files": "קבצי העסק",
      "/upload-file": "העלאת קבצים",
      "/view-data": "צפייה בנתונים",
      "/user-management": "ניהול משתמשים",
      "/production-reports": 'דו"ח ייצור',
      "/account-transactions": "תנועות חשבון",
      "/register-admin&business": "רישום עסק ומנהל",
    }
    if (location.pathname.startsWith("/edit-user/")) {
      setPageTitle("עריכת משתמש")
    } else {
      setPageTitle(routeTitles[location.pathname] || "עמוד לא מזוהה")
    }
    setClientName("שלום, " + globalContextDetails.user.firstName)
  }, [location.pathname])

  return (
    <div style={{ direction: "rtl" }}>
      <div style={{ background: "#eee", padding: "10px", textAlign: "center" }}>
        <h3>{pageTitle}</h3>
        <div>{clientName}</div>
        <button onClick={() => setMobileOpen(!mobileOpen)} style={{ marginTop: "10px" }}>
          תפריט
        </button>
        {mobileOpen && (
          <div style={{ marginTop: "10px" }}>
            {navItems.map((item) => (
              <div key={item.key}>
                <Link to={item.path} onClick={() => setMobileOpen(false)}>
                  {item.label}
                </Link>
              </div>
            ))}
          </div>
        )}
      </div>

      <div style={{ padding: "16px" }}>
        <Routes>
          <Route path="/" element={<MyHome />} />
          <Route path="/register-user" element={<UserRegister />} />
          <Route path="/user-login" element={<UserLogin />} />
          <Route path="/admin-login" element={<AdminLogin />} />
          <Route path="/business-files" element={<BusinessFiles />} />
          <Route path="/upload-file" element={<UploadFiles />} />
          <Route path="/view-data" element={<DataViewing />} />
          <Route path="/user-management" element={<UserManagement />} />
          <Route path="/production-reports" element={<ProductionReports />} />
          <Route path="/account-transactions" element={<AccountTransactions />} />
          <Route path="/register-admin&business" element={<BusinessAndAdmin />} />
          <Route path="/edit-user/:id" element={<EditUserPage />} />
        </Routes>
      </div>

      <footer style={{ textAlign: "center", padding: "20px", background: "#f8f8f8" }}>
        © 2025 BusinessMan
      </footer>
    </div>
  )
}

export default function App() {
  return (
    <Router>
      <GlobalContext>
        <ResponsiveDrawer />
      </GlobalContext>
    </Router>
  )
}

import React, { useState, useEffect, useContext } from "react"
import axios from "axios"
import { globalContext } from "../context/GlobalContext"

const transactionTypes = [
  { key: "Income", label: "הכנסה" },
  { key: "Expense", label: "הוצאה" },
  { key: "AssetIncrease", label: "הגדלת נכסים" },
  { key: "AssetDecrease", label: "הקטנת נכסים" },
  { key: "LiabilityIncrease", label: "הגדלת התחייבויות" },
  { key: "LiabilityDecrease", label: "הקטנת התחייבויות" },
  { key: "EquityIncrease", label: "הגדלת הון עצמי" },
  { key: "EquityDecrease", label: "הקטנת הון עצמי" },
  { key: "Revenue", label: "הכנסות נוספות" },
  { key: "CostOfGoodsSold", label: "עלות סחורה" },
  { key: "OtherIncome", label: "הכנסה אחרת" },
  { key: "OtherExpense", label: "הוצאה אחרת" },
]

const AccountTransactions = () => {
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const [totals, setTotals] = useState({ debit: 0, credit: 0 })
  const [transactionType, setTransactionType] = useState("")
  const [amount, setAmount] = useState("")
  const [description, setDescription] = useState("")
  const [message, setMessage] = useState("")
  const [error, setError] = useState("")

  const user = {
    id: globalContextDetails.user.id,
    firstName: globalContextDetails.user.firstName,
    lastName: globalContextDetails.user.lastName,
    businessId: globalContextDetails.business_global.id,
  }

  const fetchTotals = async () => {
    try {
      const { data } = await axios.get(
        `${url}/api/Invoice/totals/${user.businessId}`,
        { withCredentials: true }
      )
      setTotals({ debit: data.totalDebit, credit: data.totalCredit })
    } catch (err) {
      console.error("שגיאה בשליפת סיכומים", err)
    }
  }

  useEffect(() => {
    fetchTotals()
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setMessage("")
    setError("")

    const amountValue = parseFloat(amount)
    if (!transactionType || !amountValue || amountValue <= 0) {
      setError("נא להזין סכום תקין ולבחור סוג תנועה")
      return
    }

    const invoiceToSend = {
      id: 0,
      amount: amountValue,
      invoiceDate: new Date().toISOString(),
      status: 1,
      notes: description,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: `${user.firstName} ${user.lastName}`,
      updatedBy: `${user.firstName} ${user.lastName}`,
      invoicePath: "",
      userId: user.id,
      businessId: user.businessId,
      type: transactionType,
    }

    try {
      await axios.post(`${url}/api/Invoice`, invoiceToSend, {
        withCredentials: true,
      })
      setMessage("התנועה נשמרה בהצלחה")
      setTransactionType("")
      setAmount("")
      setDescription("")
      fetchTotals()
    } catch (err) {
      setError("אירעה שגיאה בשמירת התנועה")
    }
  }

  return (
    <div dir="rtl">
      <h2>רישום פקודת יומן</h2>

      <p><strong>חובה (סה״כ):</strong> ₪{totals.debit.toLocaleString()}</p>
      <p><strong>זכות (סה״כ):</strong> ₪{totals.credit.toLocaleString()}</p>

      {error && <p style={{ color: "red" }}>{error}</p>}
      {message && <p style={{ color: "green" }}>{message}</p>}

      <form onSubmit={handleSubmit}>
        <div>
          <label>סוג תנועה:</label><br />
          <select
            value={transactionType}
            onChange={(e) => setTransactionType(e.target.value)}
            required
          >
            <option value="">בחר</option>
            {transactionTypes.map((type) => (
              <option key={type.key} value={type.key}>
                {type.label}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>סכום:</label><br />
          <input
            type="number"
            step="0.01"
            min="0.01"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            required
          />
        </div>

        <div>
          <label>תיאור:</label><br />
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows={2}
            placeholder="תיאור (לא חובה)"
          />
        </div>

        <button type="submit">שמור פקודה</button>
      </form>
    </div>
  )
}

export default AccountTransactions
"use client"

import { useContext, useState } from "react"
import { useNavigate } from "react-router-dom"
import axios from "axios"
import { globalContext } from "../context/GlobalContext"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import type { Admin } from "../models/Admin"
import type { BusinessDto } from "../models/BusinessDto"

const AdminLogin = () => {
  const nav = useNavigate()
  const [admin, setAdmin] = useState<Admin>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)

  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setErrors([])

    try {
      const valid = await validationSchemaAdminLogin.isValid(admin)
      if (!valid) {
        const validationErrors = await validationSchemaAdminLogin
          .validate(admin)
          .catch((err) => err.errors)
        setErrors(validationErrors || [])
        return
      }

      let data: any
      try {
        const response = await axios.post(`${url}/Auth/admin-login`, admin, {
          withCredentials: true,
        })
        data = response.data
        globalContextDetails.setUser(data.user)
        globalContextDetails.setIsAdmin(true)
      } catch (e) {
        if (axios.isAxiosError(e) && e.response?.status === 400) {
          setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"])
        } else {
          setErrors([
            e instanceof Error
              ? e.message
              : "שגיאה בכניסה, נא לנסות שוב מאוחר יותר",
          ])
        }
        return
      }

      try {
        const res = await axios.get<BusinessDto>(
          `${url}/api/Business/${data.user.businessId}`,
          { withCredentials: true }
        )
        globalContextDetails.setBusinessGlobal(res.data)
        globalContextDetails.setUserCount(res.data.usersCount)
      } catch (e) {
        setErrors([
          e instanceof Error
            ? e.message
            : "שגיאה בטעינת העסק, נא לנסות שוב מאוחר יותר",
        ])
      }

      nav("/")
    } catch (e) {
      setErrors([
        e instanceof Error ? e.message : "שגיאה לא צפויה, נא לנסות שוב מאוחר יותר",
      ])
    } finally {
      setLoading(false)
    }
  }

  return (
    <div dir="rtl" style={styles.container}>
      <div style={styles.card}>
        <h2 style={styles.title}>כניסת מנהל</h2>
        <p style={styles.subtitle}>ברוכים הבאים למערכת הניהול</p>

        <form onSubmit={handleSubmit} style={styles.form}>
          <label style={styles.label}>אימייל:</label>
          <input
            type="email"
            value={admin.email}
            onChange={(e) =>
              setAdmin((prev) => ({ ...prev, email: e.target.value }))
            }
            required
            style={styles.input}
          />

          <label style={styles.label}>סיסמה:</label>
          <input
            type="password"
            value={admin.password}
            onChange={(e) =>
              setAdmin((prev) => ({ ...prev, password: e.target.value }))
            }
            required
            style={styles.input}
          />

          <button type="submit" disabled={loading} style={styles.button}>
            {loading ? "טוען..." : "התחבר"}
          </button>
        </form>

        {errors.length > 0 && (
          <div style={styles.errorBox}>
            {errors.map((err, i) => (
              <p key={i} style={styles.errorText}>
                {err}
              </p>
            ))}
          </div>
        )}

        <div style={{ marginTop: 20 }}>
          <span>אין לך חשבון? </span>
          <a href="/register-admin&business">הירשם כמנהל</a>
        </div>
      </div>
    </div>
  )
}

const styles: { [key: string]: React.CSSProperties } = {
  container: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    minHeight: "100vh",
    background: "#f0f2f5",
  },
  card: {
    background: "#fff",
    padding: 32,
    borderRadius: 12,
    boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
    maxWidth: 400,
    width: "100%",
    textAlign: "center",
  },
  title: {
    marginBottom: 8,
  },
  subtitle: {
    marginBottom: 24,
    color: "#666",
  },
  form: {
    textAlign: "right",
  },
  label: {
    display: "block",
    marginBottom: 4,
    fontWeight: "bold",
  },
  input: {
    width: "100%",
    padding: 10,
    marginBottom: 16,
    borderRadius: 8,
    border: "1px solid #ccc",
    fontSize: 16,
  },
  button: {
    width: "100%",
    padding: 12,
    fontSize: 16,
    backgroundColor: "#4a90e2",
    color: "#fff",
    border: "none",
    borderRadius: 8,
    cursor: "pointer",
  },
  errorBox: {
    marginTop: 16,
    background: "#ffe6e6",
    padding: 12,
    borderRadius: 8,
  },
  errorText: {
    color: "#d00",
    fontWeight: 500,
    margin: 0,
  },
}

export default AdminLogin
"use client"

import { useState, useContext, ChangeEvent } from "react"
import axios from "axios"
import * as Yup from "yup"
import { Form, Input, Button } from "antd"
import { globalContext } from "../context/GlobalContext"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { converFromUserDto } from "../utils/convertFromUserDto"
import type { UserPostModel } from "../models/UserPostModel"
import type { UserDto } from "../models/UserDto"

const AdminRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const [myAdmin, setMyAdmin] = useState<UserPostModel>({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    phone: "",
    role: 1,
    idNumber: "",
  })

  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const handleSubmit = (adminRegister: UserPostModel) => async () => {
    setLoading(true)

    try {
      await validationSchemaAdminLogin.validate(adminRegister, { abortEarly: false })

      try {
        const { data } = await axios.post<UserDto>(
          `${url}/Auth/admin-register`,
          adminRegister,
          { withCredentials: true }
        )

        globalContextDetails.setUser(converFromUserDto(data))
        if (data.role === 1) {
          globalContextDetails.setIsAdmin(true)
        }

        if (onSubmitSuccess) onSubmitSuccess()
        setErrors([])
      } catch {
        setErrors(["שגיאה ברישום"])
      }
    } catch (err) {
      if (err instanceof Yup.ValidationError) {
        setErrors(err.errors)
      } else {
        setErrors(["שגיאה כללית בוולידציה"])
      }
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target
    setMyAdmin((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  return (
    <div>
      <h2>רישום מנהל</h2>
      <Form layout="vertical" onFinish={handleSubmit(myAdmin)}>
        <Form.Item label="שם פרטי">
          <Input name="firstName" value={myAdmin.firstName} onChange={handleChange} />
        </Form.Item>
        <Form.Item label="שם משפחה">
          <Input name="lastName" value={myAdmin.lastName} onChange={handleChange} />
        </Form.Item>
        <Form.Item label="טלפון">
          <Input name="phone" value={myAdmin.phone} onChange={handleChange} />
        </Form.Item>
        <Form.Item label="תעודת זהות">
          <Input name="idNumber" value={myAdmin.idNumber} onChange={handleChange} />
        </Form.Item>
        <Form.Item label="אימייל">
          <Input name="email" value={myAdmin.email} onChange={handleChange} type="email" />
        </Form.Item>
        <Form.Item label="סיסמה">
          <Input.Password name="password" value={myAdmin.password} onChange={handleChange} />
        </Form.Item>
        <Button type="primary" htmlType="submit" loading={loading}>
          {loading ? "שומר..." : "שמור"}
        </Button>
      </Form>

      {errors.length > 0 && (
        <div>
          {errors.map((err, i) => (
            <div key={i} style={{ color: "red" }}>{err}</div>
          ))}
        </div>
      )}
    </div>
  )
}

export default AdminRegister
"use client"

import { JSX, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import { useNavigate } from "react-router-dom"

const AdminRoute = ({ children }: { children: JSX.Element }) => {
  const { isAdmin } = useContext(globalContext)
  const navigate = useNavigate()

  if (isAdmin === false) {
    return (
      <div>
        <h1>גישה נדחתה</h1>
        <p>אין לך הרשאה לצפות בדף זה. רק מנהלים יכולים לגשת לתוכן זה.</p>
        <button onClick={() => navigate("/")}>חזרה לדף הבית</button>
      </div>
    )
  }

  return children
}

export default AdminRoute
import { useContext, useEffect, useState } from "react"
import RegisterBusinessData from "./RegisterBusinessData"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import AdminRegister from "./AdminRegister"
import type { BusinessResponsePutModel } from "../models/BusinessResponsePutModel"
import type { UserDto } from "../models/UserDto"

const BusinessAndAdmin = () => {
  const [isBusiness, setIsBusiness] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [businessDone, setBusinessDone] = useState(false)
  const [adminDone, setAdminDone] = useState(false)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    if (businessDone && adminDone) {
      updateObjects()
    }
  }, [businessDone, adminDone])

  const updateObjects = async () => {
    setError(null)
    const updateAdmin = {
      ...globalContextDetails.user,
      businessId: globalContextDetails.business_global.id,
      business: {
        ...globalContextDetails.business_global,
        createdAt: new Date(globalContextDetails.business_global.createdAt),
        updatedAt: new Date(globalContextDetails.business_global.updatedAt),
      },
      role: 1,
      updateBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
    }
    const updateBusiness = {
      ...globalContextDetails.business_global,
      users: [globalContextDetails.user],
      updateBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
    }

    globalContextDetails.setUser(updateAdmin)
    globalContextDetails.setBusinessGlobal(updateBusiness)

    try {
      await axios.put<UserDto>(`${url}/api/User/${updateAdmin.id}`, updateAdmin, { withCredentials: true })
      await axios.put<BusinessResponsePutModel>(`${url}/api/Business/${updateBusiness.id}`, updateBusiness, { withCredentials: true })
      setSuccess(true)
    } catch (e) {
      setError("שגיאה בעדכון הנתונים")
    }
  }

  return (
    <div>
      <h2>הגדרת עסק ומנהל</h2>

      {!success && (
        <div>
          <button onClick={() => setIsAdmin(!isAdmin)}>
            {isAdmin ? "סגור טופס מנהל" : "הצג טופס מנהל"}
          </button>
          {isAdmin && <AdminRegister onSubmitSuccess={() => setAdminDone(true)} />}

          {adminDone && (
            <>
              <button onClick={() => setIsBusiness(!isBusiness)}>
                {isBusiness ? "סגור טופס עסק" : "הצג טופס עסק"}
              </button>
              {isBusiness && <RegisterBusinessData onSubmitSuccess={() => setBusinessDone(true)} />}
            </>
          )}

          {error && <p style={{ color: "red" }}>{error}</p>}
        </div>
      )}

      {success && <p>הרישום הושלם בהצלחה!</p>}
    </div>
  )
}

export default BusinessAndAdmin
import { useEffect, useState } from "react"
import axios from "axios"
import type { FileItem } from "../models/FileItem"

const BusinessFiles = () => {
  const [files, setFiles] = useState<FileItem[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    const fetchFiles = async () => {
      try {
        setLoading(true)
        const response = await axios.get<FileItem[]>(`${url}/FileUpload/my-files`, {
          withCredentials: true,
        })
        setFiles(response.data)
      } catch (err) {
        console.error("שגיאה בטעינת קבצים")
      } finally {
        setLoading(false)
      }
    }

    fetchFiles()
  }, [])

  const handleDownloadZip = async () => {
    try {
      const response = await axios.get(`${url}/FileUpload/my-files-download-zip`, {
        responseType: "blob",
        withCredentials: true,
      })

      const blob = new Blob([response.data], { type: "application/zip" })
      const link = document.createElement("a")
      link.href = URL.createObjectURL(blob)
      link.download = "business-files.zip"
      link.click()
      URL.revokeObjectURL(link.href)
    } catch (err) {
      console.error("שגיאה בהורדת ZIP")
    }
  }

  const handleDownloadFile = async (file: FileItem) => {
    try {
      if (!file.id) return
      const response = await axios.get(`${url}/FileUpload/download-file/${file.id}`, {
        responseType: "blob",
        withCredentials: true,
      })

      const blob = new Blob([response.data])
      const link = document.createElement("a")
      link.href = URL.createObjectURL(blob)
      link.download = file.fileName ?? "file"
      link.click()
      URL.revokeObjectURL(link.href)
    } catch (err) {
      console.error("שגיאה בהורדת קובץ")
    }
  }

  return (
    <div>
      <h2>קבצי העסק שלי</h2>
      <button onClick={handleDownloadZip}>הורד הכל כ־ZIP</button>

      {loading ? (
        <p>טוען קבצים...</p>
      ) : (
        <ul>
          {files.map((file) => (
            <li key={file.id}>
              {file.fileName ?? file.invoicePath.split("/").pop()}
              <button onClick={() => handleDownloadFile(file)}>הורד</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

export default BusinessFiles
import React from "react"

interface Business {
  id: number
  name: string
  address: string
  email: string
  businessType: string
  income: number
  expenses: number
  cashFlow: number
  netWorth: number
}

interface BusinessTableProps {
  business: Business
}

const BusinessTable: React.FC<BusinessTableProps> = ({ business }) => {
  return (
    <div>
      <h4>פרטי העסק</h4>
      <table>
        <thead>
          <tr>
            <th>מזהה</th>
            <th>שם עסק</th>
            <th>כתובת</th>
            <th>אימייל</th>
            <th>סוג עסק</th>
            <th>הכנסות</th>
            <th>הוצאות</th>
            <th>תזרים מזומנים</th>
            <th>שווי נקי</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>{business.id}</td>
            <td>{business.name}</td>
            <td>{business.address}</td>
            <td>{business.email}</td>
            <td>{business.businessType}</td>
            <td>{business.income}</td>
            <td>{business.expenses}</td>
            <td>{business.cashFlow}</td>
            <td>{business.netWorth}</td>
          </tr>
        </tbody>
      </table>
    </div>
  )
}

export default BusinessTable
import React from "react"

const CenteredLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div>
      <div>{children}</div>
    </div>
  )
}

export default CenteredLayout
import axios from "axios"
import type React from "react"

import { useState, useContext, useEffect } from "react"
import { message } from "antd"
import { Business } from "../models/Business"
import { globalContext } from "../context/GlobalContext"

function DataViewing() {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [dataLoaded, setDataLoaded] = useState(false)
  const [editModalVisible, setEditModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext) as { user: { businessId: number } }
  const [form, setForm] = useState<Partial<Business>>({})
  const [businessReport, setBusinessReport] = useState<{ totalIncome: number; totalExpenses: number; cashFlow: number; netProfit: number; invoiceCount: number } | null>(null);
  const [monthlyReport, setMonthlyReport] = useState<{ incomeChangePercent: number; expensesChangePercent: number; netProfitChangePercent: number } | null>(null);
  const [error, setError] = useState<string[] | null>(null);

  const [business, setBusiness] = useState<Business>({
    id: 0,
    businessId: 0,
    name: "",
    address: "",
    email: "",
    businessType: "",
    income: 0,
    expenses: 0,
    cashFlow: 0,
    totalAssets: 0,
    totalLiabilities: 0,
    netWorth: 0,
    createdAt: new Date(),
    createdBy: "",
    updatedAt: new Date(),
    updatedBy: "",
    users: [],
    invoices: [],
    usersCount: 0,
  });

  useEffect(() => {
    const fetchReports = async () => {
      try {
        setLoading(true);
        setError(null);

        // קריאה לדוח העסק
        const businessReportResponse = await axios.get(
          `https://localhost:7031/api/Reports/business-report/${globalContextDetails.user.businessId}`,
          { withCredentials: true }
        );

        const monthlyReportResponse = await axios.get(
          `${url}/api/Reports/monthly`,
          {
            params: {
              businessId: globalContextDetails.user.businessId,
              year: new Date().getFullYear(),
              month: new Date().getMonth() + 1, // חודש ב-0 מבוסס, לכן מוסיפים 1
            },
          }
        );

        setBusinessReport(businessReportResponse.data);
        setMonthlyReport(monthlyReportResponse.data);
      } catch (err) {
        console.error(err);
        setError(["שגיאה בטעינת הדוחות"]);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, [business]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setErrors([])
    setLoading(true)

    try {
      const res = await axios.get<Business>(`${url}/api/Business/${globalContextDetails.user.businessId}`, {
        withCredentials: true,
      })

      if (res.status !== 200) {
        setErrors(["שגיאה בטעינת נתוני העסק"])
        setLoading(false)
        return
      }

      if (!res.data) {
        setErrors(["לא נמצאו נתונים"])
        setLoading(false)
        return
      }
      setBusiness(res.data)
      setDataLoaded(true)
      setLoading(false)
    } catch (error) {
      console.error("Error fetching business data:", error)
      setErrors(["שגיאה בטעינת נתוני העסק"])
      setLoading(false)
    }
  }

  const handleEdit = () => {
    setForm(business)
    setEditModalVisible(true)
  }

  const handleSave = async () => {
    try {
      const values = form; // Assuming form fields are already validated externally
      const updatedBusiness = { ...business, ...values }

      setBusiness(updatedBusiness)
      setEditModalVisible(false)
      message.success("נתוני העסק עודכנו בהצלחה!")
    } catch (error) {
      message.error("שגיאה בעדכון נתוני העסק")
    }
  }

  return (
    <div>

      <div>
        <h1>לוח בקרה עסקי מתקדם</h1>
        <p>צפה ונהל את נתוני העסק שלך בצורה חכמה ויעילה</p>

        {!dataLoaded ? (
          <div>
            <button
              disabled={loading}
              onClick={handleSubmit}
            >
              {loading ? "טוען נתונים..." : "טען נתוני עסק"}
            </button>
          </div>
        ) : (
          <div>
            {/* Business Header */}
            <div>
              <div>
                <h3>{business.name}</h3>
                <p>{business.businessType} • {business.address}</p>
                <span>{business.email}</span>
              </div>
              <div>
                <button onClick={handleEdit}>ערוך פרטים</button>
              </div>
            </div>

            {/* Financial Metrics */}
            <div>
              <h4>מדדים פיננסיים עיקריים</h4>
              <div>
                {[
                  { title: "הכנסות", value: business.income, change: monthlyReport?.incomeChangePercent || null, description: "שינוי בהכנסות לעומת החודש הקודם" },
                  { title: "הוצאות", value: business.expenses, change: monthlyReport?.expensesChangePercent || null, description: "שינוי בהוצאות לעומת החודש הקודם" },
                  { title: "רווח נקי", value: business.netWorth, change: monthlyReport?.netProfitChangePercent || null, description: "שינוי ברווח הנקי לעומת החודש הקודם" },
                ].map((metric, index) => (
                  <div key={index}>
                    <div>
                      <span>{metric.title}</span>
                      <span>{metric.value}</span>
                    </div>
                    <div>
                      {metric.change !== null && (
                        <span>{metric.change > 0 ? "+" : ""}{metric.change}%</span>
                      )}
                    </div>
                    <p>{metric.description}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Performance Indicators */}
            <div>
              <h4>מדדי ביצועים</h4>
              <div>
                {[
                  { title: "מדד ביצוע 1", value: 100 },
                  { title: "מדד ביצוע 2", value: 200 },
                  { title: "מדד ביצוע 3", value: 300 },
                ].map((metric, index) => (
                  <div key={index}>
                    <div>
                      <span>{metric.title}</span>
                    </div>
                    <div>
                      <span>{metric.value}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {loading && (
          <div>
            <p>טוען נתוני העסק...</p>
          </div>
        )}

        {errors.length > 0 && (
          <div>
            {errors.map((error, index) => (
              <div key={index}>
                <p>שגיאה: {error}</p>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Edit Modal */}
      {editModalVisible && (
        <div>
          <h2>עריכת נתוני עסק</h2>
          <form>
            <div>
              <label>שם העסק</label>
              <input type="text" name="name" />
            </div>
            <div>
              <label>סוג העסק</label>
              <input type="text" name="businessType" />
            </div>
            <div>
              <label>כתובת</label>
              <input type="text" name="address" />
            </div>
            <div>
              <label>הכנסות</label>
              <input type="number" name="income" />
            </div>
            <div>
              <label>הוצאות</label>
              <input type="number" name="expenses" />
            </div>
            <div>
              <label>סך נכסים</label>
              <input type="number" name="totalAssets" />
            </div>
            <div>
              <label>התחייבויות</label>
              <input type="number" name="totalLiabilities" />
            </div>
            <button type="button" onClick={() => setEditModalVisible(false)}>ביטול</button>
            <button type="button" onClick={handleSave}>שמור שינויים</button>
          </form>
        </div>
      )}
    </div>
  )
}

export default DataViewing
"use client"

import React, { useContext, useEffect, useState } from "react"
import axios from "axios"
import { useNavigate, useParams } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { convertToUser } from "../utils/converToUser"

const EditUserPage = () => {
  const { id } = useParams()
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const { setUser } = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const [myUser, setMyUser] = useState({
    id: 0,
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    idNumber: "",
    password: "",
    role: 0,
    status: "",
    lastLogin: new Date(),
    createdAt: new Date(),
    updateAt: new Date(),
    businessId: 0,
  })

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await axios.get(`${url}/api/User/${id}`, { withCredentials: true })
        setMyUser(data)
      } catch {
        setErrors(["שגיאה בטעינת נתוני המשתמש"])
      }
    }
    if (id) fetchUser()
  }, [id, url])

  const handleChange = (field: keyof typeof myUser, value: string | number) => {
    setMyUser(prev => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(myUser)
      setErrors([])
      if (valid && id) {
        const { data } = await axios.put(`${url}/api/User/${id}`, myUser, { withCredentials: true })
        setUser(convertToUser(data))
        nav("/user-management")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch {
      setErrors(["שגיאה בעדכון המשתמש"])
    } finally {
      setLoading(false)
    }
  }

  return (
    <div dir="rtl" style={{ padding: 20 }}>
      <h2 style={{ textAlign: "center" }}>עריכת משתמש</h2>
      <p style={{ textAlign: "center" }}>עדכן את פרטי המשתמש</p>
      <hr />

      <form onSubmit={handleSubmit}>
        <label>שם פרטי *</label><br />
        <input
          type="text"
          value={myUser.firstName}
          onChange={e => handleChange("firstName", e.target.value)}
          required
        /><br /><br />

        <label>שם משפחה *</label><br />
        <input
          type="text"
          value={myUser.lastName}
          onChange={e => handleChange("lastName", e.target.value)}
          required
        /><br /><br />

        <label>טלפון *</label><br />
        <input
          type="tel"
          value={myUser.phone}
          onChange={e => handleChange("phone", e.target.value)}
          required
        /><br /><br />

        <label>מספר תעודת זהות *</label><br />
        <input
          type="text"
          value={myUser.idNumber}
          onChange={e => handleChange("idNumber", e.target.value)}
          required
        /><br /><br />

        <label>אימייל *</label><br />
        <input
          type="email"
          value={myUser.email}
          onChange={e => handleChange("email", e.target.value)}
          required
        /><br /><br />

        <label>סיסמא (חדשה) *</label><br />
        <input
          type="password"
          value={myUser.password}
          onChange={e => handleChange("password", e.target.value)}
          required
        /><br /><br />

        <label>תפקיד *</label><br />
        <input
          type="number"
          value={myUser.role}
          onChange={e => handleChange("role", Number(e.target.value))}
          required
        /><br /><br />

        <button type="submit" disabled={loading}>
          {loading ? "טוען..." : "עדכן משתמש"}
        </button>
        <button type="button" onClick={() => nav(-1)} style={{ marginLeft: 10 }}>
          חזרה
        </button>
      </form>

      <div style={{ color: "red", marginTop: 20 }}>
        {errors.map((error, idx) => (
          <div key={idx}>{error}</div>
        ))}
      </div>
    </div>
  )
}

export default EditUserPage
'use client'

import { useContext, useEffect, useState } from "react"
import { useNavigate } from "react-router-dom"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import dayjs from "dayjs"
import { UserDto } from "../models/UserDto"

const MyHome = () => {
  const globalContextDetails = useContext(globalContext)
  const [incomes, setIcomes] = useState(0)
  const [incomesPrecent, setIcomesPrecent] = useState(0)
  const [expenses, setExpenses] = useState(0)
  const [expensesPrecent, setExpensesPrecent] = useState(0)
  const [userPrecent, setUserPrecent] = useState(0)
  const users = globalContextDetails.usersCount || 0
  const [monthlyReport, setMonthlyReport] = useState(null)

  const navigate = useNavigate()

  const menuItems = [
    { title: "לוח בקרה", description: "צפה בנתונים עדכניים של העסק שלך", path: "/view-data" },
    { title: "פרטי העסק", description: "אין לך עדיין עסק? בוא נקים אותו יחד:)", path: "/register-admin&business" },
    { title: "הוספת תנועה בחשבון", description: "נהל תנועות שונות בחשבון שלך", path: "/account-transactions" },
    { title: "דוחות", description: "צפה בדוחות ביצועים ותחזיות", path: "/production-reports" },
  ]

  const quickActions = [
    { title: "צפייה בנתונים", path: "/view-data" },
    { title: "העלאת קבצים", path: "/upload-file" },
    { title: "ניהול משתמשים", path: "/user-management" },
  ]

  const statsData = [
    { title: "הכנסות החודש", value: incomes, trend: incomesPrecent },
    { title: "משתמשים פעילים", value: users, trend: userPrecent },
    { title: "מדד חודשי", value: monthlyReport ?? 0, trend: incomesPrecent },
    { title: "הוצאות החודש", value: expenses, trend: expensesPrecent },
  ]

  const fetchUserGrowthPercent = async (businessId: number) => {
    try {
      const response = await axios.get(`https://localhost:7031/api/User/users-by-business/${businessId}`)
      const users = response.data

      const now = dayjs()
      const currentMonth = now.month()
      const currentYear = now.year()
      const lastMonth = now.subtract(1, 'month').month()
      const lastMonthYear = now.subtract(1, 'month').year()

      const usersThisMonth = users.filter(user => {
        const created = dayjs(user.createdAt)
        return created.month() === currentMonth && created.year() === currentYear
      })

      const usersLastMonth = users.filter(user => {
        const created = dayjs(user.createdAt)
        return created.month() === lastMonth && created.year() === lastMonthYear
      })

      const countThisMonth = usersThisMonth.length
      const countLastMonth = usersLastMonth.length

      if (countLastMonth === 0) {
        return countThisMonth > 0 ? 100 : 0
      }

      const percentGrowth = ((countThisMonth - countLastMonth) / countLastMonth) * 100
      return Math.round(percentGrowth)
    } catch (error) {
      console.error('שגיאה בעת שליפת המשתמשים:', error)
      return 0
    }
  }

  useEffect(() => {
    const fetchMonthlyReport = async () => {
      try {
        const businessId = globalContextDetails.business_global.id
        const year = new Date().getFullYear()
        const month = new Date().getMonth() + 1
        const res = await axios.get(
          `https://localhost:7031/api/Reports/monthly?businessId=${businessId}&year=${year}&month=${month}`
        )
        setMonthlyReport(res.data?.monthlyMetric ?? 0)
        setIcomes(res.data?.currentMonthIncome ?? 0)
        setIcomesPrecent(res.data?.incomeChangePercent ?? 0)
        setExpenses(res.data?.currentMonthExpenses ?? 0)
        setExpensesPrecent(res.data?.expensesChangePercent ?? 0)
        setUserPrecent(await fetchUserGrowthPercent(businessId))
      } catch (err) {
        console.error("שגיאה בקבלת דוח חודשי:", err)
        setMonthlyReport(0)
      }
    }

    if (globalContextDetails.business_global?.id) {
      fetchMonthlyReport()
    }
  }, [globalContextDetails.business_global?.id])

  return (
    <div>
      <h1>שלום, {globalContextDetails.user?.firstName || "אורח"} {globalContextDetails.user?.lastName || ""}</h1>
      <h3>ברוכים הבאים למערכת BusinessMan - הדרך החכמה לנהל את העסק שלך</h3>
      <p>נהל את העסק שלך בקלות ויעילות עם כלים מתקדמים לניהול הכנסות, הוצאות, משתמשים ודוחות.</p>
      <button onClick={() => navigate("/view-data")}>צפה בנתוני העסק</button>
      <button onClick={() => navigate("/account-transactions")}>נהל תנועות בעסק</button>

      <h2>נתונים חודשיים</h2>
      <ul>
        {statsData.map((stat, index) => (
          <li key={index}>
            <p>{stat.title}: {stat.value}</p>
            <p>שינוי: {stat.trend}%</p>
          </li>
        ))}
      </ul>

      <h2>פעולות מהירות</h2>
      <ul>
        {quickActions.map((action, index) => (
          <li key={index}>
            <button onClick={() => navigate(action.path)}>{action.title}</button>
          </li>
        ))}
      </ul>

      <h2>ניהול העסק שלך</h2>
      <ul>
        {menuItems.map((item, index) => (
          <li key={index}>
            <h4>{item.title}</h4>
            <p>{item.description}</p>
            <button onClick={() => navigate(item.path)}>כניסה</button>
          </li>
        ))}
      </ul>

      <h3>"מערכת BusinessMan שינתה את הדרך שבה אני מנהל את העסק שלי. הכל נגיש ויעיל."</h3>
      <p>יוסי כהן, בעלים של "טכנולוגיות מתקדמות" בע״מ</p>
      <button onClick={() => navigate("/register-user")}>הצטרף עכשיו</button>
      <p>הצטרפו למאות עסקים שכבר משתמשים במערכת</p>

      <footer>
        <h4>BusinessMan</h4>
        <p>© 2025 BusinessMan. כל הזכויות שמורות.</p>
        <button>תנאי שימוש</button>
        <button>פרטיות</button>
        <button>צור קשר</button>
      </footer>
    </div>
  )
}

export default MyHome
import { useContext, useEffect, useState } from "react";
import axios from "axios";
import { globalContext } from "../context/GlobalContext";
import type { ProdactionReportData, ProdactionReportMonthlyData } from "../models/ProdactionReportData";

const ProductionReports = () => {
  const [reportData, setReportData] = useState<ProdactionReportData | null>(null);
  const [monthlyReportData, setMonthlyReportData] = useState<ProdactionReportMonthlyData | null>(null);
  const [loading, setLoading] = useState(true);
  const globalContextDetails = useContext(globalContext);
  const url = import.meta.env.VITE_API_URL;

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/business-report/${globalContextDetails.business_global.id}`,
          { withCredentials: true }
        );
        setReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח ייצור:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchReport();
  }, []);

  useEffect(() => {
    const fetchMonthlyReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/monthly?businessId=${globalContextDetails.business_global.id}&year=${new Date().getFullYear()}&month=${new Date().getMonth() + 1}`,
          { withCredentials: true }
        );
        setMonthlyReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח חודשי:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchMonthlyReport();
  }, []);

  const reportMetrics = reportData && monthlyReportData
    ? [
        { title: "סה\"כ הכנסות", value: reportData.totalIncome },
        { title: "סה\"כ הוצאות", value: reportData.totalExpenses },
        { title: "רווח נקי", value: reportData.netProfit },
        { title: "תזרים מזומנים", value: reportData.cashFlow },
        { title: "מספר חשבוניות", value: reportData.invoiceCount },
        { title: "סה\"כ סכום חובה", value: reportData.totalDebit },
        { title: "סה\"כ סכום זכות", value: reportData.totalCredit },
        { title: "תאריך הדוח", value: new Date(reportData.reportDate).toLocaleDateString("he-IL") },
      ]
    : [];

  const handlePrint = () => {
    const printContent = document.getElementById("report-to-print")?.innerHTML;
    if (!printContent) return;
    const newWindow = window.open("", "_blank");
    newWindow?.document.write(`
      <html>
        <head>
          <title>דוח ייצור</title>
        </head>
        <body>
          ${printContent}
        </body>
      </html>
    `);
    newWindow?.document.close();
    newWindow?.focus();
    newWindow?.print();
    newWindow?.close();
  };

  return (
    <div>
      <h1>דוח ייצור - {reportData?.businessName ?? "טוען..."}</h1>
      <p>צפה בביצועי הייצור והנתונים הפיננסיים של העסק שלך</p>
      <button onClick={handlePrint}>הדפס</button>
      <div id="report-to-print">
        {loading ? (
          <p>טוען נתונים...</p>
        ) : (
          <table border="1">
            <thead>
              <tr>
                <th>מדד</th>
                <th>ערך</th>
              </tr>
            </thead>
            <tbody>
              {reportMetrics.map((metric, index) => (
                <tr key={index}>
                  <td>{metric.title}</td>
                  <td>{metric.value}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default ProductionReports;
"use client"
import axios from "axios"
import { useState, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import type { BusinessPostModel } from "../models/BusinessPostModel"
import { convertToBusinessDto } from "../utils/convertToBusiness"
import { validationSchemaBusinessRegister } from "../utils/validationSchema"
import { Business } from "../models/Business"

const RegisterBusinessData = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const validationSchema = validationSchemaBusinessRegister
  const globalContextDetails = useContext(globalContext)

  const [businessData, setBusinessData] = useState<BusinessPostModel>({
    id: 0,
    businessId: 1,
    name: "עסק לדוגמה",
    address: "כתובת לדוגמה",
    email: "example@business.com",
    businessType: "סוג עסק לדוגמה",
    income: 10000,
    expenses: 5000,
    cashFlow: 5000,
    totalAssets: 20000,
    totalLiabilities: 10000,
  })

  const handleChange = (field: string, value: any) => {
    setBusinessData((prevData) => ({
      ...prevData,
      [field]: value,
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setErrors([])

    try {
      await validationSchema.validate(businessData, { abortEarly: false })

      const { data } = await axios.post<Business>(`${url}/api/Business`, businessData, {
        withCredentials: true,
      })
      globalContextDetails.setBusinessGlobal(convertToBusinessDto(data))
      if (onSubmitSuccess) onSubmitSuccess()
    } catch (err: any) {
      if (err.name === "ValidationError") {
        if (axios.isAxiosError(err)) {
          setErrors([err.response?.data?.message || "שגיאה כללית מהשרת"])
        } else {
          console.error("Unknown error:", err)
          setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
        }
      } else {
        console.error(err)
        setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <h2>רישום פרטי העסק</h2>

      <div>
        <label>מזהה עסק</label>
        <input
          type="number"
          value={businessData.businessId}
          onChange={(e) => handleChange("businessId", parseInt(e.target.value))}
        />
      </div>

      <div>
        <label>שם העסק</label>
        <input
          type="text"
          value={businessData.name}
          onChange={(e) => handleChange("name", e.target.value)}
        />
      </div>

      <div>
        <label>כתובת</label>
        <input
          type="text"
          value={businessData.address}
          onChange={(e) => handleChange("address", e.target.value)}
        />
      </div>

      <div>
        <label>אימייל</label>
        <input
          type="email"
          value={businessData.email}
          onChange={(e) => handleChange("email", e.target.value)}
        />
      </div>

      <div>
        <label>סוג עסק</label>
        <input
          type="text"
          value={businessData.businessType}
          onChange={(e) => handleChange("businessType", e.target.value)}
        />
      </div>

      <div>
        <label>הכנסות</label>
        <input
          type="number"
          value={businessData.income}
          onChange={(e) => handleChange("income", parseFloat(e.target.value))}
        />
      </div>

      <div>
        <label>הוצאות</label>
        <input
          type="number"
          value={businessData.expenses}
          onChange={(e) => handleChange("expenses", parseFloat(e.target.value))}
        />
      </div>

      <div>
        <label>תזרים מזומנים</label>
        <input
          type="number"
          value={businessData.cashFlow}
          onChange={(e) => handleChange("cashFlow", parseFloat(e.target.value))}
        />
      </div>

      <div>
        <label>סך הנכסים</label>
        <input
          type="number"
          value={businessData.totalAssets}
          onChange={(e) => handleChange("totalAssets", parseFloat(e.target.value))}
        />
      </div>

      <div>
        <label>סך ההתחייבויות</label>
        <input
          type="number"
          value={businessData.totalLiabilities}
          onChange={(e) => handleChange("totalLiabilities", parseFloat(e.target.value))}
        />
      </div>

      <button type="submit" disabled={loading}>
        {loading ? "שומר נתונים..." : "שמור פרטי עסק"}
      </button>

      {errors.length > 0 && (
        <div>
          {errors.map((err, index) => (
            <div key={index}>{err}</div>
          ))}
        </div>
      )}
    </form>
  )
}

export default RegisterBusinessData
import { useState } from "react"
import axios from "axios"

const UploadFiles = () => {
  const [file, setFile] = useState(null)
  const [message, setMessage] = useState(null)
  const [error, setError] = useState(null)
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState(0)
  const [uploadComplete, setUploadComplete] = useState(false)

  const url = import.meta.env.VITE_API_URL

  const handleFileChange = (event ) => {
    setFile(event.target.files[0])
    setMessage(null)
    setError(null)
    setUploadComplete(false)
  }

  const handleRemove = () => {
    setFile(null)
    setMessage(null)
    setError(null)
    setUploadComplete(false)
    setProgress(0)
  }

  const handleSubmit = async () => {
    if (!file) {
      setError("יש לבחור קובץ לפני השליחה")
      return
    }

    setUploading(true)
    setProgress(0)

    const formData = new FormData()
    formData.append("fileUpload", file)

    try {
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval)
            return 90
          }
          return prev + Math.random() * 15
        })
      }, 200)

      const response = await axios.post(`${url}/FileUpload/upload`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      })

      clearInterval(progressInterval)
      setProgress(100)

      setTimeout(() => {
        setMessage(response.data.message || "הקובץ הועלה בהצלחה")
        setError(null)
        setUploading(false)
        setUploadComplete(true)
      }, 800)
    } catch (err) {
      setProgress(0)
      setUploading(false)
      const msg = err.response?.data || "אירעה שגיאה בהעלאת הקובץ"
      setError(msg.message || msg)
      setMessage(null)
    }
  }

  return (
    <div>
      <h2>העלאת קבצים</h2>

      <div>
        <input type="file" onChange={handleFileChange} />
        {file && (
          <div>
            <p>{file.name}</p>
            <button onClick={handleRemove}>הסר</button>
          </div>
        )}
      </div>

      <div>
        <button onClick={handleSubmit} disabled={!file || uploading}>
          {uploading ? "מעלה..." : uploadComplete ? "הועלה בהצלחה!" : "העלה קובץ"}
        </button>
      </div>

      <div>
        {uploading && <progress value={progress} max="100" />}
      </div>

      <div>
        {message && (
          <div>
            <p>{message}</p>
          </div>
        )}
        {error && (
          <div>
            <p>{error}</p>
          </div>
        )}
      </div>
    </div>
  )
}

export default UploadFiles
"use client";
import { useContext, useState } from "react";
import axios from "axios";
import type { AdminRegister } from "../models/AdminRegister";
import { useNavigate } from "react-router-dom";
import { validationSchemaUserLogin } from "../utils/validationSchema";
import { globalContext } from "../context/GlobalContext";

const UserLogin = () => {
  const nav = useNavigate();
  const validationSchema = validationSchemaUserLogin;
  const [userLogin, setUserLogin] = useState<AdminRegister>({
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const url = import.meta.env.VITE_API_URL;
  const globalContextDetails = useContext(globalContext);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const valid = await validationSchema.isValid(userLogin);
      setErrors([]);

      if (valid) {
        try {
          const { data } = await axios.post<any>(
            `${url}/Auth/user-login`,
            userLogin,
            { withCredentials: true }
          );
          globalContextDetails.setUserCount(data.user.businessUsersCount);
          globalContextDetails.setUser(data.user);
          nav("/");
        } catch (e) {
          if (axios.isAxiosError(e) && e.response?.status === 400) {
            setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"]);
            return;
          }
          setErrors(
            e instanceof Error
              ? [e.message]
              : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"]
          );
          return;
        }
      } else {
        const validationErrors = await validationSchema
          .validate(userLogin)
          .catch((err) => err.errors);
        setErrors(validationErrors || []);
      }
    } catch (e) {
      if (axios.isAxiosError(e) && e.response?.status === 400) {
        setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"]);
        return;
      }
      setErrors(
        e instanceof Error
          ? [e.message]
          : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"]
      );
      return;
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: string) => {
    setUserLogin((prev) => ({ ...prev, [field]: value }));
    if (errors.length > 0) {
      setErrors([]);
    }
  };

  return (
    <div>
      <h2>כניסת משתמש</h2>
      <p>ברוכים הבאים למערכת ניהול העסק</p>

      <form onSubmit={handleSubmit}>
        <div>
          <label>אימייל:</label>
          <input
            type="email"
            value={userLogin.email}
            onChange={(e) => handleChange("email", e.target.value)}
            required
          />
        </div>

        <div>
          <label>סיסמה:</label>
          <input
            type="password"
            value={userLogin.password}
            onChange={(e) => handleChange("password", e.target.value)}
            required
          />
        </div>

        <div>
          <button type="submit" disabled={loading}>
            {loading ? "מתחבר..." : "התחבר"}
          </button>
        </div>
      </form>

      <hr />

      <div>
        <button onClick={() => nav("/register-user")}>הירשם עכשיו</button>
      </div>

      <div>
        <p>
          מנהל? <a href="/admin-login">התחבר כמנהל</a>
        </p>
      </div>

      {errors.length > 0 && (
        <div>
          {errors.map((err, idx) => (
            <div key={idx}>
              <strong>שגיאה:</strong> {err}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default UserLogin;
"use client"

import { useContext, useEffect, useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { globalContext } from "../context/GlobalContext"
import { User } from "../models/User"

const UserManagement = () => {
  const [users, setUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  const [modalVisible, setModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const nav = useNavigate()

  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    fetchUsers()
  }, [])

  const fetchUsers = async () => {
    try {
      setLoading(true)
      const { data } = await axios.get<User[]>(`${url}/api/User/users-by-business/${globalContextDetails.business_global.id}`, { withCredentials: true })
      setUsers(data)
    } catch (err) {
      console.error("שגיאה בטעינת משתמשים:", err)
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: number) => {
    try {
      const res = await axios.delete(`${url}/api/User/${id}`, { withCredentials: true })
      if (res.status >= 200 && res.status < 300) {
        globalContextDetails.setUserCount(globalContextDetails.usersCount - 1)
        setUsers((prev) => prev.filter((user) => user.id !== id))
      }
    } catch (err) {
      console.error("שגיאה במחיקה:", err)
    }
  }

  const handleEdit = (id: number) => {
    nav(`/edit-user/${id}`)
  }

  const handleViewDetails = (user: User) => {
    setSelectedUser(user)
    setModalVisible(true)
  }

  return (
    <div>
      <h2>ניהול משתמשים</h2>
      <p>צפה, הוסף, ערוך או מחק משתמשים במערכת</p>
      <div>
        <p>סה״כ משתמשים: {users.length}</p>
        <p>מנהלים: {users.filter((u) => u.role === 1).length}</p>
        <p>משתמשים: {users.filter((u) => u.role === 2).length}</p>
        <p>מנהלי חשבונות: {users.filter((u) => u.role === 3).length}</p>
        <button onClick={() => nav("/register-user")}>הוסף משתמש חדש</button>
      </div>
      <table>
        <thead>
          <tr>
            <th>ת.ז</th>
            <th>שם מלא</th>
            <th>אימייל</th>
            <th>טלפון</th>
            <th>תפקיד</th>
            <th>סטטוס</th>
            <th>כניסה אחרונה</th>
            <th>פעולות</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.idNumber}</td>
              <td>{user.firstName} {user.lastName}</td>
              <td>{user.email}</td>
              <td>{user.phone}</td>
              <td>{user.role === 1 ? "מנהל" : user.role === 3 ? "מנהל חשבונות" : "משתמש רגיל"}</td>
              <td>{user.status === "active" ? "פעיל" : "לא פעיל"}</td>
              <td>{new Date(user.lastLogin).toLocaleDateString("he-IL")}</td>
              <td>
                <button onClick={() => handleViewDetails(user)}>צפה</button>
                <button onClick={() => handleEdit(user.id)}>ערוך</button>
                <button onClick={() => handleDelete(user.id)}>מחק</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {modalVisible && selectedUser && (
        <div>
          <h3>פרטי משתמש</h3>
          <p>שם: {selectedUser.firstName} {selectedUser.lastName}</p>
          <p>אימייל: {selectedUser.email}</p>
          <p>טלפון: {selectedUser.phone}</p>
          <p>ת.ז: {selectedUser.idNumber}</p>
          <p>סטטוס: {selectedUser.status === "active" ? "פעיל" : "לא פעיל"}</p>
          <p>כניסה אחרונה: {new Date(selectedUser.lastLogin).toLocaleDateString("he-IL")}</p>
          <p>תאריך הצטרפות: {new Date(selectedUser.createdAt).toLocaleDateString("he-IL")}</p>
          <button onClick={() => setModalVisible(false)}>סגור</button>
          <button onClick={() => { handleEdit(selectedUser.id); setModalVisible(false); }}>ערוך</button>
        </div>
      )}
    </div>
  )
}

export default UserManagement
"use client"

import { useContext, useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import type { UserPostModel } from "../models/UserPostModel"
import { globalContext } from "../context/GlobalContext"

const UserRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const [myUser, setMyUser] = useState<UserPostModel>({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    phone: "",
    role: 2,
    idNumber: "",
  })

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    try {
      await validationSchema.validate(myUser, { abortEarly: false });
      setErrors([])

      try {
        await axios.post<UserPostModel>(`${url}/Auth/user-register`, myUser, { withCredentials: true })
        globalContextDetails.setUserCount(globalContextDetails.usersCount + 1)
        if (onSubmitSuccess) onSubmitSuccess()
        nav(-1)
      } catch (e) {
        setErrors(["שגיאה ברישום המשתמש"])
      }

    } catch (e) {
      if (e instanceof Error && 'inner' in e) {
        const validationErrors = (e as any).inner.map((err: any) => err.message)
        setErrors(validationErrors)
      } else {
        setErrors(["שגיאה ברישום המשתמש, נא לנסות שוב מאוחר יותר"])
      }
    }
    finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <h2>הרשמת משתמש חדש</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>שם פרטי</label>
          <input type="text" value={myUser.firstName} onChange={(e) => handleChange("firstName", e.target.value)} required />
        </div>
        <div>
          <label>שם משפחה</label>
          <input type="text" value={myUser.lastName} onChange={(e) => handleChange("lastName", e.target.value)} required />
        </div>
        <div>
          <label>טלפון</label>
          <input type="text" value={myUser.phone} onChange={(e) => handleChange("phone", e.target.value)} required />
        </div>
        <div>
          <label>מספר תעודת זהות</label>
          <input type="text" value={myUser.idNumber} onChange={(e) => handleChange("idNumber", e.target.value)} required />
        </div>
        <div>
          <label>אימייל</label>
          <input type="email" value={myUser.email} onChange={(e) => handleChange("email", e.target.value)} required />
        </div>
        <div>
          <label>סיסמא</label>
          <input type="password" value={myUser.password} onChange={(e) => handleChange("password", e.target.value)} required />
        </div>
        <div>
          <label>תפקיד</label>
          <input type="number" value={myUser.role} onChange={(e) => handleChange("role", parseInt(e.target.value) || 0)} required />
        </div>
        <div>
          <button type="submit" disabled={loading}>הירשם</button>
          <button type="button" onClick={() => nav("/user-login")}>חזרה לכניסה</button>
        </div>
      </form>
      <div>
        <p>כבר יש לך חשבון? <a href="/user-login">התחבר כאן</a></p>
      </div>
      {errors.length > 0 && (
        <div>
          {errors.map((error, index) => (
            <p key={index} style={{ color: "red" }}>{error}</p>
          ))}
        </div>
      )}
    </div>
  )
}

export default UserRegister
