//Brurya"
app.css:
/* Import Hebrew fonts */
@import url("https://fonts.googleapis.com/css2?family=Assistant:wght@300;400;500;600;700&family=Heebo:wght@300;400;500;600;700&family=Rubik:wght@300;400;500;600;700&display=swap");

* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  direction: rtl;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif;
  background: linear-gradient(135deg, #f5f7ff 0%, #ffffff 100%);
  overflow-x: hidden;
}

::selection {
  background-color: #d1cff2;
  color: inherit;
}

#root {
  width: 100%;
  min-height: 100vh;
}

a {
  text-decoration: none;
  color: inherit;
}

/* Subtle Animations - Less dramatic */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes gentleBounce {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  50% {
    opacity: 1;
    transform: scale(1.01);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes subtlePulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.02);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes gentleFloat {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-3px);
  }
}

@keyframes softGlow {
  0%,
  100% {
    box-shadow: 0 0 3px rgba(102, 126, 234, 0.3);
  }
  50% {
    box-shadow: 0 0 8px rgba(102, 126, 234, 0.5);
  }
}

/* Modal Overlay Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(8px);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeInUp 0.3s ease-out;
}

.modal-content {
  position: relative;
  z-index: 10000;
  animation: gentleBounce 0.4s ease-out;
}

/* Component Animations - Subtle */
.logo-section {
  animation: slideInRight 0.5s ease-out;
}

.logo-avatar {
  animation: gentleBounce 0.6s ease-out 0.2s both;
}

.logo-title {
  animation: fadeInUp 0.5s ease-out 0.3s both;
}

.sidebar-menu {
  animation: slideInRight 0.5s ease-out 0.1s both;
}

.sidebar-menu .ant-menu-item {
  animation: fadeInUp 0.4s ease-out both;
  animation-delay: calc(var(--item-index, 0) * 0.05s);
}

.main-header {
  animation: slideInLeft 0.5s ease-out;
}

.header-icon {
  animation: fadeInUp 0.6s ease-out 0.3s both;
}

.header-title {
  animation: fadeInUp 0.5s ease-out 0.2s both;
}

.nav-btn {
  animation: fadeInUp 0.4s ease-out both;
  animation-delay: calc(var(--btn-index, 0) * 0.05s);
  transition: all 0.2s ease;
}

.nav-btn:hover {
  transform: translateY(-1px);
  animation: subtlePulse 0.4s ease-in-out;
}

.menu-toggle-btn {
  transition: all 0.2s ease;
}

.menu-toggle-btn:hover {
  animation: subtlePulse 0.4s ease-in-out;
}

.desktop-sider {
  animation: slideInRight 0.6s ease-out;
}

.mobile-drawer .ant-drawer-content {
  animation: slideInRight 0.3s ease-out;
}

.main-content {
  animation: fadeInUp 0.5s ease-out 0.2s both;
}

.content-wrapper {
  animation: fadeInUp 0.6s ease-out 0.3s both;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 4px;
  animation: softGlow 2s ease-in-out infinite alternate;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}

html:lang(he),
body:lang(he) {
  direction: rtl;
  text-align: right;
}

.ltr {
  direction: ltr !important;
}

.rtl {
  direction: rtl !important;
}

/* Ant Design Layout Fixes for RTL */
.ant-layout {
  min-height: 100vh !important;
  width: 100% !important;
  direction: rtl !important;
}

.ant-layout-content {
  width: 100% !important;
  margin: 0 !important;
  background: transparent !important;
  direction: rtl !important;
}

/* RTL Sider positioning */
.ant-layout-sider {
  box-shadow: -2px 0 8px rgba(0, 0, 0, 0.05) !important;
  position: fixed !important;
  height: 100vh !important;
  right: 0 !important;
  top: 0 !important;
  z-index: 1001 !important;
  background: #fff !important;
}

/* Content area adjustments for RTL */
.main-layout {
  margin-right: 280px !important;
  width: calc(100% - 280px) !important;
  transition: all 0.2s ease !important;
  min-height: 100vh !important;
}

.main-layout.collapsed {
  margin-right: 80px !important;
  width: calc(100% - 80px) !important;
}

/* Mobile responsive */
@media (max-width: 768px) {
  .main-layout,
  .main-layout.collapsed {
    margin-right: 0 !important;
    width: 100% !important;
  }

  .ant-layout-sider {
    transform: translateX(100%) !important;
  }
}

/* Drawer RTL fix */
.ant-drawer-content-wrapper {
  right: 0 !important;
  left: auto !important;
}

.ant-drawer-body {
  padding: 0 !important;
  direction: rtl !important;
}

/* Menu RTL fixes */
.ant-menu {
  direction: rtl !important;
}

.ant-menu-item {
  border-radius: 8px !important;
  margin: 4px 8px !important;
  text-align: right !important;
  transition: all 0.2s ease !important;
}

.ant-menu-item:hover {
  transform: translateX(-2px) !important;
  animation: softGlow 0.4s ease-in-out !important;
}

.ant-menu-item-selected {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
}

.ant-menu-item-selected .anticon {
  color: white !important;
}

.ant-menu-item .ant-menu-title-content {
  margin-right: 12px !important;
  margin-left: 0 !important;
}

/* Unified Card Styles */
.ant-card {
  border-radius: 16px !important;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08) !important;
  transition: all 0.2s ease !important;
  width: 100% !important;
  direction: rtl !important;
  animation: fadeInUp 0.5s ease-out both !important;
  border: 1px solid rgba(0, 0, 0, 0.06) !important;
}

.ant-card:hover {
  transform: translateY(-2px) !important;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12) !important;
  animation: gentleFloat 2s ease-in-out infinite !important;
}

.ant-card-body {
  direction: rtl !important;
  text-align: right !important;
  padding: 24px !important;
}

/* Unified Button Styles */
.ant-btn {
  border-radius: 10px !important;
  font-weight: 600 !important;
  height: auto !important;
  padding: 10px 20px !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  direction: rtl !important;
  transition: all 0.2s ease !important;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif !important;
}

.ant-btn:hover {
  transform: translateY(-1px) !important;
  animation: subtlePulse 0.4s ease-in-out !important;
}

.ant-btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  border: none !important;
  box-shadow: 0 4px 14px rgba(102, 126, 234, 0.4) !important;
}

.ant-btn-primary:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%) !important;
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5) !important;
  animation: softGlow 0.4s ease-in-out !important;
}

/* Unified Input Styles */
.ant-input,
.ant-input-number,
.ant-select-selector {
  border-radius: 10px !important;
  padding: 12px 16px !important;
  border: 2px solid #e1e5e9 !important;
  transition: all 0.2s ease !important;
  direction: rtl !important;
  text-align: right !important;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif !important;
}

.ant-input:focus,
.ant-input-number:focus,
.ant-select-focused .ant-select-selector {
  border-color: #667eea !important;
  box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2) !important;
  animation: softGlow 0.4s ease-in-out !important;
}

/* Error Display Styles */
.error-message {
  background: linear-gradient(135deg, #fff2f0 0%, #ffebe8 100%);
  border: 1px solid #ffccc7;
  border-radius: 8px;
  padding: 12px 16px;
  margin: 8px 0;
  color: #cf1322;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
  animation: fadeInUp 0.3s ease-out;
}

.error-message .anticon {
  color: #cf1322;
}

/* Success Message Styles */
.success-message {
  background: linear-gradient(135deg, #f6ffed 0%, #e6f7d2 100%);
  border: 1px solid #b7eb8f;
  border-radius: 8px;
  padding: 12px 16px;
  margin: 8px 0;
  color: #389e0d;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
  animation: fadeInUp 0.3s ease-out;
}

.success-message .anticon {
  color: #389e0d;
}

/* Form Styles */
.ant-form-item-label > label {
  font-weight: 600 !important;
  color: #2d3748 !important;
  text-align: right !important;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif !important;
}

.ant-form-item {
  direction: rtl !important;
  animation: fadeInUp 0.4s ease-out both !important;
  animation-delay: calc(var(--form-item-index, 0) * 0.05s) !important;
}

.ant-form-item-explain-error {
  background: #fff2f0;
  border: 1px solid #ffccc7;
  border-radius: 6px;
  padding: 8px 12px;
  margin-top: 4px;
  color: #cf1322;
  font-weight: 500;
  animation: fadeInUp 0.3s ease-out;
}

.ant-input-number {
  width: 100% !important;
  direction: rtl !important;
}

.ant-input-number-input {
  text-align: right !important;
}

/* Container and layout utilities */
.page-container {
  width: 100% !important;
  max-width: 100% !important;
  padding: 0 !important;
  margin: 0 !important;
  direction: rtl !important;
}

.content-wrapper {
  width: 100% !important;
  max-width: 1200px !important;
  margin: 0 auto !important;
  padding: 20px 24px 24px 24px !important;
  direction: rtl !important;
  min-height: calc(100vh - 84px) !important;
}

@media (max-width: 768px) {
  .content-wrapper {
    padding: 16px 16px 16px 16px !important;
  }
}

/* Unified Component Styles */
.hero-section {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 60px 24px;
  border-radius: 20px;
  margin-bottom: 40px;
  position: relative;
  overflow: hidden;
  width: 100%;
  direction: rtl;
  animation: fadeInUp 0.6s ease-out both;
}

@media (max-width: 768px) {
  .hero-section {
    padding: 40px 20px;
    margin: 0 0 40px 0;
    border-radius: 16px;
  }
}

.stats-card {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.2s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.5s ease-out both;
}

.stats-card:hover {
  transform: translateY(-2px) scale(1.01);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
  animation: gentleFloat 1.5s ease-in-out infinite;
}

.feature-card {
  background: white;
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.2s ease;
  height: 100%;
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.5s ease-out both;
}

@media (max-width: 768px) {
  .feature-card {
    padding: 24px;
  }
}

.feature-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
  animation: gentleFloat 2s ease-in-out infinite;
}

.icon-wrapper {
  width: 64px;
  height: 64px;
  border-radius: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-size: 24px;
  animation: gentleBounce 0.6s ease-out both;
}

.icon-wrapper:hover {
  animation: subtlePulse 0.6s ease-in-out infinite;
}

.testimonial-section {
  background: rgba(102, 126, 234, 0.03);
  border: 1px solid rgba(102, 126, 234, 0.1);
  border-radius: 16px;
  padding: 32px;
  margin-top: 40px;
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.6s ease-out both;
}

@media (max-width: 768px) {
  .testimonial-section {
    padding: 24px;
  }
}

.financial-summary-card {
  border-radius: 16px;
  padding: 24px;
  height: 100%;
  transition: all 0.2s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.5s ease-out both;
}

.financial-summary-card:hover {
  transform: translateY(-2px) scale(1.01);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  animation: gentleFloat 1.5s ease-in-out infinite;
}

.income-card {
  background: rgba(16, 185, 129, 0.1);
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.expense-card {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

.centered-layout {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: calc(100vh - 84px);
  padding: 20px;
  width: 100%;
  direction: rtl;
  animation: fadeInUp 0.5s ease-out both;
}

.login-form {
  background: linear-gradient(145deg, #ffffff, #f8fafc);
  border: 1px solid rgba(0, 0, 0, 0.05);
  border-radius: 20px;
  padding: 40px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
  width: 100%;
  max-width: 500px;
  direction: rtl;
  text-align: right;
  animation: gentleBounce 0.6s ease-out both;
}

@media (max-width: 768px) {
  .login-form {
    padding: 24px;
    margin: 0;
    border-radius: 16px;
  }
}

.form-section {
  background: white;
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.5s ease-out both;
}

@media (max-width: 768px) {
  .form-section {
    padding: 20px;
    margin: 0;
  }
}

/* Grid fixes for RTL */
.ant-row {
  width: 100% !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  direction: rtl !important;
}

.ant-col {
  padding-left: 12px !important;
  padding-right: 12px !important;
  direction: rtl !important;
  animation: fadeInUp 0.4s ease-out both !important;
  animation-delay: calc(var(--col-index, 0) * 0.05s) !important;
}

@media (max-width: 768px) {
  .ant-col {
    padding-left: 8px !important;
    padding-right: 8px !important;
  }
}

/* Table responsive */
.ant-table-wrapper {
  width: 100% !important;
  overflow-x: auto !important;
  direction: rtl !important;
  animation: fadeInUp 0.5s ease-out both !important;
}

.ant-table {
  min-width: 800px !important;
  direction: rtl !important;
}

.ant-table-thead > tr > th {
  text-align: right !important;
  font-weight: 600 !important;
  background: #fafafa !important;
}

.ant-table-tbody > tr > td {
  text-align: right !important;
}

.ant-table-tbody > tr {
  transition: all 0.2s ease !important;
}

.ant-table-tbody > tr:hover {
  transform: scale(1.005) !important;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08) !important;
}

@media (max-width: 768px) {
  .ant-table {
    min-width: 600px !important;
  }
}

/* Typography RTL */
.ant-typography {
  direction: rtl !important;
  text-align: right !important;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif !important;
}

/* Space component RTL */
.ant-space {
  direction: rtl !important;
}

/* Upload component RTL */
.ant-upload-drag {
  direction: rtl !important;
  text-align: center !important;
  transition: all 0.2s ease !important;
  position: relative !important;
  overflow: hidden !important;
}

.ant-upload-drag:hover {
  transform: scale(1.01) !important;
  border-color: #667eea !important;
}

/* Progress RTL */
.ant-progress {
  direction: rtl !important;
}

/* Alert RTL */
.ant-alert {
  direction: rtl !important;
  text-align: right !important;
  animation: fadeInUp 0.4s ease-out both !important;
  border-radius: 8px !important;
}

/* Statistic RTL */
.ant-statistic {
  direction: rtl !important;
  text-align: right !important;
}

.ant-statistic-content {
  direction: rtl !important;
  text-align: right !important;
}

.ant-statistic-content-value {
  animation: gentleBounce 0.6s ease-out both !important;
}

/* Loading animations */
.ant-spin {
  animation: fadeInUp 0.6s ease-out both !important;
}

/* Drawer animations */
.ant-drawer-mask {
  animation: fadeInUp 0.2s ease-out !important;
}

.ant-drawer-content {
  animation: slideInRight 0.3s ease-out !important;
}

/* Responsive Design Improvements */
@media (max-width: 1200px) {
  .content-wrapper {
    max-width: 100% !important;
    padding: 16px !important;
  }
}

@media (max-width: 992px) {
  .hero-section {
    padding: 40px 20px !important;
  }

  .feature-card,
  .stats-card {
    margin-bottom: 16px !important;
  }
}

@media (max-width: 576px) {
  .ant-card-body {
    padding: 16px !important;
  }

  .form-section {
    padding: 16px !important;
  }

  .login-form {
    padding: 20px !important;
  }
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Focus styles for accessibility */
.ant-btn:focus,
.ant-input:focus,
.ant-select:focus {
  outline: 2px solid #667eea !important;
  outline-offset: 2px !important;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .ant-card {
    border: 2px solid #000 !important;
  }

  .ant-btn-primary {
    background: #000 !important;
    color: #fff !important;
  }
}
//Brurya
"use client"

import { useState } from "react"
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom"
import { Layout, Menu, Button, Typography, Avatar, Space, Drawer, ConfigProvider, theme as antTheme } from "antd"
import { MenuOutlined, UserAddOutlined, MenuFoldOutlined, MenuUnfoldOutlined, BuildOutlined, BankOutlined, BarChartOutlined, CrownOutlined, DollarOutlined, EyeOutlined, LoginOutlined, TeamOutlined, UploadOutlined, CloudDownloadOutlined } from "@ant-design/icons"
import { useMediaQuery } from "react-responsive"
import "./App.css"
import AdminLogin from "./components/AdminLogin"
import BusinessAndAdmin from "./components/BusinessAndAdmin"
import DataViewing from "./components/DataViweing"
import ProductionReports from "./components/ProductionReports"
import RegisterBusinessData from "./components/RegisterBusinessData"
import UploadFiles from "./components/UploadFiles"
import UserLogin from "./components/UserLogin"
import UserManagemet from "./components/UserManagemet"
import UserRegister from "./components/UserRegister"
import GlobalContext from "./context/GlobalContext"
import AdminRoute from "./components/AdminRoute"
import { Home } from "@mui/icons-material"
import MyHome from "./components/MyHome"
import EditUserPage from "./components/EditUserPage"
import BusinessFiles from "./components/BusinessFiles"
import AccountTransactions from "./components/AccountTransactions"
// Components

const { Header, Sider, Content } = Layout
const { Title } = Typography

// Navigation items with icons
const navItems = [
  { key: "/", label: "בית", icon: <Home />, path: "/" },
  { key: "/register-user", label: "רישום משתמש", icon: <UserAddOutlined />, path: "/register-user" },
  { key: "/user-login", label: "כניסת משתמש", icon: <LoginOutlined />, path: "/user-login" },
  { key: "/admin-login", label: "כניסת מנהל", icon: <CrownOutlined />, path: "/admin-login" },
  { key: "/business-files", label: "קבצי העסק", icon: <CloudDownloadOutlined />, path: "/business-files" },
  { key: "/upload-file", label: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
  { key: "/view-data", label: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
  { key: "/user-management", label: "משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  { key: "/production-reports", label: 'דו"ח ייצור', icon: <BarChartOutlined />, path: "/production-reports" },
  { key: "/account-transactions", label: "הוספת תנועה בחשבון", icon: <DollarOutlined />, path: "/account-transactions" },
  {
    key: "/register-admin&business",
    label: "רישום עסק ומנהל חדש",
    icon: <BankOutlined />,
    path: "/register-admin&business",
  },
]

// Responsive drawer component
function ResponsiveDrawer() {
  const [collapsed, setCollapsed] = useState(false)
  const [mobileOpen, setMobileOpen] = useState(false)
  const location = useLocation()
  const isMobile = useMediaQuery({ maxWidth: 768 })
  const isSmallScreen = useMediaQuery({ maxWidth: 1024 })

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen)
  }

  const handleCollapse = () => {
    setCollapsed(!collapsed)
  }

  const menuItems = navItems.map((item) => ({
    key: item.key,
    icon: item.icon,
    label: (
      <Link to={item.path} onClick={(e) => e.stopPropagation()}>
        {item.label}
      </Link>
    ),
  }))

  const siderContent = (
    <div style={{ height: "100%", display: "flex", flexDirection: "column", direction: "rtl", width: "100%" }}>
      <div
        className="logo-section"
        style={{
          padding: "24px 16px",
          borderBottom: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column",
        }}
      >
        <Avatar
          size={collapsed ? 32 : 48}
          className="logo-avatar"
          style={{
            background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            marginBottom: collapsed ? 0 : 8,
          }}
        >
          <BuildOutlined />
        </Avatar>
        {!collapsed && (
          <Title level={4} className="logo-title" style={{ margin: "8px 0 0 0", color: "#667eea" }}>
            BusinessMan
          </Title>
        )}
      </div>

      <Menu
        mode="inline"
        selectedKeys={[location.pathname]}
        className="sidebar-menu"
        style={{
          border: "none",
          flex: 1,
          padding: "8px",
          direction: "rtl",
        }}
        items={menuItems}
        onClick={(e) => {
          e.domEvent.stopPropagation()
          if (isMobile) setMobileOpen(false)
        }}
      />

      <div
        style={{
          padding: "16px",
          borderTop: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
        }}
      >
        <Typography.Text type="secondary" style={{ fontSize: "12px" }}>
          © 2025 BusinessMan
        </Typography.Text>
      </div>
    </div>
  )

  return (
    <ConfigProvider
      direction="rtl"
      theme={{
        algorithm: antTheme.defaultAlgorithm,
        token: {
          colorPrimary: "#667eea",
          borderRadius: 10,
          fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
        },
      }}
    >
      <Layout style={{ minHeight: "100vh", width: "100%", direction: "rtl" }}>
        {/* Desktop Sider */}
        {!isMobile && (
          <Sider
            trigger={null}
            collapsible
            collapsed={collapsed}
            width={280}
            collapsedWidth={80}
            className="desktop-sider"
            style={{
              background: "#fff",
              position: "fixed",
              height: "100vh",
              right: 0,
              top: 0,
              zIndex: 1001,
              boxShadow: "-2px 0 8px rgba(0, 0, 0, 0.05)",
            }}
          >
            {siderContent}
          </Sider>
        )}

        {/* Mobile Drawer */}
        {isMobile && (
          <Drawer
            title={
              <Space style={{ direction: "rtl" }}>
                <Avatar style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                  <BuildOutlined />
                </Avatar>
                <span>BusinessMan</span>
              </Space>
            }
            placement="right"
            onClose={handleDrawerToggle}
            open={mobileOpen}
            width={280}
            className="mobile-drawer"
            style={{ padding: 0, direction: "rtl" }}
          >
            <Menu
              mode="inline"
              selectedKeys={[location.pathname]}
              style={{ border: "none", direction: "rtl" }}
              items={menuItems}
              onClick={handleDrawerToggle}
            />
          </Drawer>
        )}

        <Layout
          className={`main-layout ${collapsed ? "collapsed" : ""}`}
          style={{
            marginRight: isMobile ? 0 : collapsed ? 80 : 280,
            width: isMobile ? "100%" : collapsed ? "calc(100% - 80px)" : "calc(100% - 280px)",
            minHeight: "100vh",
            direction: "rtl",
          }}
        >
          <Header
            className="main-header"
            style={{
              background: "#fff",
              padding: "0 24px",
              boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              position: "sticky",
              top: 0,
              zIndex: 100,
              width: "100%",
              direction: "rtl",
              height: "64px",
            }}
          >
            <Space style={{ direction: "rtl" }}>
              <Button
                type="text"
                className="menu-toggle-btn"
                icon={isMobile ? <MenuOutlined /> : collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
                onClick={isMobile ? handleDrawerToggle : handleCollapse}
                style={{ fontSize: "16px" }}
              />
              <Space style={{ direction: "rtl" }}>
                <BuildOutlined className="header-icon" style={{ color: "#667eea", fontSize: "20px" }} />
                <Title level={4} className="header-title" style={{ margin: 0, color: "#2d3748" }}>
                  מערכת לניהול עסק
                </Title>
              </Space>
            </Space>

            {!isSmallScreen && (
              <Space className="header-nav" style={{ direction: "rtl" }}>
                {navItems.slice(0, 4).map((item) => (
                  <Button
                    key={item.key}
                    type={location.pathname === item.path ? "primary" : "text"}
                    icon={item.icon}
                    className="nav-btn"
                    style={{
                      borderRadius: "8px",
                      fontWeight: location.pathname === item.path ? 600 : 400,
                    }}
                    onClick={(e) => e.stopPropagation()}
                  >
                    <Link to={item.path} onClick={(e) => e.stopPropagation()}>
                      {item.label}
                    </Link>
                  </Button>
                ))}
              </Space>
            )}
          </Header>

          <Content
            className="main-content"
            style={{
              padding: "0",
              background: "transparent",
              minHeight: "calc(100vh - 64px)",
              width: "100%",
              overflow: "auto",
              direction: "rtl",
              paddingTop: "20px",
            }}
          >
            <div
              className="content-wrapper"
              style={{
                minHeight: "calc(100vh - 84px)",
                padding: "20px 24px 24px 24px",
              }}
            >
              <Routes>
                <Route path="/" element={<MyHome />} />
                <Route path="/register-user" element={<UserRegister />} />
                <Route path="/user-login" element={<UserLogin />} />
                <Route path="/admin-login" element={<AdminLogin />} />
                <Route path="/upload-file" element={<UploadFiles />} />
                <Route path="/register-admin&business" element={<BusinessAndAdmin />} />
                <Route path="/edit-user/:id" element={<EditUserPage />} />

                <Route
                  path="/production-reports"
                  element={
                    <AdminRoute>
                      <ProductionReports />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/business-files"
                  element={
                    <AdminRoute>
                      <BusinessFiles />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/view-data"
                  element={
                    <AdminRoute>
                      <DataViewing />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/user-management"
                  element={
                    <AdminRoute>
                      <UserManagemet />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/business-register"
                  element={
                    <AdminRoute>
                      <RegisterBusinessData />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/account-transactions"
                  element={
                    <AdminRoute>
                      <AccountTransactions />
                    </AdminRoute>
                  }
                />
              </Routes>
            </div>
          </Content>
        </Layout>
      </Layout>
    </ConfigProvider>
  )
}

function App() {
  return (
    <div style={{ width: "100%", minHeight: "100vh", direction: "rtl" }}>
      <GlobalContext>
        <Router>
          <ResponsiveDrawer />
        </Router>
      </GlobalContext>
    </div>
  )
}

export default App
import React, { useState, useEffect, useContext } from "react"
import {
  Form,
  Input,
  InputNumber,
  Button,
  Select,
  Row,
  Col,
  message,
  Alert,
  Typography,
  Card,
} from "antd"
import axios from "axios"
import { globalContext } from "../context/GlobalContext"

const { Option } = Select
const { Text } = Typography

const transactionTypes = [
  { key: "Income", label: "הכנסה" },
  { key: "Expense", label: "הוצאה" },
  { key: "AssetIncrease", label: "הגדלת נכסים" },
  { key: "AssetDecrease", label: "הקטנת נכסים" },
  { key: "LiabilityIncrease", label: "הגדלת התחייבויות" },
  { key: "LiabilityDecrease", label: "הקטנת התחייבויות" },
  { key: "EquityIncrease", label: "הגדלת הון עצמי" },
  { key: "EquityDecrease", label: "הקטנת הון עצמי" },
  { key: "Revenue", label: "הכנסות נוספות" },
  { key: "CostOfGoodsSold", label: "עלות סחורה" },
  { key: "OtherIncome", label: "הכנסה אחרת" },
  { key: "OtherExpense", label: "הוצאה אחרת" },
]

const AccountTransactions: React.FC = () => {
  const globalContextDetails = useContext(globalContext)
  const [form] = Form.useForm()
  const [loading, setLoading] = useState(false)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const url = import.meta.env.VITE_API_URL
  const [totals, setTotals] = useState<{ debit: number; credit: number }>({
    debit: 0,
    credit: 0,
  })

  const user = {
    id: globalContextDetails.user.id,
    firstName: globalContextDetails.user.firstName,
    lastName: globalContextDetails.user.lastName,
    businessId: globalContextDetails.business_global.id,
  }

  const fetchTotals = async () => {
    try {
      const { data } = await axios.get(
        `${url}/api/Invoice/totals/${user.businessId}`,
        { withCredentials: true }
      )
      setTotals({ debit: data.totalDebit, credit: data.totalCredit })
    } catch (err) {
      console.error("Failed to fetch totals:", err)
    }
  }

  useEffect(() => {
    fetchTotals()
  }, [])

  const handleFinish = async (values: any) => {
    setLoading(true)
    setSuccess(false)
    setError(null)

    if (!values.amount || values.amount <= 0) {
      setError("נא להזין סכום תקין הגדול מאפס")
      setLoading(false)
      return
    }

    const invoiceToSend = {
      id: 0,
      amount: values.amount, // שולחים סכום אחד בלבד
      invoiceDate: new Date().toISOString(),
      status: 1,
      notes: values.description ?? "",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: `${user.firstName} ${user.lastName}`,
      updatedBy: `${user.firstName} ${user.lastName}`,
      invoicePath: "",
      userId: user.id,
      businessId: user.businessId ?? 0,
      type: values.transactionType,
    }

    try {
      await axios.post(`${url}/api/Invoice`, invoiceToSend, {
        withCredentials: true,
      })
      setSuccess(true)
      form.resetFields()
      message.success("התנועה נוספה בהצלחה!")
      await fetchTotals()
    } catch (err) {
      setError("אירעה שגיאה בשמירת התנועה.")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div dir="rtl" style={{ maxWidth: 800, margin: "auto" }}>
      <h2>רישום פקודת יומן</h2>

      <Card style={{ marginBottom: 20 }}>
        <Text strong>סכומים נוכחיים בעסק:</Text>
        <Row gutter={16} style={{ marginTop: 10 }}>
          <Col span={12}>
            <Text type="success">
              חובה (סכום כולל): ₪
              {(totals.debit ?? 0).toLocaleString()}
            </Text>
          </Col>
          <Col span={12}>
            <Text type="danger">
              זכות (סכום כולל): ₪
              {(totals.credit ?? 0).toLocaleString()}
            </Text>
          </Col>
        </Row>
      </Card>

      {error && (
        <Alert message={error} type="error" style={{ marginBottom: 16 }} />
      )}
      {success && (
        <Alert
          message="התנועה נשמרה בהצלחה"
          type="success"
          style={{ marginBottom: 16 }}
        />
      )}

      <Form form={form} layout="vertical" onFinish={handleFinish}>
        <Form.Item
          name="transactionType"
          label="סוג תנועה"
          rules={[{ required: true, message: "נא לבחור סוג תנועה" }]}
        >
          <Select placeholder="בחר סוג תנועה">
            {transactionTypes.map((type) => (
              <Option key={type.key} value={type.key}>
                {type.label}
              </Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item
          name="amount"
          label="סכום"
          rules={[
            { required: true, message: "נא להזין סכום" },
            {
              type: "number",
              min: 0.01,
              message: "הסכום חייב להיות גדול מאפס",
            },
          ]}
        >
          <InputNumber<number>
            placeholder="₪"
            style={{ width: "100%" }}
            min={0.01}
            formatter={(value) =>
              `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            }
            parser={(value) =>
              parseFloat(value?.replace(/₪\s?|(,*)/g, "") || "0")
            }
          />
        </Form.Item>

        <Form.Item name="description" label="תיאור">
          <Input.TextArea rows={2} placeholder="הוסף תיאור (אופציונלי)" />
        </Form.Item>

        <Button type="primary" htmlType="submit" loading={loading} block>
          שמור פקודה
        </Button>
      </Form>
    </div>
  )
}

export default AccountTransactions
"use client"
import { useContext, useState } from "react"
import type { Admin } from "../models/Admin"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, CrownOutlined, LoginOutlined } from "@ant-design/icons"
import CenteredLayout from "./CenteredLayout"
import { BusinessDto } from "../models/BusinessDto"

const { Title, Text, Link } = Typography

const AdminLogin = () => {
  const nav = useNavigate()
  const [admin, setAdmin] = useState<Admin>({ email: "a@a", password: "1" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const validationSchema = validationSchemaAdminLogin
  const globalContextDetails = useContext(globalContext)

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(admin)
      setErrors([])

      if (valid) {
        let data: any;
        try {
          const response = await axios.post<any>(`${url}/Auth/admin-login`, admin, { withCredentials: true });
          data = response.data;
          globalContextDetails.setUser(data.user);
          globalContextDetails.setIsAdmin(true);
        }
        catch (e) {
          if (axios.isAxiosError(e) && e.response?.status === 400) {
            setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"]);
            return;
          }
          setErrors(e instanceof Error ? [e.message] : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"]);
          return;
        }

        try {
          const res = await axios.get<BusinessDto>(`${url}/api/Business/${data.user.businessId}`, { withCredentials: true });
          globalContextDetails.setBusinessGlobal(res.data);
          globalContextDetails.setUserCount(res.data.usersCount);
        }
        catch (e) {
          setErrors(e instanceof Error ? [e.message] : ["שגיאה בטעינת העסק, נא לנסות שוב מאוחר יותר"]);
        }
        nav("/")
      } else {
        const validationErrors = await validationSchema.validate(admin).catch((err) => err.errors);
        setErrors(validationErrors || []);
      }
    } catch (e) {
      setErrors(e instanceof Error ? [e.message] : ["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (field: string, value: string) => {
    setAdmin((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <ConfigProvider direction="rtl" >
      <div style={{ marginTop: "35vh" }}></div>
      <CenteredLayout>
        <Card className="login-form" style={{ maxWidth: 500, width: "100%" }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <CrownOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              כניסת מנהל
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              ברוכים הבאים למערכת הניהול
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item label="אימייל" required style={{ marginBottom: 20 }}>
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size="large"
                value={admin.email}
                onChange={(e) => handleChange("email", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Form.Item label="סיסמא" required style={{ marginBottom: 24 }}>
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size="large"
                value={admin.password}
                onChange={(e) => handleChange("password", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: 16,
                marginBottom: 16,
              }}
            >
              התחבר
            </Button>

            <Divider>
              <Text type="secondary">או</Text>
            </Divider>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary">אין לך חשבון?</Text>
                <Link href="/register-admin&business" style={{ fontWeight: 600 }}>
                  הירשם כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </CenteredLayout>
    </ConfigProvider>
  )
}

export default AdminLogin
"use client"

import type React from "react"
import { useContext, useState } from "react"
import * as Yup from "yup"
import axios from "axios"
import type { UserPostModel } from "../models/UserPostModel"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import type { UserDto } from "../models/UserDto"
import { converFromUserDto } from "../utils/convertFromUserDto"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  UserAddOutlined,
  CrownOutlined,
} from "@ant-design/icons"

const { Title, Text } = Typography

const AdminRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const validationSchema = validationSchemaAdminLogin
  const [myAdmin, setMyAdmin] = useState<UserPostModel>({
    firstName: "יוסי",
    lastName: "כהן",
    email: "a@a",
    password: "",
    phone: "050-1234567",
    role: 1,
    idNumber: "123456789",
  })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const handleSubmit = (adminRegister: UserPostModel) => async () => {
    setLoading(true)
  
    try {
      // נוודא שכל השדות נבדקים לפי הסכמה, כולל הודעות שגיאה
      await validationSchema.validate(adminRegister, { abortEarly: false })
  
      // אם עבר ולידציה, נמשיך לנסות לשלוח לשרת
      try {
        const { data } = await axios.post<UserDto>(
          `${url}/Auth/admin-register`,
          adminRegister,
          { withCredentials: true }
        )
  
        globalContextDetails.setUser(converFromUserDto(data))
        if (data.role == 1) {
          globalContextDetails.setIsAdmin(true)
        }
  
        if (onSubmitSuccess) onSubmitSuccess()
        setErrors([]) // ננקה שגיאות אם הכל עבר
      } catch (e) {
        setErrors(["שגיאה ברישום"])
      }
    } catch (err) {
      // נציג את כל שגיאות ה־Yup
      if (err instanceof Yup.ValidationError) {
        setErrors(err.errors)
      } else {
        setErrors(["שגיאה כללית בוולידציה"])
      }
    } finally {
      setLoading(false)
    }
  }
  
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
    const { name, value, type } = event.target
    setMyAdmin((prevUser) => ({
      ...prevUser,
      [name]: type === "number" ? Number(value) : value,
    }))
  }

  return (
    <ConfigProvider direction="rtl">
      <Card className="form-section" style={{ width: "100%", maxWidth: "none" }}>
        <div style={{ textAlign: "center", marginBottom: 32 }}>
          <Avatar
            size={80}
            style={{
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              marginBottom: 16,
              boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
            }}
          >
            <CrownOutlined style={{ fontSize: 40 }} />
          </Avatar>

          <Title level={3} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
            רישום מנהל חדש
          </Title>

          <Text type="secondary" style={{ fontSize: 16 }}>
            נא למלא את כל הפרטים הנדרשים לרישום המנהל
          </Text>

          <Divider />
        </div>

        <Form layout="vertical" onFinish={handleSubmit(myAdmin)}>
          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            פרטים אישיים
          </Title>

          <Row gutter={[24, 16]}>
            <Col xs={24} md={12}>
              <Form.Item label="שם פרטי" required>
                <Input
                  name="firstName"
                  prefix={<UserOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם פרטי"
                  size="large"
                  value={myAdmin.firstName}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="שם משפחה" required>
                <Input
                  name="lastName"
                  prefix={<UserOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם משפחה"
                  size="large"
                  value={myAdmin.lastName}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="טלפון" required>
                <Input
                  name="phone"
                  prefix={<PhoneOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מספר טלפון"
                  size="large"
                  value={myAdmin.phone}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="מספר תעודת זהות" required>
                <Input
                  name="idNumber"
                  prefix={<IdcardOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מספר תעודת זהות"
                  size="large"
                  value={myAdmin.idNumber}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24}>
              <Form.Item label="אימייל" required>
                <Input
                  name="email"
                  prefix={<MailOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן כתובת אימייל"
                  size="large"
                  type="email"
                  value={myAdmin.email}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="סיסמא" required>
                <Input.Password
                  name="password"
                  prefix={<LockOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן סיסמא"
                  size="large"
                  value={myAdmin.password}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
            </Col>
          </Row>

          <Row gutter={[16, 16]} style={{ marginTop: 32 }}>
            <Col xs={24}>
              <Button
              onClick={() => handleSubmit(myAdmin)}
                type="primary"
                htmlType="submit"
                size="large"
                loading={loading}
                icon={<UserAddOutlined />}
                block
                style={{
                  height: 56,
                  fontWeight: 600,
                  fontSize: 16,
                  borderRadius: 12,
                  maxWidth: 220,
                }}
              >
                {loading ? "שומר נתונים..." : "שמור פרטי מנהל"}
              </Button>
            </Col>
          </Row>

          {errors.length > 0 && (
            <div style={{ marginTop: 24 }}>
              {errors.map((error, index) => (
                <Alert key={index} message={error} type="error" showIcon style={{ marginBottom: 8, borderRadius: 8 }} />
              ))}
            </div>
          )}
        </Form>
      </Card>
    </ConfigProvider>
  )
}

export default AdminRegister
"use client"

import { type JSX, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import { Box, Typography, Container, Paper, Button } from "@mui/material"
import { ThemeProvider, createTheme } from "@mui/material/styles"
import { NoAccountsOutlined } from "@mui/icons-material"
import { useNavigate } from "react-router-dom"

// Create a custom theme with RTL support and Hebrew font
const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: {
      main: "#3f51b5",
    },
    error: {
      main: "#f44336",
    },
  },
})

const AdminRoute = ({ children }: { children: JSX.Element }) => {
  const { isAdmin } = useContext(globalContext)
  const navigate = useNavigate()

  if (isAdmin === false) {
    return (
      <ThemeProvider theme={theme}>
        <Container
          maxWidth="sm"
          sx={{ height: "100vh", display: "flex", alignItems: "center", justifyContent: "center" }}
        >
          <Paper
            elevation={3}
            sx={{
              p: 5,
              borderRadius: 3,
              textAlign: "center",
              boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
            }}
          >
            <NoAccountsOutlined color="error" sx={{ fontSize: 80, mb: 2 }} />
            <Typography variant="h4" component="h1" color="error.main" gutterBottom fontWeight="bold">
              גישה נדחתה
            </Typography>
            <Typography variant="body1" color="text.secondary" paragraph>
              אין לך הרשאה לצפות בדף זה. רק מנהלים יכולים לגשת לתוכן זה.
            </Typography>
            <Box sx={{ mt: 3 }}>
              <Button
                variant="contained"
                color="primary"
                onClick={() => navigate("/")}
                sx={{
                  borderRadius: 2,
                  px: 4,
                  py: 1,
                  fontWeight: "bold",
                }}
              >
                חזרה לדף הבית
              </Button>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    )
  }

  return children
}

export default AdminRoute
"use client"

import { useContext, useEffect, useState } from "react"
import RegisterBusinessData from "./RegisterBusinessData"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import type { BusinessResponsePutModel } from "../models/BusinessResponsePutModel"
import AdminRegister from "./AdminRegister"
import type { UserDto } from "../models/UserDto"
import {
  Button,
  Typography,
  Card,
  Steps,
  Divider,
  Alert,
  ConfigProvider,
  Space,
  Avatar,
} from "antd"
import {
  ShopOutlined,
  UserOutlined,
  CheckCircleOutlined,
  RocketOutlined,
} from "@ant-design/icons"

const { Title, Text } = Typography

const BusinessAndAdmin = () => {
  const [isBusiness, setIsBusiness] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [businessDone, setBusinessDone] = useState(false)
  const [adminDone, setAdminDone] = useState(false)
  const [activeStep, setActiveStep] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    if (businessDone && adminDone) {
      updateObjects()
    }
  }, [businessDone, adminDone])

  const updateObjects = async () => {
    setError(null)

    const updateAdmin = {
      ...globalContextDetails.user,
      businessId: globalContextDetails.business_global.id,
      business: {
        ...globalContextDetails.business_global,
        createdAt: new Date(globalContextDetails.business_global.createdAt),
        updatedAt: new Date(globalContextDetails.business_global.updatedAt),
      },
      role: 1,
      updateBy:
        globalContextDetails.user.firstName +
        " " +
        globalContextDetails.user.lastName,
    }
    const updateBusiness = {
      ...globalContextDetails.business_global,
      users: [globalContextDetails.user],
      updateBy:
        globalContextDetails.user.firstName +
        " " +
        globalContextDetails.user.lastName,
    }
    globalContextDetails.setUser(updateAdmin)
    globalContextDetails.setBusinessGlobal(updateBusiness)

    try {
      await axios.put<UserDto>(
        `${url}/api/User/${globalContextDetails.user.id}`,
        updateAdmin,
        {
          withCredentials: true,
        },
      )
      await axios.put<BusinessResponsePutModel>(
        `${url}/api/Business/${globalContextDetails.business_global.id}`,
        updateBusiness,
        { withCredentials: true },
      )

      globalContextDetails.setBusinessGlobal(updateBusiness)
      globalContextDetails.setUser(updateAdmin)
      setSuccess(true)
      setActiveStep(3)
    } catch (e) {
      setError("אירעה שגיאה בעדכון הנתונים. אנא נסה שנית.")
    }
  }

  const handleAdminSuccess = () => {
    setAdminDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 1))
  }

  const handleBusinessSuccess = () => {
    setBusinessDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 2))
  }

  const steps = [
    {
      title: "התחלה",
      icon: <RocketOutlined />,
    },
    {
      title: "פרטי מנהל",
      icon: <UserOutlined />,
    },
    {
      title: "פרטי עסק",
      icon: <ShopOutlined />,
    },
    {
      title: "סיום",
      icon: <CheckCircleOutlined />,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          padding: "40px 20px",
          minHeight: "100vh",
          background: "#f0f2f5",
          marginTop: "30vh",
        }}
      >        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <RocketOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              הגדרת עסק ומנהל
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              הגדר את העסק שלך ופרטי המנהל בתהליך פשוט ומהיר
            </Text>

            <Divider />
          </div>

          <Steps current={activeStep} items={steps} style={{ marginBottom: 32 }} />

          {success ? (
            <div style={{ textAlign: "center", padding: "60px 20px" }}>
              <Avatar
                size={100}
                style={{
                  background: "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)",
                  marginBottom: 24,
                }}
              >
                <CheckCircleOutlined style={{ fontSize: 50 }} />
              </Avatar>
              <Title level={3} style={{ color: "#52c41a", marginBottom: 16 }}>
                הרישום הושלם בהצלחה!
              </Title>
              <Text type="secondary" style={{ fontSize: 16 }}>
                פרטי העסק והמנהל נשמרו במערכת בהצלחה
              </Text>
            </div>
          ) : (
            <Space direction="vertical" style={{ width: "100%" }} size="large">
              <Card
                title={
                  <Space>
                    <UserOutlined style={{ color: "#667eea" }} />
                    <span>רישום פרטי מנהל</span>
                  </Space>
                }
              >
                <Text type="secondary" style={{ display: "block", marginBottom: 16 }}>
                  הזן את פרטי המנהל שיהיה אחראי על ניהול העסק במערכת
                </Text>
                <Button
                  onClick={() => {
                    setIsAdmin(!isAdmin)
                    if (!isAdmin) setActiveStep(1)
                  }}
                  type={isAdmin ? "default" : "primary"}
                  size="large"
                  icon={<UserOutlined />}
                  block
                  style={{
                    marginBottom: isAdmin ? 24 : 0,
                    height: 48,
                    fontWeight: 600,
                    maxWidth: 220,
                  }}
                >
                  {isAdmin ? "סגור טופס רישום מנהל" : "פתח טופס רישום מנהל"}
                </Button>
                {isAdmin && (
                  <div style={{ marginTop: 24 }}>
                    <AdminRegister onSubmitSuccess={handleAdminSuccess} />
                  </div>
                )}
              </Card>

              {adminDone && (
                <Card
                  title={
                    <Space>
                      <ShopOutlined style={{ color: "#667eea" }} />
                      <span>רישום פרטי עסק</span>
                    </Space>
                  }
                >
                  <Text type="secondary" style={{ display: "block", marginBottom: 16 }}>
                    הזן את פרטי העסק הפיננסיים והבסיסיים
                  </Text>
                  <Button
                    onClick={() => {
                      setIsBusiness(!isBusiness)
                      if (!isBusiness) setActiveStep(2)
                    }}
                    type={isBusiness ? "default" : "primary"}
                    size="large"
                    icon={<ShopOutlined />}
                    block
                    style={{
                      marginBottom: isBusiness ? 24 : 0,
                      height: 48,
                      fontWeight: 600,
                      maxWidth: 220,
                    }}
                  >
                    {isBusiness ? "סגור טופס רישום עסק" : "פתח טופס רישום עסק"}
                  </Button>
                  {isBusiness && (
                    <div style={{ marginTop: 24 }}>
                      <RegisterBusinessData onSubmitSuccess={handleBusinessSuccess} />
                    </div>
                  )}
                </Card>
              )}

              {error && (
                <Alert
                  message="שגיאה!"
                  description={error}
                  type="error"
                  showIcon
                  style={{ borderRadius: 8 }}
                />
              )}
            </Space>
          )}
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default BusinessAndAdmin
import { useEffect, useState } from "react"
import { Button, List, Typography, message, Spin } from "antd"
import { DownloadOutlined, FileOutlined, CloudDownloadOutlined } from "@ant-design/icons"
import axios from "axios"
import { FileItem } from "../models/FileItem"

const { Text } = Typography

const BusinessFiles = () => {
    const [files, setFiles] = useState<FileItem[]>([])
    const [loading, setLoading] = useState(false)
    const url = import.meta.env.VITE_API_URL

    const fetchFiles = async () => {
        try {
            setLoading(true)
            const response = await axios.get<FileItem[]>(`${url}/FileUpload/my-files`, {
                withCredentials: true,
            })
            setFiles(response.data)
        } catch (err) {
            message.error("אירעה שגיאה בעת טעינת הקבצים")
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        fetchFiles()
    }, [])

    const handleDownloadZip = async () => {
        try {
            const response = await axios.get(`${url}/FileUpload/my-files-download-zip`, {
                responseType: "blob",
                withCredentials: true,
            })

            const blob = new Blob([response.data], { type: "application/zip" })
            const link = document.createElement("a")
            link.href = URL.createObjectURL(blob)
            link.download = "business-files.zip"
            link.click()
            URL.revokeObjectURL(link.href)
        } catch (err) {
            console.error(err)
            message.error("לא הצלחנו להוריד את כל הקבצים")
        }
    }

    const handleDownloadFile = async (file: FileItem) => {
        try {
            if (!file.id) {
                message.error("קובץ לא זמין להורדה");
                return;
            }
            const response = await axios.get(`${url}/FileUpload/download-file/${file.id}`, {
                responseType: "blob",
                withCredentials: true,
            });

            const fileName = file.fileName ?? "file";

            const blob = new Blob([response.data]);
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            link.click();
            URL.revokeObjectURL(link.href);
        } catch (err) {
            console.error(err);
            message.error("שגיאה בהורדת הקובץ");
        }
    };

    return (
        <div dir="rtl" style={{ padding: "2rem", background: "var(--bg-color)", color: "var(--text-color)" }}>
            <h2 style={{ marginBottom: "1rem" }}>קבצי העסק שלי</h2>

            <Button
                type="default"
                icon={<CloudDownloadOutlined />}
                onClick={handleDownloadZip}
                style={{
                    marginBottom: "1rem",
                    fontWeight: 600,
                    borderWidth: 2,
                }}
            >
                הורד את כל הקבצים כ־ZIP
            </Button>

            {loading ? (
                <Spin tip="טוען קבצים..." />
            ) : (
                <List
                    bordered
                    dataSource={files}
                    locale={{ emptyText: "לא נמצאו קבצים" }}
                    renderItem={(file) => {
                        const displayName = file.fileName ?? file.invoicePath.split('/').pop() ?? "קובץ לא ידוע"
                        return (
                            <List.Item
                                actions={[
                                    <Button
                                        type="link"
                                        icon={<DownloadOutlined />}
                                        onClick={() => handleDownloadFile(file)}
                                        style={{ fontWeight: 600 }}
                                        key="download"
                                    >
                                        הורד
                                    </Button>,
                                ]}
                                key={file.id}
                            >
                                <FileOutlined style={{ marginLeft: 8 }} />
                                <Text>{displayName}</Text>
                            </List.Item>
                        )
                    }}
                />
            )}
        </div>
    )
}

export default BusinessFiles
import type React from "react"
import type { Business } from "../models/Business"
import { Table, Typography, Card, ConfigProvider, Tag } from "antd"
import type { ColumnsType } from "antd/es/table"

const { Title } = Typography

interface BusinessTableProps {
  business: Business
}

const BusinessTable: React.FC<BusinessTableProps> = ({ business }) => {
  const dataSource = [business]

  const columns: ColumnsType<Business> = [
    {
      title: "מזהה",
      dataIndex: "id",
      key: "id",
      align: "right",
    },
    {
      title: "שם עסק",
      dataIndex: "name",
      key: "name",
      align: "right",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "כתובת",
      dataIndex: "address",
      key: "address",
      align: "right",
    },
    {
      title: "אימייל",
      dataIndex: "email",
      key: "email",
      align: "right",
    },
    {
      title: "סוג עסק",
      dataIndex: "businessType",
      key: "businessType",
      align: "right",
      render: (text) => <Tag color="blue">{text}</Tag>,
    },
    {
      title: "הכנסות",
      dataIndex: "income",
      key: "income",
      align: "right",
      render: (value) => <span style={{ color: "#52c41a", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "הוצאות",
      dataIndex: "expenses",
      key: "expenses",
      align: "right",
      render: (value) => <span style={{ color: "#ff4d4f", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "תזרים מזומנים",
      dataIndex: "cashFlow",
      key: "cashFlow",
      align: "right",
      render: (value) => <span style={{ color: "#1890ff", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "שווי נקי",
      dataIndex: "netWorth",
      key: "netWorth",
      align: "right",
      render: (value) => <span style={{ color: "#722ed1", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div style={{ width: "100%" }}>
        <Title level={4} style={{ marginBottom: 16, textAlign: "right" }}>
          פרטי העסק
        </Title>

        <Card style={{ borderRadius: 12, overflow: "hidden" }}>
          <Table
            dataSource={dataSource}
            columns={columns}
            pagination={false}
            rowKey="id"
            scroll={{ x: 800 }}
            style={{ direction: "rtl" }}
          />
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default BusinessTable
import { ConfigProvider } from "antd"
import type React from "react"

const CenteredLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <ConfigProvider direction="rtl">
      <div className="centered-layout">
        <div style={{ width: "100%", maxWidth: 600 }}>{children}</div>
      </div>
    </ConfigProvider>
  )
}

export default CenteredLayout
"use client"
import axios from "axios"
import type React from "react"

import { useState, useContext, useEffect } from "react"
import {
  Button,
  Typography,
  Card,
  Alert,
  Spin,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
  Statistic,
  Progress,
  Tag,
  Input,
  Form,
  Modal,
  InputNumber,
  message,
} from "antd"
import {
  EyeOutlined,
  ShopOutlined,
  EditOutlined,
  SaveOutlined,
  CloseOutlined,
  DollarOutlined,
  WarningOutlined,
  CreditCardOutlined,
  WalletOutlined,
  RiseOutlined,
  FallOutlined,
  FileTextOutlined,
} from "@ant-design/icons"
import { Business } from "../models/Business"
import { globalContext } from "../context/GlobalContext"

const { Title, Text } = Typography

function DataViewing() {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [dataLoaded, setDataLoaded] = useState(false)
  const [editModalVisible, setEditModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext) as { user: { businessId: number } }
  const [form] = Form.useForm()
  const [businessReport, setBusinessReport] = useState<{ totalIncome: number; totalExpenses: number; cashFlow: number; netProfit: number; invoiceCount: number } | null>(null);
  const [monthlyReport, setMonthlyReport] = useState<{ incomeChangePercent: number; expensesChangePercent: number; netProfitChangePercent: number } | null>(null);
  const [error, setError] = useState<string[] | null>(null);

  const [business, setBusiness] = useState<Business>({
    id: 0,
    businessId: 0,
    name: "",
    address: "",
    email: "",
    businessType: "",
    income: 0,
    expenses: 0,
    cashFlow: 0,
    totalAssets: 0,
    totalLiabilities: 0,
    netWorth: 0,
    createdAt: new Date(),
    createdBy: "",
    updatedAt: new Date(),
    updatedBy: "",
    users: [],
    invoices: [],
    usersCount: 0,
  });

  useEffect(() => {
    const fetchReports = async () => {
      try {
        setLoading(true);
        setError(null);

        // קריאה לדוח העסק
        const businessReportResponse = await axios.get(
          `https://localhost:7031/api/Reports/business-report/${globalContextDetails.user.businessId}`,
          { withCredentials: true }
        );

        const monthlyReportResponse = await axios.get(
          `${url}/api/Reports/monthly`,
          {
            params: {
              businessId: globalContextDetails.user.businessId,
              year: new Date().getFullYear(),
              month: new Date().getMonth() + 1, // חודש ב-0 מבוסס, לכן מוסיפים 1
            },
          }
        );

        setBusinessReport(businessReportResponse.data);
        setMonthlyReport(monthlyReportResponse.data);
      } catch (err) {
        console.error(err);
        setError(["שגיאה בטעינת הדוחות"]);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, [business]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setErrors([])
    setLoading(true)

    try {
      const res = await axios.get<Business>(`${url}/api/Business/${globalContextDetails.user.businessId}`, {
        withCredentials: true,
      })

      if (res.status !== 200) {
        setErrors(["שגיאה בטעינת נתוני העסק"])
        setLoading(false)
        return
      }

      if (!res.data) {
        setErrors(["לא נמצאו נתונים"])
        setLoading(false)
        return
      }
      setBusiness(res.data)
      setDataLoaded(true)
      setLoading(false)
    } catch (error) {
      console.error("Error fetching business data:", error)
      setErrors(["שגיאה בטעינת נתוני העסק"])
      setLoading(false)
    }
  }

  const handleEdit = () => {
    form.setFieldsValue(business)
    setEditModalVisible(true)
  }

  const handleSave = async () => {
    try {
      const values = await form.validateFields()
      const updatedBusiness = { ...business, ...values }

      setBusiness(updatedBusiness)
      setEditModalVisible(false)
      message.success("נתוני העסק עודכנו בהצלחה!")
    } catch (error) {
      message.error("שגיאה בעדכון נתוני העסק")
    }
  }


  const getChangeIcon = (value: number) => {
    return value > 0 ? <RiseOutlined style={{ color: "#52c41a" }} /> : <FallOutlined style={{ color: "#ff4d4f" }} />
  }

  const calculateProfitMargin = () => {
    if (business.income === 0) return 0
    return (((business.income - business.expenses) / business.income) * 100).toFixed(1)
  }

  const calculateROI = () => {
    if (business.totalAssets === 0) return 0
    return ((business.netWorth / business.totalAssets) * 100).toFixed(1)
  }

  const businessMetrics = [
    {
      title: "הכנסות כוללות",
      value: businessReport ? businessReport.totalIncome : 0,
      prefix: "₪",
      icon: <DollarOutlined />,
      color: "#52c41a",
      change: monthlyReport ? monthlyReport.incomeChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.incomeChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "הוצאות כוללות",
      value: businessReport ? businessReport.totalExpenses : 0,
      prefix: "₪",
      icon: <CreditCardOutlined />,
      color: "#ff4d4f",
      change: monthlyReport ? monthlyReport.expensesChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.expensesChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "תזרים מזומנים",
      value: businessReport ? businessReport.cashFlow : 0,
      prefix: "₪",
      icon: <WalletOutlined />,
      color: businessReport ? businessReport.cashFlow : 0 > 0 ? "#52c41a" : "#ff4d4f",
      change: null, // אין שינוי בדוח שלך, אפשר להוריד או להוסיף חישוב אם תרצה
      description: "תזרים מזומנים נוכחי",
    },
    {
      title: "רווח נקי",
      value: businessReport ? businessReport.netProfit : 0,
      prefix: "₪",
      icon: <WarningOutlined />,
      color: "#722ed1",
      change: monthlyReport ? monthlyReport.netProfitChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.netProfitChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "מספר חשבוניות",
      value: businessReport ? businessReport.invoiceCount : 0,
      prefix: "",
      icon: <FileTextOutlined />,
      color: "#1890ff",
      change: null,
      description: "מספר החשבוניות בחודש",
    },
  ];

  const performanceMetrics = [
    {
      title: "שיעור רווח",
      value: calculateProfitMargin(),
      color: "#52c41a",
    },
    {
      title: "תשואה על השקעה",
      value: calculateROI(),
      color: "#1890ff",
    },
    {
      title: "יחס חוב להון",
      value: business.totalAssets > 0 ? ((business.totalLiabilities / business.totalAssets) * 100).toFixed(1) : 0,
      color: "#fa8c16",
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div style={{ marginTop: "100vh" }}></div>

      <div className="business-data-container" style={{ maxWidth: 1400, margin: "0 auto" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <ShopOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              לוח בקרה עסקי מתקדם
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה ונהל את נתוני העסק שלך בצורה חכמה ויעילה
            </Text>

            <Divider />
          </div>

          {!dataLoaded ? (
            <div style={{ textAlign: "center", marginBottom: 32 }}>
              <Button
                type="primary"
                size="large"
                disabled={loading}
                loading={loading}
                icon={<EyeOutlined />}
                onClick={handleSubmit}
                style={{
                  height: 56,
                  padding: "0 40px",
                  fontWeight: 600,
                  fontSize: 18,
                  borderRadius: 16,
                }}
              >
                {loading ? "טוען נתונים..." : "טען נתוני עסק"}
              </Button>
            </div>
          ) : (
            <Space direction="vertical" style={{ width: "100%" }} size="large">
              {/* Business Header */}
              <Card
                style={{
                  background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                  color: "white",
                  border: "none",
                }}
              >
                <Row align="middle" justify="space-between">
                  <Col>
                    <Space direction="vertical" size="small">
                      <Title level={3} style={{ color: "white", margin: 0, textAlign: "right" }}>
                        {business.name}
                      </Title>
                      <Text style={{ color: "rgba(255,255,255,0.8)", fontSize: 16 }}>
                        {business.businessType} • {business.address}
                      </Text>
                      <Tag color="gold" style={{ marginTop: 8 }}>
                        {business.email}
                      </Tag>
                    </Space>
                  </Col>
                  <Col>
                    <Button
                      type="primary"
                      ghost
                      icon={<EditOutlined />}
                      onClick={handleEdit}
                      size="large"
                      style={{
                        borderColor: "white",
                        color: "white",
                        fontWeight: 600,
                      }}
                    >
                      ערוך פרטים
                    </Button>
                  </Col>
                </Row>
              </Card>

              {/* Financial Metrics */}

              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדים פיננסיים עיקריים
                </Title>
                <Row gutter={[16, 16]}>
                  {businessMetrics.map((metric, index) => (
                    <Col xs={24} sm={12} lg={8} key={index}>
                      <Card
                        className="business-metric"
                        style={{
                          height: "100%",
                          background: `${metric.color}08`,
                          border: `1px solid ${metric.color}30`,
                          borderRadius: 16,
                          "--metric-index": index,
                        } as React.CSSProperties}
                      >
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                            <Text type="secondary" style={{ fontSize: 14 }}>
                              {metric.title}
                            </Text>
                            <Avatar
                              size={40}
                              style={{
                                background: `${metric.color}20`,
                                color: String(metric.color),
                              }}
                            >
                              {metric.icon}
                            </Avatar>
                          </div>

                          <Statistic
                            value={metric.value}
                            prefix={metric.prefix}
                            valueStyle={{
                              color: String(metric.color),
                              fontSize: "1.8rem",
                              fontWeight: "bold",
                            }}
                          />

                          <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                            {getChangeIcon(metric.change ?? 0)}
                            {metric.change !== null && (
                              <Text
                                style={{
                                  color: metric.change > 0 ? "#52c41a" : "#ff4d4f",
                                  fontWeight: 600,
                                }}
                              >
                                {metric.change > 0 ? "+" : ""}
                                {metric.change}%
                              </Text>
                            )}
                          </div>

                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {metric.description}
                          </Text>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>
              {/* הצגת השגיאות */}
              {error && (
                <Alert
                  message="שגיאה בטעינת דוחות"
                  description={error.join(", ")}
                  type="error"
                  showIcon
                  style={{ marginBottom: 16, borderRadius: 12 }}
                />
              )}

              {/* Performance Indicators */}
              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדי ביצועים
                </Title>
                <Row gutter={[16, 16]}>
                  {performanceMetrics.map((metric, index) => (
                    <Col xs={24} md={8} key={index}>
                      <Card style={{ height: "100%", borderRadius: 16 }}>
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <Text strong style={{ fontSize: 16 }}>
                            {metric.title}
                          </Text>

                          <div style={{ textAlign: "center", margin: "16px 0" }}>
                            <Progress
                              type="circle"
                              format={() => (
                                <div>
                                  <div style={{ fontSize: "1.5rem", fontWeight: "bold", color: metric.color }}>
                                    {metric.value}
                                  </div>
                                  <div style={{ fontSize: "0.8rem", color: "#666" }}>
                                  </div>
                                </div>
                              )}
                              strokeColor={metric.color}
                              size={120}
                            />
                          </div>

                          <div style={{ textAlign: "center" }}>
                          </div>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>
            </Space>
          )}

          {loading && (
            <div style={{ textAlign: "center", padding: "60px 0" }}>
              <Spin size="large" />
              <div style={{ marginTop: 24 }}>
                <Text type="secondary" style={{ fontSize: 16 }}>
                  טוען נתוני העסק...
                </Text>
              </div>
            </div>
          )}

          {errors.length > 0 && (
            <div>
              {errors.map((error, index) => (
                <Alert
                  key={index}
                  message="שגיאה"
                  description={error}
                  type="error"
                  showIcon
                  style={{ marginBottom: 8, borderRadius: 12 }}
                />
              ))}
            </div>
          )}
        </Card>

        {/* Edit Modal */}
        <Modal
          title="עריכת נתוני עסק"
          open={editModalVisible}
          onCancel={() => setEditModalVisible(false)}
          footer={[
            <Button key="cancel" onClick={() => setEditModalVisible(false)} icon={<CloseOutlined />}>
              ביטול
            </Button>,
            <Button key="save" type="primary" onClick={handleSave} icon={<SaveOutlined />}>
              שמור שינויים
            </Button>,
          ]}
          width={800}
          className="edit-mode"
        >
          <Form form={form} layout="vertical" style={{ marginTop: 16 }}>
            <Row gutter={[16, 16]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם העסק" name="name">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סוג העסק" name="businessType">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="כתובת" name="address">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הכנסות" name="income">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הוצאות" name="expenses">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סך נכסים" name="totalAssets">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="התחייבויות" name="totalLiabilities">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
            </Row>
          </Form>
        </Modal>
      </div>
    </ConfigProvider>
  )
}

export default DataViewing
"use client"
import { useContext, useEffect, useState } from "react"
import axios from "axios"
import { useNavigate, useParams } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { convertToUser } from "../utils/converToUser"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  EditOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"
import { UserDto } from "../models/UserDto"

const { Title, Text } = Typography

const EditUserPage = () => {
  const { id } = useParams()
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const { setUser } = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL
  const [myUser, setMyUser] = useState<UserDto>({
    id: 0,
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    idNumber: "",
    password: "",
    role: 0,
    status: "", // Default value for status
    lastLogin: new Date(), // Default value for lastLogin
    createdAt: new Date(), // Default value for createdAt
    updateAt: new Date(), // Default value for updateAt
    businessId: 0, // Default value for businessId
  })

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await axios.get<UserDto>(`${url}/api/User/${id}`, { withCredentials: true })
        setMyUser(data)
      } catch (e) {
        setErrors(["שגיאה בטעינת נתוני המשתמש"])
      }
    }

    if (id) fetchUser()
  }, [id, url])

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(myUser)
      setErrors([])

      if (valid && id) {        
        const { data } = await axios.put<UserPostModel>(`${url}/api/User/${id}`, myUser, { withCredentials: true })
        setUser(convertToUser(data))
        nav("/user-management")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      setErrors(["שגיאה בעדכון המשתמש"])
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto", marginTop: "70vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <EditOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              עריכת משתמש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              עדכן את פרטי המשתמש
            </Text>

            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא (חדשה)" required>
                  <Input.Password
                    prefix={<LockOutlined />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<EditOutlined />}
                  block
                  style={{ height: 48, fontWeight: 600, fontSize: 16 }}
                >
                  עדכן משתמש
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav(-1)}
                  block
                  style={{ height: 48, fontWeight: 600, borderWidth: 2 }}
                >
                  חזרה
                </Button>
              </Col>
            </Row>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default EditUserPage
"use client"

import { useContext, useEffect, useState } from "react"
import { Typography, Row, Col, Card, Button, Space, Avatar, Statistic, ConfigProvider } from "antd"
import {
  DashboardOutlined,
  ShopOutlined,
  DollarOutlined,
  BarChartOutlined,
  ArrowRightOutlined,
  TeamOutlined,
  EyeOutlined,
  UploadOutlined,
  RiseOutlined,
  FallOutlined,
  BuildOutlined,
} from "@ant-design/icons"
import { useNavigate } from "react-router-dom"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import dayjs from "dayjs"
import { UserDto } from "../models/UserDto"

const { Title, Text, Paragraph } = Typography

const MyHome = () => {
  const globalContextDetails = useContext(globalContext)
  const [incomes, setIcomes] = useState<number>(0)
  const [incomesPrecent, setIcomesPrecent] = useState<number>(0)
  const [expenses, setExpenses] = useState<number>(0)
  const [expensesPrecent, setExpensesPrecent] = useState<number>(0)
  const [userPrecent, setUserPrecent] = useState<number>(0)
  const users = globalContextDetails.usersCount || 0
  const [monthlyReport, setMonthlyReport] = useState<number | null>(null)

  const navigate = useNavigate()

  const menuItems = [
    {
      title: "לוח בקרה",
      icon: <DashboardOutlined style={{ fontSize: 32, color: "#667eea" }} />,
      description: "צפה בנתונים עדכניים של העסק שלך",
      path: "/view-data",
      color: "#667eea",
    },
    {
      title: "פרטי העסק",
      icon: <ShopOutlined style={{ fontSize: 32, color: "#52c41a" }} />,
      description: " אין לך עדיין עסק? בוא נקים אותו יחד:)",
      path: "/register-admin&business",
      color: "#52c41a",
    },
    {
      title: "הוספת תנועה בחשבון",
      icon: <DollarOutlined style={{ fontSize: 32, color: "#fa8c16" }} />,
      description: "נהל תנועות שונות בחשבון שלך",
      path: "/account-transactions",
      color: "#fa8c16",
    },
    {
      title: "דוחות",
      icon: <BarChartOutlined style={{ fontSize: 32, color: "#722ed1" }} />,
      description: "צפה בדוחות ביצועים ותחזיות",
      path: "/production-reports",
      color: "#722ed1",
    },
  ]

  const quickActions = [
    { title: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
    { title: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
    { title: "ניהול משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  ]

  const statsData = [
    {
      title: "הכנסות החודש",
      value: incomes,
      prefix: "₪",
      trend: incomesPrecent,
      color: "#52c41a",
      icon: <DollarOutlined />,
    },
    {
      title: "משתמשים פעילים",
      value: users,
      trend: userPrecent,
      color: "#1890ff",
      icon: <TeamOutlined />,
    },
    {
      title: "מדד חודשי",
      value: monthlyReport ?? 0,
      suffix: "%",
      trend: incomesPrecent,
      color: "#722ed1",
      icon: <RiseOutlined />,
    },
    {
      title: "הוצאות החודש",
      value: expenses,
      trend: expensesPrecent,
      color: "#fa8c16",
      icon: <BarChartOutlined />,
    },
  ]


  const fetchUserGrowthPercent = async (businessId: number): Promise<number> => {
    try {
      const response = await axios.get<UserDto[]>(`https://localhost:7031/api/User/users-by-business/${businessId}`)
      const users = response.data

      const now = dayjs()
      const currentMonth = now.month()
      const currentYear = now.year()
      const lastMonth = now.subtract(1, 'month').month()
      const lastMonthYear = now.subtract(1, 'month').year()

      const usersThisMonth = users.filter(user => {
        const created = dayjs(user.createdAt)
        return created.month() === currentMonth && created.year() === currentYear
      })

      const usersLastMonth = users.filter(user => {
        const created = dayjs(user.createdAt)
        return created.month() === lastMonth && created.year() === lastMonthYear
      })

      const countThisMonth = usersThisMonth.length
      const countLastMonth = usersLastMonth.length

      if (countLastMonth === 0) {
        return countThisMonth > 0 ? 100 : 0 // אם בחודש שעבר לא היו משתמשים בכלל
      }

      const percentGrowth = ((countThisMonth - countLastMonth) / countLastMonth) * 100
      return Math.round(percentGrowth)
    } catch (error) {
      console.error('שגיאה בעת שליפת המשתמשים:', error)
      return 0
    }
  }

  useEffect(() => {
    const fetchMonthlyReport = async () => {
      try {
        const businessId = globalContextDetails.business_global.id
        const year = new Date().getFullYear()
        const month = new Date().getMonth() + 1
        const res = await axios.get(
          `https://localhost:7031/api/Reports/monthly?businessId=${businessId}&year=${year}&month=${month}`
        )
        setMonthlyReport(res.data?.monthlyMetric ?? 0)
        setIcomes(res.data?.currentMonthIncome ?? 0)
        setIcomesPrecent(res.data?.incomeChangePercent ?? 0)
        setExpenses(res.data?.currentMonthExpenses ?? 0)
        setExpensesPrecent(res.data?.expensesChangePercent ?? 0)
        setUserPrecent(await fetchUserGrowthPercent(businessId))
      } catch (err) {
        console.error("שגיאה בקבלת דוח חודשי:", err)
        setMonthlyReport(0)
      }
    }

    if (globalContextDetails.business_global?.id) {
      fetchMonthlyReport()
    }
  }, [globalContextDetails.business_global?.id])

  return (
    <ConfigProvider direction="rtl">
      <div>
        {/* Hero Section */}
        <div className="hero-section" style={{ position: "relative", zIndex: 1, marginTop: "1300px" }}>
          <Row gutter={[32, 32]} align="middle">
            <Col xs={24} lg={14}>
              <Title level={1} style={{ color: "white", marginBottom: 16, fontSize: "2.5rem" }}>
                שלום, {globalContextDetails.user?.firstName || "אורח"} {globalContextDetails.user?.lastName || ""}
              </Title>
              <Title level={3} style={{ color: "rgba(255,255,255,0.9)", marginBottom: 24, fontWeight: 400 }}>
                ברוכים הבאים למערכת BusinessMan - הדרך החכמה לנהל את העסק שלך
              </Title>
              <Paragraph style={{ color: "rgba(255,255,255,0.8)", fontSize: 16, marginBottom: 32 }}>
                נהל את העסק שלך בקלות ויעילות עם כלים מתקדמים לניהול הכנסות, הוצאות, משתמשים ודוחות.
              </Paragraph>
              <Space size="large" wrap>
                <Button
                  type="primary"
                  size="large"
                  onClick={() => navigate("/view-data")}
                  style={{
                    height: 48,
                    padding: "0 32px",
                    background: "#fa8c16",
                    borderColor: "#fa8c16",
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  צפה בנתוני העסק
                </Button>
                <Button
                  size="large"
                  onClick={() => navigate("/account-transactions")}
                  style={{
                    height: 48,
                    padding: "0 32px",
                    background: "rgba(255,255,255,0.1)",
                    borderColor: "rgba(255,255,255,0.3)",
                    color: "white",
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  נהל תנועות בעסק
                </Button>
              </Space>
            </Col>
            <Col xs={0} lg={10} style={{ textAlign: "center" }}>
              <div
                style={{
                  width: "100%",
                  maxWidth: 400,
                  height: 300,
                  background: "rgba(255,255,255,0.1)",
                  borderRadius: 20,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backdropFilter: "blur(10px)",
                  border: "1px solid rgba(255,255,255,0.2)",
                }}
              >
                <BuildOutlined style={{ fontSize: 120, color: "rgba(255,255,255,0.8)" }} />
              </div>
            </Col>
          </Row>
        </div>

        {/* Stats Section */}
        <Row gutter={[24, 24]} style={{ marginBottom: 48 }}>
          {statsData.map((stat, index) => (
            <Col xs={24} sm={12} lg={6} key={index}>
              <Card className="stats-card">
                <div style={{ display: "flex", alignItems: "center", marginBottom: 16 }}>
                  <Avatar
                    size={48}
                    style={{
                      background: `${stat.color}20`,
                      color: stat.color,
                      marginLeft: 12,
                    }}
                  >
                    {stat.icon}
                  </Avatar>
                </div>
                <Statistic
                  title={stat.title}
                  value={stat.value}
                  prefix={stat.prefix}
                  suffix={stat.suffix}
                  valueStyle={{
                    color: stat.color,
                    fontSize: "2rem",
                    fontWeight: "bold",
                  }}
                />
                <div style={{ display: "flex", alignItems: "center", marginTop: 12 }}>
                  {stat.trend > 0 ? (
                    <RiseOutlined style={{ color: "#52c41a", marginLeft: 4 }} />
                  ) : (
                    <FallOutlined style={{ color: "#ff4d4f", marginLeft: 4 }} />
                  )}
                  <Text
                    style={{
                      color: stat.trend > 0 ? "#52c41a" : "#ff4d4f",
                      fontWeight: 600,
                      marginLeft: 8,
                    }}
                  >
                    {stat.trend > 0 ? "+" : ""}
                    {stat.trend}%
                  </Text>
                  <Text type="secondary">מהחודש הקודם</Text>
                </div>
              </Card>
            </Col>
          ))}
        </Row>

        {/* Quick Actions */}
        <div style={{ marginBottom: 48 }}>
          <Title level={3} style={{ textAlign: "center", marginBottom: 24 }}>
            פעולות מהירות
          </Title>
          <Row gutter={[16, 16]}>
            {quickActions.map((action, index) => (
              <Col xs={24} sm={8} key={index}>
                <Button
                  type="default"
                  size="large"
                  icon={action.icon}
                  onClick={() => navigate(action.path)}
                  block
                  style={{
                    height: 56,
                    borderRadius: 12,
                    borderWidth: 2,
                    fontWeight: 600,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  {action.title}
                </Button>
              </Col>
            ))}
          </Row>
        </div>

        {/* Main Menu Cards */}
        <div style={{ marginBottom: 48 }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Title level={3} style={{ marginBottom: 8 }}>
              ניהול העסק שלך
            </Title>
            <Text type="secondary" style={{ fontSize: 16 }}>
              כל הכלים שאתה צריך לניהול יעיל ומוצלח של העסק שלך במקום אחד
            </Text>
          </div>

          <Row gutter={[24, 24]}>
            {menuItems.map((item, index) => (
              <Col xs={24} sm={12} lg={6} key={index}>
                <Card className="feature-card" hoverable style={{ height: "100%" }} bodyStyle={{ padding: 32 }}>
                  <div className="icon-wrapper" style={{ background: `${item.color}20`, color: item.color }}>
                    {item.icon}
                  </div>
                  <Title level={4} style={{ marginBottom: 12, color: "#2d3748" }}>
                    {item.title}
                  </Title>
                  <Paragraph type="secondary" style={{ marginBottom: 24, minHeight: 48 }}>
                    {item.description}
                  </Paragraph>
                  <Button
                    type="text"
                    icon={<ArrowRightOutlined />}
                    onClick={() => navigate(item.path)}
                    style={{
                      padding: 0,
                      height: "auto",
                      color: item.color,
                      fontWeight: 600,
                    }}
                  >
                    כניסה
                  </Button>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Testimonial */}
        <Card className="testimonial-section">
          <Row gutter={[32, 32]} align="middle">
            <Col xs={24} lg={16}>
              <Title level={4} style={{ color: "#667eea", marginBottom: 16 }}>
                "מערכת BusinessMan שינתה את הדרך שבה אני מנהל את העסק שלי. הכל נגיש ויעיל."
              </Title>
              <Text type="secondary">יוסי כהן, בעלים של "טכנולוגיות מתקדמות" בע״מ</Text>
            </Col>
            <Col xs={24} lg={8} style={{ textAlign: "center" }}>
              <Button
                type="primary"
                size="large"
                onClick={() => navigate("/register-user")}
                style={{
                  height: 48,
                  padding: "0 32px",
                  fontWeight: 600,
                  marginBottom: 8,
                }}
              >
                הצטרף עכשיו
              </Button>
              <div>
                <Text type="secondary" style={{ fontSize: 12 }}>
                  הצטרפו למאות עסקים שכבר משתמשים במערכת
                </Text>
              </div>
            </Col>
          </Row>
        </Card>

        {/* Footer */}
        <div style={{ marginTop: 64, paddingTop: 32, borderTop: "1px solid #f0f0f0" }}>
          <Row justify="space-between" align="middle">
            <Col>
              <Space>
                <Avatar style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                  <DashboardOutlined />
                </Avatar>
                <div>
                  <Title level={4} style={{ margin: 0, color: "#667eea" }}>
                    BusinessMan
                  </Title>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    © 2025 BusinessMan. כל הזכויות שמורות.
                  </Text>
                </div>
              </Space>
            </Col>
            <Col>
              <Space>
                <Button type="text" size="small">
                  תנאי שימוש
                </Button>
                <Button type="text" size="small">
                  פרטיות
                </Button>
                <Button type="text" size="small">
                  צור קשר
                </Button>
              </Space>
            </Col>
          </Row>
        </div>
      </div>
    </ConfigProvider>
  )
}

export default MyHome
import {
  Typography,
  Card,
  ConfigProvider,
  Tabs,
  Divider,
  Spin,
  Row,
  Col,
  Statistic,
  Avatar,
  Space,
  Tag,
  Button,
} from "antd";
import {
  BarChartOutlined,
  PieChartOutlined,
  LineChartOutlined,
  FileTextOutlined,
  WarningOutlined,
  DingdingOutlined,
  DollarOutlined,
  CalendarOutlined,
  DownloadOutlined,
  PrinterOutlined,
} from "@ant-design/icons";
import { useContext, useEffect, useState } from "react";
import axios from "axios";
import { globalContext } from "../context/GlobalContext";
import type { ProdactionReportData, ProdactionReportMonthlyData } from "../models/ProdactionReportData";
import { TrendingDownOutlined, TrendingUpOutlined } from "@mui/icons-material";

import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const { Title, Text } = Typography;
const { TabPane } = Tabs;

const ProductionReports = () => {
  const [activeTab, setActiveTab] = useState("1");
  const [reportData, setReportData] = useState<ProdactionReportData | null>(null);
  const [monthlyReportData, setMonthlyReportData] = useState<ProdactionReportMonthlyData | null>(null);
  const [loading, setLoading] = useState(true);
  const globalContextDetails = useContext(globalContext);
  const url = import.meta.env.VITE_API_URL;

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/business-report/${globalContextDetails.business_global.id}`,
          { withCredentials: true }
        );
        setReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח ייצור:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/monthly?businessId=${globalContextDetails.business_global.id}&year=${new Date().getFullYear()}&month=${new Date().getMonth() + 1}`,
          { withCredentials: true }
        );
        setMonthlyReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  const reportMetrics = reportData && monthlyReportData
    ? [
      {
        title: "סה״כ הכנסות",
        value: reportData.totalIncome,
        prefix: "₪",
        icon: <WarningOutlined />,
        color: "#52c41a",
        change: monthlyReportData.incomeChangePercent,
      },
      {
        title: "סה״כ הוצאות",
        value: reportData.totalExpenses,
        prefix: "₪",
        icon: <DingdingOutlined />,
        color: "#ff4d4f",
        change: monthlyReportData.expensesChangePercent,
      },
      {
        title: "רווח נקי",
        value: reportData.netProfit,
        prefix: "₪",
        icon: <DollarOutlined />,
        color: "#1890ff",
        change: monthlyReportData.netProfitChangePercent,
      },
      {
        title: "תזרים מזומנים",
        value: reportData.cashFlow,
        prefix: "₪",
        icon: <BarChartOutlined />,
        color: "#722ed1",
        change: 0, // אם יש לך ערך דינמי גם לזה, שים אותו כאן
      },
      {
        title: "מספר חשבוניות",
        value: reportData.invoiceCount,
        icon: <FileTextOutlined />,
        color: "#fa8c16",
        change: 0, // אם יש לך שינוי במספר חשבוניות מחודש קודם
      },
      {
        title: "סה״כ סכום חובה",
        value: reportData.totalDebit,
        prefix: "₪",
        icon: <TrendingDownOutlined />,
        color: "#f5222d",
        change: 0,
      },
      {
        title: "סה״כ סכום זכות",
        value: reportData.totalCredit,
        prefix: "₪",
        icon: <TrendingUpOutlined />,
        color: "#13c2c2",
        change: 0,
      },
      {
        title: "תאריך הדוח",
        value: new Date(reportData.reportDate).toLocaleDateString("he-IL"),
        icon: <CalendarOutlined />,
        color: "#666",
        change: 0,
      },
    ]
    : [];

  const handlePrint = () => {
    const printContent = document.getElementById("report-to-print")?.innerHTML;
    if (!printContent) return;

    const newWindow = window.open("", "_blank");
    newWindow?.document.write(`
        <html>
          <head>
            <title>דוח ייצור - ${reportData?.businessName ?? ""}</title>
            <style>
        body {
          direction: rtl;
          font-family: Arial, sans-serif;
          padding: 20px;
          background-color: #1e1e1e;
          color: #ffffff;
        }

        table {
          width: 100%;
          border-collapse: collapse;
          background-color: #2c2c2c;
          color: #ffffff;
        }

        th, td {
          border: 1px solid #555;
          padding: 8px;
          text-align: right;
        }

        th {
          background-color: #333;
          color: #f0f0f0;
        }

        h1, h2, h3, h4 {
          color: #ffffff;
        }

        .section {
          margin-bottom: 20px;
          padding: 10px;
          background-color: #2a2a2a;
          border-radius: 8px;
        }

        @media print {
          .business-metric {
            display: fles;
            flex-direction: row;
            align-items: center;
            max-height: 150px;
            padding: 4px;
            margin: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-family: "Assistant", "Rubik", "Heebo", sans-serif;
          }

          #report-to-print {
            page-break-inside: auto;
            break-inside: auto;
            color: black;
          }

          body {
            font-size: 12px;
            background-color: white !important;
            color: black !important;
          }

          .section {
            background-color: white !important;
          }

          table {
            background-color: white !important;
            color: black !important;
          }

          th {
            background-color: #eee !important;
            color: black !important;
          }
        }
      </style>
          </head>
          <body>
            ${printContent}
          </body>
        </html>
      `);
    newWindow?.document.close();
    newWindow?.focus();
    newWindow?.print();
    newWindow?.close();
  };

  const handleDownload = () => {
    const input = document.getElementById("report-to-print");
    if (!input) return;
  
    // הוספת פילטר שמגדיל קונטרסט
    input.style.filter = "contrast(1.3) brightness(0.9)";
  
    setTimeout(() => {
      html2canvas(input, { scale: 2 }).then((canvas) => {
        const imgData = canvas.toDataURL("image/png");
        const pdf = new jsPDF("p", "mm", "a4");
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
  
        pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
        pdf.save(`דוח_ייצור_${new Date().toLocaleDateString("he-IL")}.pdf`);
  
        // הסרת הפילטר אחרי הצילום
        input.style.filter = "";
      });
    }, 300);
  };
  
  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          padding: "40px 20px",
          maxWidth: 1400,
          margin: "0 auto",
          marginTop: "115vh",
        }}
      >
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <FileTextOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title
              level={2}
              style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}
            >
              דוח ייצור - {reportData?.businessName ?? "טוען..."}
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה בביצועי הייצור והנתונים הפיננסיים של העסק שלך
            </Text>

            <Divider />
          </div>

          <div style={{ marginBottom: 24 }}>
            <Row gutter={[16, 16]} justify="end">
              <Col>
                <Button
                  type="primary"
                  icon={<DownloadOutlined />}
                  size="large"
                  onClick={handleDownload}
                >
                  הורד דוח
                </Button>
              </Col>
              <Col>
                <Button
                  type="default"
                  icon={<PrinterOutlined />}
                  size="large"
                  onClick={handlePrint}
                >
                  הדפס
                </Button>
              </Col>
            </Row>
          </div>

          <Tabs activeKey={activeTab} onChange={setActiveTab} size="large">
            <TabPane
              tab={
                <span>
                  <BarChartOutlined />
                  סקירה כללית
                </span>
              }
              key="1"
            >
              <div >
                {loading ? (
                  <div style={{ textAlign: "center", padding: "60px 0" }}>
                    <Spin size="large" />
                    <div style={{ marginTop: 24 }}>
                      <Text type="secondary" style={{ fontSize: 16 }}>
                        טוען נתוני הדוח...
                      </Text>
                    </div>
                  </div>
                ) : (
                  <Space direction="vertical" style={{ width: "100%" }} size="large">
                    <div id="report-to-print">
                      <Title level={4} style={{ marginBottom: 16 }}>
                        מדדים פיננסיים עיקריים
                      </Title>
                      <Row gutter={[16, 16]}>
                        {reportMetrics.map((metric, index) => (
                          <Col xs={24} sm={12} lg={6} key={index}>
                            <Card
                              className="business-metric"
                              style={{
                                height: "100%",
                                background: `${metric.color}08`,
                                border: `1px solid ${metric.color}30`,
                                borderRadius: 16,
                              }}
                            >
                              <Space direction="vertical" style={{ width: "100%" }}>
                                <div
                                  style={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                  }}
                                >
                                  <Text type="secondary" style={{ fontSize: 14 }}>
                                    {metric.title}
                                  </Text>
                                  <Avatar
                                    size={40}
                                    style={{
                                      background: `${metric.color}20`,
                                      color: metric.color,
                                    }}
                                  >
                                    {metric.icon}
                                  </Avatar>
                                </div>

                                <Statistic
                                  value={metric.value}
                                  prefix={metric.prefix}
                                  valueStyle={{
                                    color: metric.color,
                                    fontSize: "1.8rem",
                                    fontWeight: "bold",
                                  }}
                                />

                                {metric.change !== 0 && (
                                  <div
                                    style={{
                                      display: "flex",
                                      alignItems: "center",
                                      gap: 8,
                                    }}
                                  >
                                    <Tag color={metric.change > 0 ? "success" : "error"}>
                                      {metric.change > 0 ? "+" : ""}
                                      {metric.change}%
                                    </Tag>
                                    <Text type="secondary" style={{ fontSize: 12 }}>
                                      מהחודש הקודם
                                    </Text>
                                  </div>
                                )}
                              </Space>
                            </Card>
                          </Col>
                        ))}
                      </Row>
                    </div>
                  </Space>
                )}
              </div>
            </TabPane>

            {/* שאר הטאבס נשארים כפי שהם */}
            <TabPane
              tab={
                <span>
                  <LineChartOutlined />
                  מגמות
                </span>
              }
              key="2"
            >
              {/* תוכן הטאב */}
            </TabPane>

            <TabPane
              tab={
                <span>
                  <PieChartOutlined />
                  התפלגות
                </span>
              }
              key="3"
            >
              {/* תוכן הטאב */}
            </TabPane>
          </Tabs>
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default ProductionReports;
"use client"
import axios from "axios"
import { useState, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import type { BusinessPostModel } from "../models/BusinessPostModel"
import {  convertToBusinessDto } from "../utils/convertToBusiness"
import { validationSchemaBusinessRegister } from "../utils/validationSchema"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  ShopOutlined,
  MailOutlined,
  EnvironmentOutlined,
  TagOutlined,
  DollarOutlined,
  MinusCircleOutlined,
  BankOutlined,
  SaveOutlined,
  CreditCardOutlined,
} from "@ant-design/icons"
import { Business } from "../models/Business"

const { Title, Text } = Typography

const RegisterBusinessData = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const validationSchema = validationSchemaBusinessRegister
  const globalContextDetails = useContext(globalContext)

  const [businessData, setBusinessData] = useState<BusinessPostModel>({
    id: 0,
    businessId: 1,
    name: "עסק לדוגמה",
    address: "כתובת לדוגמה",
    email: "example@business.com",
    businessType: "סוג עסק לדוגמה",
    income: 10000,
    expenses: 5000,
    cashFlow: 5000,
    totalAssets: 20000,
    totalLiabilities: 10000,
  })

  const handleChange = (field: string, value: any) => {
    setBusinessData((prevData) => ({
      ...prevData,
      [field]: value,
    }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    setErrors([])
    try {
      await validationSchema.validate(businessData, { abortEarly: false })

      const { data } = await axios.post<Business>(`${url}/api/Business`, businessData, {
        withCredentials: true,
      })
      globalContextDetails.setBusinessGlobal(convertToBusinessDto(data))
      if (onSubmitSuccess) onSubmitSuccess()
    } catch (err: any) {
      if (err.name === "ValidationError") {
        if (axios.isAxiosError(err)) {
          setErrors([
            err.response?.data?.message || "שגיאה כללית מהשרת"
          ])
        } else {
          console.error("Unknown error:", err)
          setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
        }
      } else {
        console.error(err)
        setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <Card className="form-section" style={{ width: "100%", maxWidth: "none" }}>
        <div style={{ textAlign: "center", marginBottom: 32 }}>
          <Avatar
            size={80}
            style={{
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              marginBottom: 16,
              boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
            }}
          >
            <ShopOutlined style={{ fontSize: 40 }} />
          </Avatar>
          <Title level={3} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
            רישום פרטי העסק
          </Title>
          <Text type="secondary" style={{ fontSize: 16 }}>
            נא למלא את כל הפרטים הנדרשים לרישום העסק שלך
          </Text>
          <Divider />
        </div>

        <Form layout="vertical" onFinish={handleSubmit}>
          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            פרטים בסיסיים
          </Title>
          <Row gutter={[24, 16]}>
            <Col xs={24} md={12}>
              <Form.Item label="מזהה ייחודי לעסק" required>
                <InputNumber
                  prefix={<ShopOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מזהה עסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.businessId}
                  onChange={(value) => handleChange("businessId", value ?? 1)}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="שם העסק" required>
                <Input
                  prefix={<ShopOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם העסק"
                  size="large"
                  value={businessData.name}
                  onChange={(e) => handleChange("name", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="כתובת העסק" required>
                <Input
                  prefix={<EnvironmentOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן כתובת העסק"
                  size="large"
                  value={businessData.address}
                  onChange={(e) => handleChange("address", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="אימייל של העסק" required>
                <Input
                  prefix={<MailOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן אימייל העסק"
                  size="large"
                  type="email"
                  value={businessData.email}
                  onChange={(e) => handleChange("email", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24}>
              <Form.Item label="סוג העסק" required>
                <Input
                  prefix={<TagOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן סוג העסק (לדוגמה: טכנולוגיה, מסחר, שירותים)"
                  size="large"
                  value={businessData.businessType}
                  onChange={(e) => handleChange("businessType", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider />

          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            נתונים פיננסיים
          </Title>

          <Row gutter={[24, 16]}>
            <Col xs={24} md={8}>
              <Form.Item label="הכנסות העסק (₪)" required>
                <InputNumber
                  prefix={<DollarOutlined style={{ color: "#52c41a" }} />}
                  placeholder="הזן הכנסות העסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.income}
                  onChange={(value) => handleChange("income", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="הוצאות העסק (₪)" required>
                <InputNumber
                  prefix={<MinusCircleOutlined style={{ color: "#ff4d4f" }} />}
                  placeholder="הזן הוצאות העסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.expenses}
                  onChange={(value) => handleChange("expenses", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="תזרים מזומנים (₪)" required>
                <InputNumber
                  prefix={<BankOutlined style={{ color: "#1890ff" }} />}
                  placeholder="הזן תזרים מזומנים"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.cashFlow}
                  onChange={(value) => handleChange("cashFlow", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="סך הנכסים (₪)" required>
                <InputNumber
                  prefix={<BankOutlined style={{ color: "#722ed1" }} />}
                  placeholder="הזן סך הנכסים"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.totalAssets}
                  onChange={(value) => handleChange("totalAssets", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="סך ההתחייבויות (₪)" required>
                <InputNumber
                  prefix={<CreditCardOutlined style={{ color: "#fa8c16" }} />}
                  placeholder="הזן סך ההתחייבויות"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.totalLiabilities}
                  onChange={(value) => handleChange("totalLiabilities", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[16, 16]} style={{ marginTop: 32 }}>
            <Col xs={24}>
              <Button
                type="primary"
                htmlType="submit"
                size="large"
                loading={loading}
                icon={<SaveOutlined />}
                block
                style={{
                  height: 56,
                  fontWeight: 600,
                  fontSize: 16,
                  borderRadius: 12,
                  maxWidth: 220,
                }}
              >
                {loading ? "שומר נתונים..." : "שמור פרטי עסק"}
              </Button>
            </Col>
          </Row>

          {errors.length > 0 && (
            <div style={{ marginTop: 24 }}>
              {errors.map((error, index) => (
                <Alert key={index} message={error} type="error" showIcon style={{ marginBottom: 8, borderRadius: 8 }} />
              ))}
            </div>
          )}
        </Form>
      </Card>
    </ConfigProvider>
  )
}

export default RegisterBusinessData
"use client"
import { useState } from "react"
import axios from "axios"
import {
  Upload,
  Button,
  Typography,
  Card,
  Alert,
  Progress,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
} from "antd"
import {
  CloudUploadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  InboxOutlined,
  FileOutlined,
  DeleteOutlined,
  EyeOutlined,
  DownloadOutlined,
  RocketOutlined,
} from "@ant-design/icons"
import type { UploadProps } from "antd"

const { Title, Text } = Typography
const { Dragger } = Upload

const UploadFiles = () => {
  const [file, setFile] = useState<File | null>(null)
  const [message, setMessage] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState(0)
  const [uploadComplete, setUploadComplete] = useState(false)
  const [dragActive, setDragActive] = useState(false)

  const url = import.meta.env.VITE_API_URL

  const uploadProps: UploadProps = {
    name: "fileUpload",
    multiple: false,
    accept: ".jpg,.png,.pdf,.docx,.txt",
    beforeUpload: (file) => {
      setFile(file)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      return false // Prevent automatic upload
    },
    onRemove: () => {
      setFile(null)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      setProgress(0)
    },
    onDrop: () => setDragActive(false),
  }

  const handleSubmit = async () => {
    if (!file) {
      setError("יש לבחור קובץ לפני השליחה")
      return
    }

    setUploading(true)
    setProgress(0)

    const formData = new FormData()
    formData.append("fileUpload", file)

    try {
      // Simulate realistic progress
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval)
            return 90
          }
          return prev + Math.random() * 15
        })
      }, 200)

      const response = await axios.post(`${url}/FileUpload/upload`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      })

      clearInterval(progressInterval)
      setProgress(100)

      setTimeout(() => {
        setMessage(response.data.message || "הקובץ הועלה בהצלחה")
        setError(null)
        setUploading(false)
        setUploadComplete(true)
      }, 800)
    } catch (err: any) {
      setProgress(0)
      setUploading(false)
      const msg = err.response?.data || "אירעה שגיאה בהעלאת הקובץ"
      setError(msg.message || msg)
      setMessage(null)
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  const getFileIcon = (fileName: string) => {
    const extension = fileName.split(".").pop()?.toLowerCase()
    switch (extension) {
      case "pdf":
        return <FileOutlined style={{ color: "#ff4d4f" }} />
      case "jpg":
      case "jpeg":
      case "png":
        return <FileOutlined style={{ color: "#52c41a" }} />
      case "docx":
      case "doc":
        return <FileOutlined style={{ color: "#1890ff" }} />
      default:
        return <FileOutlined style={{ color: "#666" }} />
    }
  }

  return (
    <ConfigProvider direction="rtl">
      {/* Floating Upload Status Overlay */}
      {uploading && file && (
        <div
          style={{
            position: "fixed",
            top: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            zIndex: 9999,
            background: "rgba(255, 255, 255, 0.95)",
            backdropFilter: "blur(10px)",
            border: "1px solid #d9d9d9",
            borderRadius: "12px",
            padding: "16px 24px",
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.15)",
            minWidth: "300px",
            maxWidth: "500px",
          }}
        >
          <Space direction="vertical" style={{ width: "100%" }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
              <Space>
                {getFileIcon(file.name)}
                <Text strong>{file.name}</Text>
              </Space>
              <Text style={{ color: "#fa8c16", fontWeight: "bold" }}>{Math.round(progress)}%</Text>
            </div>
            <Progress
              percent={progress}
              strokeColor={{
                "0%": "#667eea",
                "50%": "#764ba2",
                "100%": "#52c41a",
              }}
              strokeWidth={6}
              showInfo={false}
            />
            <Text type="secondary" style={{ fontSize: 12, textAlign: "center" }}>
              {progress < 30 && "מתחיל העלאה..."}
              {progress >= 30 && progress < 60 && "מעלה נתונים..."}
              {progress >= 60 && progress < 90 && "מעבד קובץ..."}
              {progress >= 90 && "משלים העלאה..."}
            </Text>
          </Space>
        </div>
      )}

      <div className="upload-container" style={{ maxWidth: 900, margin: "0 auto", marginTop: "45vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              className="upload-avatar"
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <RocketOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              העלאת קבצים וניתוח נתונים לעסק עם AI
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              גרור קבצים או לחץ לבחירה - תמיכה מלאה בכל סוגי הקבצים
            </Text>

            <Divider />
          </div>

          <Row gutter={[24, 24]}>
            <Col xs={24} lg={16}>
              <Dragger
                {...uploadProps}
                className={`upload-dragger ${dragActive ? "drag-active" : ""}`}
                style={{
                  background: dragActive
                    ? "linear-gradient(145deg, #f0f7ff, #e6f4ff)"
                    : "linear-gradient(145deg, #f8fafc, #ffffff)",
                  border: dragActive ? "3px dashed #1890ff" : "2px dashed #667eea",
                  borderRadius: 20,
                  padding: "60px 20px",
                  marginBottom: 24,
                  position: "relative",
                  overflow: "hidden",
                }}
              >
                <div
                  style={{
                    position: "relative",
                    zIndex: 2,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    flexDirection: "column",
                  }}
                >
                  <p className="ant-upload-drag-icon">
                    <InboxOutlined
                      style={{
                        fontSize: 80,
                        color: dragActive ? "#1890ff" : "#667eea",
                      }}
                    />
                  </p>
                  <Title
                    level={3}
                    style={{
                      color: "#2d3748",
                      marginBottom: 12,
                    }}
                  >
                    {dragActive ? "שחרר כאן!" : "גרור קובץ לכאן או לחץ לבחירה"}
                  </Title>
                  <Text type="secondary" style={{ fontSize: 16, display: "block", marginBottom: 16 }}>
                    תומך בקבצים מסוג JPG, PNG, PDF, DOCX, TXT
                  </Text>
                  <Text type="secondary" style={{ fontSize: 14 }}>
                    גודל מקסימלי: 10MB
                  </Text>
                </div>
              </Dragger>

              {file && !uploading && (
                <Card
                  size="small"
                  style={{
                    marginBottom: 24,
                    background: "linear-gradient(145deg, #f0f9ff, #ffffff)",
                    border: "1px solid #e6f4ff",
                    borderRadius: 12,
                  }}
                >
                  <Row align="middle" gutter={[16, 16]}>
                    <Col flex="auto">
                      <Space>
                        {getFileIcon(file.name)}
                        <div>
                          <Text strong>{file.name}</Text>
                          <br />
                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {formatFileSize(file.size)}
                          </Text>
                        </div>
                      </Space>
                    </Col>
                    <Col>
                      <Space>
                        <Button type="text" icon={<EyeOutlined />} size="small" style={{ color: "#1890ff" }}>
                          תצוגה מקדימה
                        </Button>
                        <Button
                          type="text"
                          icon={<DeleteOutlined />}
                          size="small"
                          danger
                          onClick={() => {
                            setFile(null)
                            setMessage(null)
                            setError(null)
                            setUploadComplete(false)
                          }}
                        >
                          הסר
                        </Button>
                      </Space>
                    </Col>
                  </Row>
                </Card>
              )}
            </Col>

            <Col xs={24} lg={8}>
              <Card title="פעולות מהירות" size="small" style={{ marginBottom: 24 }}>
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Button
                    type="primary"
                    size="large"
                    disabled={!file || uploading}
                    loading={uploading}
                    icon={uploadComplete ? <CheckCircleOutlined /> : <CloudUploadOutlined />}
                    onClick={handleSubmit}
                    block
                    style={{
                      height: 48,
                      fontWeight: 600,
                      fontSize: 16,
                      background: uploadComplete ? "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)" : undefined,
                    }}
                  >
                    {uploading ? "מעלה..." : uploadComplete ? "הועלה בהצלחה!" : "העלה קובץ"}
                  </Button>

                  {uploadComplete && (
                    <Button
                      type="default"
                      size="large"
                      icon={<DownloadOutlined />}
                      block
                      style={{
                        height: 40,
                        fontWeight: 600,
                        borderWidth: 2,
                      }}
                    >
                      הורד קובץ
                    </Button>
                  )}
                </Space>
              </Card>

              <Card title="מידע שימושי" size="small">
                <Space direction="vertical" style={{ width: "100%" }}>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>העלאה מאובטחת</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>ניתוח נתונים לעסק עם AI</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>עדכון נתונים</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>גיבוי אוטומטי</Text>
                  </div>
                </Space>
              </Card>
            </Col>
          </Row>

          {message && (
            <Alert
              message="הצלחה!"
              description={
                <Space direction="vertical">
                  <Text>{message}</Text>
                  <Text type="secondary">הקובץ נשמר בבטחה במערכת</Text>
                </Space>
              }
              type="success"
              showIcon
              icon={<CheckCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #b7eb8f",
                background: "linear-gradient(145deg, #f6ffed, #ffffff)",
              }}
              action={
                <Button size="small" type="primary" ghost>
                  צפה בקובץ
                </Button>
              }
            />
          )}

          {error && (
            <Alert
              message="שגיאה!"
              description={error}
              type="error"
              showIcon
              icon={<ExclamationCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #ffccc7",
                background: "linear-gradient(145deg, #fff2f0, #ffffff)",
              }}
              action={
                <Button size="small" danger ghost>
                  נסה שוב
                </Button>
              }
            />
          )}
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UploadFiles
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import type { AdminRegister } from "../models/AdminRegister"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, UserOutlined, LoginOutlined, ExclamationCircleOutlined } from "@ant-design/icons"

const { Title, Text, Link } = Typography

const UserLogin = () => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserLogin
  const [userLogin, setUserLogin] = useState<AdminRegister>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(userLogin)
      setErrors([])

      if (valid) {

        try {
          const { data } = await axios.post<any>(`${url}/Auth/user-login`, userLogin, { withCredentials: true })
          globalContextDetails.setUserCount(data.user.businessUsersCount)
          globalContextDetails.setUser(data.user)
          nav("/")
        }
        catch (e) {
          if (axios.isAxiosError(e) && e.response?.status === 400) {
            setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"]);
            return;
          }
          setErrors(e instanceof Error ? [e.message] : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"]);
          return;
        }
      }
      else {
        const validationErrors = await validationSchema.validate(userLogin).catch((err) => err.errors);
        setErrors(validationErrors || []);
      }
    } catch (e) {
      if (axios.isAxiosError(e) && e.response?.status === 400) {
        setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"]);
        return;
      }
      setErrors(e instanceof Error ? [e.message] : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"]);
      return;
    }
    finally {
      setLoading(false)
    }
  }

  const handleChange = (field: string, value: string) => {
    setUserLogin((prev) => ({ ...prev, [field]: value }))
    // Clear errors when user starts typing
    if (errors.length > 0) {
      setErrors([])
    }
  }


  return (
    <ConfigProvider direction="rtl">
      <div style={{ marginTop: "50vh" }}></div>
      <div className="centered-layout">
        <Card className="login-form" style={{ maxWidth: 500, width: "100%" }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              כניסת משתמש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              ברוכים הבאים למערכת ניהול העסק
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item
              label="אימייל"
              required
              style={{ marginBottom: 20 }}
            >
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size="large"
                value={userLogin.email}
                onChange={(e) => handleChange("email", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Form.Item
              label="סיסמא"
              required
              style={{ marginBottom: 24 }}
            >
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size="large"
                value={userLogin.password}
                onChange={(e) => handleChange("password", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              disabled={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: 16,
                marginBottom: 16,
              }}
            >
              {loading ? "מתחבר..." : "התחבר"}
            </Button>

            <Divider>
              <Text type="secondary">או</Text>
            </Divider>

            <Button
              type="default"
              size="large"
              block
              onClick={() => nav("/register-user")}
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                marginBottom: 16,
                borderWidth: 2,
              }}
            >
              הירשם עכשיו
            </Button>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary">מנהל?</Text>
                <Link href="/admin-login" style={{ fontWeight: 600 }}>
                  התחבר כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message="שגיאה בהתחברות"
                    description={error}
                    type="error"
                    showIcon
                    icon={<ExclamationCircleOutlined />}
                    style={{
                      marginBottom: 8,
                      borderRadius: 8,
                      background: "linear-gradient(135deg, #fff2f0 0%, #ffebe8 100%)",
                      border: "1px solid #ffccc7",
                    }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserLogin
"use client"

import type React from "react"
import { useContext, useEffect, useState } from "react"
import {
  Typography,
  Card,
  ConfigProvider,
  Button,
  Table,
  Tag,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
  Modal,
  message,
  Popconfirm,
} from "antd"
import {
  UserOutlined,
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
  TeamOutlined,
  CrownOutlined,
  MailOutlined,
  PhoneOutlined,
  DollarOutlined,
} from "@ant-design/icons"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import type { ColumnsType } from "antd/es/table"
import { globalContext } from "../context/GlobalContext"
import { User } from "../models/User"

const { Title, Text } = Typography
const url = import.meta.env.VITE_API_URL

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  const [modalVisible, setModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext)

  const nav = useNavigate()

  useEffect(() => {
    fetchUsers()
  }, [])

  const fetchUsers = async () => {
    try {
      setLoading(true)
      const { data } = await axios.get<User[]>(`${url}/api/User/users-by-business/${globalContextDetails.business_global.id}`, { withCredentials: true })
      setUsers(data)
    } catch (err) {
      console.error("שגיאה בטעינת משתמשים:", err)
      message.error("שגיאה בטעינת רשימת המשתמשים")
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: number) => {
    try {
      const res = await axios.delete(`${url}/api/User/${id}`, { withCredentials: true })
      if (res.status >= 200 && res.status < 300) {
        globalContextDetails.setUserCount(globalContextDetails.usersCount - 1)
        setUsers((prev) => prev.filter((user) => user.id !== id))
        message.success("המשתמש נמחק בהצלחה")
      }
    } catch (err) {
      console.error("שגיאה במחיקה:", err)
      message.error("שגיאה במחיקת המשתמש")
    }
  }

  const handleEdit = (id: number) => {
    nav(`/edit-user/${id}`)
  }

  const handleViewDetails = (user: User) => {
    setSelectedUser(user)
    setModalVisible(true)
  }

  const columns: ColumnsType<User> = [
    {
      title: "ת.ז",
      dataIndex: "idNumber",
      key: "idNumber",
      width: 80,
      align: "center",
    },
    {
      title: "שם מלא",
      key: "fullName",
      render: (_, record) => {
        let avatarBg = "#1890ff"
        let icon = <UserOutlined />
        if (record.role === 1) {
          avatarBg = "#722ed1"
          icon = <CrownOutlined />
        } else if (record.role === 3) {
          avatarBg = "#faad14" // כתום זהוב למנהל חשבונות
          icon = <DollarOutlined />
        }
        return (
          <Space>
            <Avatar size={32} style={{ background: avatarBg }}>
              {icon}
            </Avatar>
            <div>
              <div style={{ fontWeight: 600 }}>
                {record.firstName} {record.lastName}
              </div>
              <Text type="secondary" style={{ fontSize: 12 }}>
                ת.ז: {record.idNumber}
              </Text>
            </div>
          </Space>
        )
      },
    },
    {
      title: "פרטי קשר",
      key: "contact",
      render: (_, record) => (
        <Space direction="vertical" size="small">
          <Space size="small">
            <MailOutlined style={{ color: "#1890ff" }} />
            <Text>{record.email}</Text>
          </Space>
          <Space size="small">
            <PhoneOutlined style={{ color: "#52c41a" }} />
            <Text>{record.phone}</Text>
          </Space>
        </Space>
      ),
    },
    {
      title: "תפקיד",
      dataIndex: "role",
      key: "role",
      align: "center",
      render: (role: number) => {
        if (role === 1)
          return (
            <Tag color="purple" icon={<CrownOutlined />}>
              מנהל
            </Tag>
          )
        if (role === 2)
          return (
            <Tag color="blue" icon={<UserOutlined />}>
              משתמש רגיל
            </Tag>
          )
        if (role === 3)
          return (
            <Tag color="orange" icon={<DollarOutlined />}>
              מנהל חשבונות
            </Tag>
          )
        return <Tag>לא ידוע</Tag>
      },
    },
    {
      title: "סטטוס",
      dataIndex: "status",
      key: "status",
      align: "center",
      render: (status: string) => (
        <Tag color={status === "active" ? "success" : "default"}>{status === "active" ? "פעיל" : "לא פעיל"}</Tag>
      ),
    },
    {
      title: "כניסה אחרונה",
      dataIndex: "lastLogin",
      key: "lastLogin",
      render: (date: Date) => <Text type="secondary">{new Date(date).toLocaleDateString("he-IL")}</Text>,
    },
    {
      title: "פעולות",
      key: "actions",
      align: "center",
      render: (_, record) => (
        <Space>
          <Button
            type="text"
            icon={<UserOutlined />}
            onClick={() => handleViewDetails(record)}
            style={{ color: "#1890ff" }}
          >
            צפה
          </Button>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record.id)}
            style={{ color: "#fa8c16" }}
          >
            ערוך
          </Button>
          <Popconfirm
            title="מחיקת משתמש"
            description="האם אתה בטוח שברצונך למחוק את המשתמש?"
            onConfirm={() => handleDelete(record.id)}
            okText="כן"
            cancelText="לא"
          >
            <Button type="text" icon={<DeleteOutlined />} danger>
              מחק
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div style={{ marginTop: "50vh" }}></div>

      <div style={{ padding: "40px 20px", maxWidth: 1400, margin: "0 auto" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <TeamOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              ניהול משתמשים
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה, הוסף, ערוך או מחק משתמשים במערכת
            </Text>

            <Divider />
          </div>

          <Row justify="space-between" align="middle" style={{ marginBottom: 24 }}>
            <Col>
              <Space>
                <Text strong style={{ fontSize: 16 }}>
                  סה״כ משתמשים: {users.length}
                </Text>
                <Tag color="purple">מנהלים: {users.filter((u) => u.role === 1).length}</Tag>
                <Tag color="blue">משתמשים: {users.filter((u) => u.role === 2).length}</Tag>
                <Tag color="orange">מנהלי חשבונות: {users.filter((u) => u.role === 3).length}</Tag>
              </Space>
            </Col>
            <Col>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                size="large"
                onClick={() => nav("/register-user")}
                style={{
                  height: 48,
                  padding: "0 24px",
                  fontWeight: 600,
                }}
              >
                הוסף משתמש חדש
              </Button>
            </Col>
          </Row>

          <Card style={{ borderRadius: 12, overflow: "hidden" }}>
            <Table
              columns={columns}
              dataSource={users}
              rowKey="id"
              loading={loading}
              pagination={{
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) => `${range[0]}-${range[1]} מתוך ${total} משתמשים`,
              }}
              scroll={{ x: 800 }}
              style={{ direction: "rtl" }}
            />
          </Card>

          <Modal
            title={
              <Space>
                <UserOutlined />
                <span>פרטי משתמש</span>
              </Space>
            }
            open={modalVisible}
            onCancel={() => setModalVisible(false)}
            footer={[
              <Button key="close" onClick={() => setModalVisible(false)}>
                סגור
              </Button>,
              <Button
                key="edit"
                type="primary"
                icon={<EditOutlined />}
                onClick={() => {
                  if (selectedUser) {
                    handleEdit(selectedUser.id)
                    setModalVisible(false)
                  }
                }}
              >
                ערוך משתמש
              </Button>,
            ]}
            width={600}
          >
            {selectedUser && (
              <div style={{ padding: "16px 0" }}>
                <Row gutter={[16, 16]}>
                  <Col span={24}>
                    <div style={{ textAlign: "center", marginBottom: 24 }}>
                      <Avatar
                        size={64}
                        style={{
                          background:
                            selectedUser.role === 1
                              ? "#722ed1"
                              : selectedUser.role === 3
                              ? "#faad14"
                              : "#1890ff",
                          marginBottom: 8,
                        }}
                      >
                        {selectedUser.role === 1 ? (
                          <CrownOutlined />
                        ) : selectedUser.role === 3 ? (
                          <DollarOutlined />
                        ) : (
                          <UserOutlined />
                        )}
                      </Avatar>
                      <div>
                        <Title level={4} style={{ margin: 0 }}>
                          {selectedUser.firstName} {selectedUser.lastName}
                        </Title>
                        <Tag
                          color={
                            selectedUser.role === 1
                              ? "purple"
                              : selectedUser.role === 3
                              ? "orange"
                              : "blue"
                          }
                          style={{ marginTop: 8 }}
                        >
                          {selectedUser.role === 1
                            ? "מנהל"
                            : selectedUser.role === 3
                            ? "מנהל חשבונות"
                            : "משתמש רגיל"}
                        </Tag>
                      </div>
                    </div>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>אימייל:</Text>
                      <Text>{selectedUser.email}</Text>
                    </Space>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>טלפון:</Text>
                      <Text>{selectedUser.phone}</Text>
                    </Space>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>תעודת זהות:</Text>
                      <Text>{selectedUser.idNumber}</Text>
                    </Space>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>סטטוס:</Text>
                      <Tag color={selectedUser.status === "active" ? "success" : "default"}>
                        {selectedUser.status === "active" ? "פעיל" : "לא פעיל"}
                      </Tag>
                    </Space>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>כניסה אחרונה:</Text>
                      <Text>{new Date(selectedUser.lastLogin).toLocaleDateString("he-IL")}</Text>
                    </Space>
                  </Col>
                  <Col span={12}>
                    <Space direction="vertical" size="small">
                      <Text strong>תאריך הצטרפות:</Text>
                      <Text>{new Date(selectedUser.createdAt).toLocaleDateString("he-IL")}</Text>
                    </Space>
                  </Col>
                </Row>
              </div>
            )}
          </Modal>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserManagement
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  TeamOutlined,
  UserAddOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"
import { globalContext } from "../context/GlobalContext"

const { Title, Text, Link } = Typography

const UserRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const [myUser, setMyUser] = useState<UserPostModel>({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    phone: "",
    role: 2,
    idNumber: "",
  })

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      await validationSchema.validate(myUser, { abortEarly: false });
      setErrors([])

      try {
        await axios.post<UserPostModel>(`${url}/Auth/user-register`, myUser, { withCredentials: true })
        globalContextDetails.setUserCount(globalContextDetails.usersCount + 1)
        if (onSubmitSuccess) onSubmitSuccess()
        nav(-1)
      } catch (e) {
        setErrors(["שגיאה ברישום המשתמש"])
      }

    } catch (e) {
      if (e instanceof Error && 'inner' in e) {
        const validationErrors = (e as any).inner.map((err: any) => err.message)
        setErrors(validationErrors)
      } else {
        setErrors(["שגיאה ברישום המשתמש, נא לנסות שוב מאוחר יותר"])
      }
    }

    finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto", marginTop: "70vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserAddOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              הרשמת משתמש חדש
            </Title>
            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא" required>
                  <Input.Password
                    prefix={<LockOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    prefix={<TeamOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<UserAddOutlined />}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  הירשם
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav("/user-login")}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    borderWidth: 2,
                  }}
                >
                  חזרה לכניסה
                </Button>
              </Col>
            </Row>

            <div style={{ textAlign: "center", marginTop: 24 }}>
              <Text type="secondary">
                כבר יש לך חשבון?{" "}
                <Link href="/user-login" style={{ fontWeight: 600 }}>
                  התחבר כאן
                </Link>
              </Text>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserRegister
