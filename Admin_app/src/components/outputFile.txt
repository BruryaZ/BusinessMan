//Brurya
"use client"

import { useState } from "react"
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom"
import { Layout, Menu, Button, Typography, Avatar, Space, Drawer, ConfigProvider, theme as antTheme } from "antd"
import {
  MenuOutlined,
  UserAddOutlined,
  LoginOutlined,
  CrownOutlined,
  UploadOutlined,
  EyeOutlined,
  TeamOutlined,
  BarChartOutlined,
  DollarOutlined,
  ShopOutlined,
  BankOutlined,
  DashboardOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
} from "@ant-design/icons"
import { useMediaQuery } from "react-responsive"
import "./app.css"
import AdminLogin from "./components/AdminLogin"
import BusinessAndAdmin from "./components/BusinessAndAdmin"
import DataViewing from "./components/DataViweing"
import IncomAndExpennses from "./components/Incom&Expennses"
import ProductionReports from "./components/ProductionReports"
import RegisterBusinessData from "./components/RegisterBusinessData"
import UploadFiles from "./components/UploadFiles"
import UserLogin from "./components/UserLogin"
import UserManagemet from "./components/UserManagemet"
import UserRegister from "./components/UserRegister"
import GlobalContext from "./context/GlobalContext"
import AdminRoute from "./components/AdminRoute"
import { Home } from "@mui/icons-material"
import MyHome from "./components/MyHome"
import EditUserPage from "./components/EditUserPage"

// Components


const { Header, Sider, Content } = Layout
const { Title } = Typography

// Navigation items with icons
const navItems = [
  { key: "/", label: "בית", icon: <Home />, path: "/" },
  { key: "/register-user", label: "רישום משתמש", icon: <UserAddOutlined />, path: "/register-user" },
  { key: "/user-login", label: "כניסת משתמש", icon: <LoginOutlined />, path: "/user-login" },
  { key: "/admin-login", label: "כניסת מנהל", icon: <CrownOutlined />, path: "/admin-login" },
  { key: "/upload-file", label: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
  { key: "/view-data", label: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
  { key: "/user-management", label: "ניהול משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  { key: "/production-reports", label: 'דו"ח ייצור', icon: <BarChartOutlined />, path: "/production-reports" },
  { key: "/incom&Expennses", label: "ניהול הוצאות והכנסות", icon: <DollarOutlined />, path: "/incom&Expennses" },
  { key: "/business-register", label: "רישום עסק חדש", icon: <ShopOutlined />, path: "/business-register" },
  {
    key: "/register-admin&business",
    label: "רישום עסק ומנהל חדש",
    icon: <BankOutlined />,
    path: "/register-admin&business",
  },
]

// Responsive drawer component
function ResponsiveDrawer() {
  const [collapsed, setCollapsed] = useState(false)
  const [mobileOpen, setMobileOpen] = useState(false)
  const location = useLocation()
  const isMobile = useMediaQuery({ maxWidth: 768 })
  const isSmallScreen = useMediaQuery({ maxWidth: 1024 })

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen)
  }

  const handleCollapse = () => {
    setCollapsed(!collapsed)
  }

  const menuItems = navItems.map((item) => ({
    key: item.key,
    icon: item.icon,
    label: <Link to={item.path}>{item.label}</Link>,
  }))

  const siderContent = (
    <div style={{ height: "100%", display: "flex", flexDirection: "column", direction: "rtl", width: "100%" }}>
      <div
        className="logo-section"
        style={{
          padding: "24px 16px",
          borderBottom: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column",
        }}
      >
        <Avatar
          size={collapsed ? 32 : 48}
          className="logo-avatar"
          style={{
            background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            marginBottom: collapsed ? 0 : 8,
          }}
        >
          <DashboardOutlined />
        </Avatar>
        {!collapsed && (
          <Title level={4} className="logo-title" style={{ margin: "8px 0 0 0", color: "#667eea" }}>
            BusinessMan
          </Title>
        )}
      </div>

      <Menu
        mode="inline"
        selectedKeys={[location.pathname]}
        className="sidebar-menu"
        style={{
          border: "none",
          flex: 1,
          padding: "8px",
          direction: "rtl",
        }}
        items={menuItems}
        onClick={() => isMobile && setMobileOpen(false)}
      />

      <div
        style={{
          padding: "16px",
          borderTop: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
        }}
      >
        <Typography.Text type="secondary" style={{ fontSize: "12px" }}>
          © 2025 BusinessMan
        </Typography.Text>
      </div>
    </div>
  )

  return (
    <ConfigProvider
      direction="rtl"
      theme={{
        algorithm: antTheme.defaultAlgorithm,
        token: {
          colorPrimary: "#667eea",
          borderRadius: 10,
          fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
        },
      }}
    >
      <Layout style={{ minHeight: "100vh", width: "100%", direction: "rtl" }}>
        {/* Desktop Sider */}
        {!isMobile && (
          <Sider
            trigger={null}
            collapsible
            collapsed={collapsed}
            width={280}
            collapsedWidth={80}
            className="desktop-sider"
            style={{
              background: "#fff",
              position: "fixed",
              height: "100vh",
              right: 0,
              top: 0,
              zIndex: 1001,
              boxShadow: "-2px 0 8px rgba(0, 0, 0, 0.05)",
            }}
          >
            {siderContent}
          </Sider>
        )}

        {/* Mobile Drawer */}
        {isMobile && (
          <Drawer
            title={
              <Space style={{ direction: "rtl" }}>
                <Avatar style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                  <DashboardOutlined />
                </Avatar>
                <span>BusinessMan</span>
              </Space>
            }
            placement="right"
            onClose={handleDrawerToggle}
            open={mobileOpen}
            width={280}
            className="mobile-drawer"
            style={{ padding: 0, direction: "rtl" }}
          >
            <Menu
              mode="inline"
              selectedKeys={[location.pathname]}
              style={{ border: "none", direction: "rtl" }}
              items={menuItems}
              onClick={handleDrawerToggle}
            />
          </Drawer>
        )}

        <Layout
          className={`main-layout ${collapsed ? "collapsed" : ""}`}
          style={{
            marginRight: isMobile ? 0 : collapsed ? 80 : 280,
            width: isMobile ? "100%" : collapsed ? "calc(100% - 80px)" : "calc(100% - 280px)",
            minHeight: "100vh",
            direction: "rtl",
          }}
        >
          <Header
            className="main-header"
            style={{
              background: "#fff",
              padding: "0 24px",
              boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              position: "sticky",
              top: 0,
              zIndex: 100,
              width: "100%",
              direction: "rtl",
              height: "64px",
            }}
          >
            <Space style={{ direction: "rtl" }}>
              <Button
                type="text"
                className="menu-toggle-btn"
                icon={isMobile ? <MenuOutlined /> : collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
                onClick={isMobile ? handleDrawerToggle : handleCollapse}
                style={{ fontSize: "16px" }}
              />
              <Space style={{ direction: "rtl" }}>
                <DashboardOutlined className="header-icon" style={{ color: "#667eea", fontSize: "20px" }} />
                <Title level={4} className="header-title" style={{ margin: 0, color: "#2d3748" }}>
                  מערכת ניהול עסקים
                </Title>
              </Space>
            </Space>

            {!isSmallScreen && (
              <Space className="header-nav" style={{ direction: "rtl" }}>
                {navItems.slice(0, 4).map((item) => (
                  <Button
                    key={item.key}
                    type={location.pathname === item.path ? "primary" : "text"}
                    icon={item.icon}
                    className="nav-btn"
                    style={{
                      borderRadius: "8px",
                      fontWeight: location.pathname === item.path ? 600 : 400,
                    }}
                  >
                    <Link to={item.path}>{item.label}</Link>
                  </Button>
                ))}
              </Space>
            )}
          </Header>

          <Content
            className="main-content"
            style={{
              padding: "0",
              background: "transparent",
              minHeight: "calc(100vh - 64px)",
              width: "100%",
              overflow: "auto",
              direction: "rtl",
            }}
          >
            <div
              className="content-wrapper"
              style={{
                paddingTop: "40px",
                minHeight: "calc(100vh - 104px)",
                padding: "40px 24px 24px 24px",
              }}
            >
              <Routes>
                <Route path="/" element={<MyHome />} />
                <Route path="/register-user" element={<UserRegister />} />
                <Route path="/user-login" element={<UserLogin />} />
                <Route path="/admin-login" element={<AdminLogin />} />
                <Route path="/upload-file" element={<UploadFiles />} />
                <Route path="/register-admin&business" element={<BusinessAndAdmin />} />
                <Route path="/edit-user/:id" element={<EditUserPage />} />

                <Route
                  path="/production-reports"
                  element={
                    <AdminRoute>
                      <ProductionReports />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/view-data"
                  element={
                    <AdminRoute>
                      <DataViewing />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/user-management"
                  element={
                    <AdminRoute>
                      <UserManagemet />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/business-register"
                  element={
                    <AdminRoute>
                      <RegisterBusinessData />
                    </AdminRoute>
                  }
                />
                <Route
                  path="/incom&Expennses"
                  element={
                    <AdminRoute>
                      <IncomAndExpennses />
                    </AdminRoute>
                  }
                />
              </Routes>
            </div>
          </Content>
        </Layout>
      </Layout>
    </ConfigProvider>
  )
}

function App() {
  return (
    <div style={{ width: "100%", minHeight: "100vh", direction: "rtl" }}>
      <GlobalContext>
        <Router>
          <ResponsiveDrawer />
        </Router>
      </GlobalContext>
    </div>
  )
}

export default App
APP.CSS
/* Import Hebrew fonts */
@import url("https://fonts.googleapis.com/css2?family=Assistant:wght@300;400;500;600;700&family=Heebo:wght@300;400;500;600;700&family=Rubik:wght@300;400;500;600;700&display=swap");

* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  direction: rtl;
  font-family: "Assistant", "Rubik", "Heebo", sans-serif;
  background: linear-gradient(135deg, #f5f7ff 0%, #ffffff 100%);
  overflow-x: hidden;
}

::selection {
  background-color: #8581d4;
  color: white;
}

#root {
  width: 100%;
  min-height: 100vh;
}

a {
  text-decoration: none;
  color: inherit;
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(50px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }

  50% {
    opacity: 1;
    transform: scale(1.05);
  }

  70% {
    transform: scale(0.9);
  }

  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.05);
  }

  100% {
    transform: scale(1);
  }
}

@keyframes float {

  0%,
  100% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-10px);
  }
}

@keyframes glow {

  0%,
  100% {
    box-shadow: 0 0 5px rgba(102, 126, 234, 0.5);
  }

  50% {
    box-shadow: 0 0 20px rgba(102, 126, 234, 0.8), 0 0 30px rgba(102, 126, 234, 0.6);
  }
}

@keyframes shimmer {
  0% {
    background-position: -200px 0;
  }

  100% {
    background-position: calc(200px + 100%) 0;
  }
}

@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-200deg);
  }

  to {
    opacity: 1;
    transform: rotate(0deg);
  }
}

/* Component Animations */
.logo-section {
  animation: slideInRight 0.8s ease-out;
}

.logo-avatar {
  animation: bounceIn 1s ease-out 0.3s both;
}

.logo-title {
  animation: fadeInUp 0.8s ease-out 0.5s both;
}

.sidebar-menu {
  animation: slideInRight 0.8s ease-out 0.2s both;
}

.sidebar-menu .ant-menu-item {
  animation: fadeInUp 0.6s ease-out both;
  animation-delay: calc(var(--item-index, 0) * 0.1s);
}

.main-header {
  animation: slideInLeft 0.8s ease-out;
}

.header-icon {
  animation: rotateIn 1s ease-out 0.5s both;
}

.header-title {
  animation: fadeInUp 0.8s ease-out 0.3s both;
}

.nav-btn {
  animation: fadeInUp 0.6s ease-out both;
  animation-delay: calc(var(--btn-index, 0) * 0.1s);
  transition: all 0.3s ease;
}

.nav-btn:hover {
  transform: translateY(-2px);
  animation: pulse 0.6s ease-in-out infinite;
}

.menu-toggle-btn {
  transition: all 0.3s ease;
}

.menu-toggle-btn:hover {
  animation: pulse 0.6s ease-in-out;
}

.desktop-sider {
  animation: slideInRight 1s ease-out;
}

.mobile-drawer .ant-drawer-content {
  animation: slideInRight 0.5s ease-out;
}

.main-content {
  animation: fadeInUp 0.8s ease-out 0.3s both;
}

.content-wrapper {
  animation: fadeInUp 1s ease-out 0.5s both;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 4px;
  animation: glow 2s ease-in-out infinite alternate;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}

html:lang(he),
body:lang(he) {
  direction: rtl;
  text-align: right;
}

.ltr {
  direction: ltr !important;
}

.rtl {
  direction: rtl !important;
}

/* Ant Design Layout Fixes for RTL */
.ant-layout {
  min-height: 100vh !important;
  width: 100% !important;
  direction: rtl !important;
}

.ant-layout-content {
  width: 100% !important;
  margin: 0 !important;
  background: transparent !important;
  direction: rtl !important;
}

/* RTL Sider positioning */
.ant-layout-sider {
  box-shadow: -2px 0 8px rgba(0, 0, 0, 0.05) !important;
  position: fixed !important;
  height: 100vh !important;
  right: 0 !important;
  top: 0 !important;
  z-index: 1001 !important;
  background: #fff !important;
}

/* Content area adjustments for RTL */
.main-layout {
  margin-right: 280px !important;
  width: calc(100% - 280px) !important;
  transition: all 0.3s ease !important;
  min-height: 100vh !important;
}

.main-layout.collapsed {
  margin-right: 80px !important;
  width: calc(100% - 80px) !important;
}

/* Mobile responsive */
@media (max-width: 768px) {

  .main-layout,
  .main-layout.collapsed {
    margin-right: 0 !important;
    width: 100% !important;
  }

  .ant-layout-sider {
    transform: translateX(100%) !important;
  }
}

/* Drawer RTL fix */
.ant-drawer-content-wrapper {
  right: 0 !important;
  left: auto !important;
}

.ant-drawer-body {
  padding: 0 !important;
  direction: rtl !important;
}

/* Menu RTL fixes */
.ant-menu {
  direction: rtl !important;
}

.ant-menu-item {
  border-radius: 8px !important;
  margin: 4px 8px !important;
  text-align: right !important;
  transition: all 0.3s ease !important;
}

.ant-menu-item:hover {
  transform: translateX(-5px) !important;
  animation: glow 0.6s ease-in-out !important;
}

.ant-menu-item-selected {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  color: white !important;
  animation: shimmer 2s ease-in-out infinite !important;
  background-size: 200px 100% !important;
  background-image: linear-gradient(90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.2) 20%,
      rgba(255, 255, 255, 0.5) 60%,
      rgba(255, 255, 255, 0)) !important;
}

.ant-menu-item-selected .anticon {
  color: white !important;
}

.ant-menu-item .ant-menu-title-content {
  margin-right: 12px !important;
  margin-left: 0 !important;
}

/* Card and component fixes */
.ant-card {
  border-radius: 16px !important;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08) !important;
  transition: all 0.3s ease !important;
  width: 100% !important;
  direction: rtl !important;
  animation: fadeInUp 0.8s ease-out both !important;
}

.ant-card:hover {
  transform: translateY(-8px) !important;
  box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15) !important;
  animation: float 3s ease-in-out infinite !important;
}

.ant-card-body {
  direction: rtl !important;
  text-align: right !important;
}

/* Button fixes */
.ant-btn {
  border-radius: 10px !important;
  font-weight: 600 !important;
  height: auto !important;
  padding: 10px 20px !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  direction: rtl !important;
  transition: all 0.3s ease !important;
}

.ant-btn:hover {
  transform: translateY(-2px) !important;
  animation: pulse 0.6s ease-in-out !important;
}

.ant-btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  border: none !important;
  box-shadow: 0 4px 14px rgba(102, 126, 234, 0.4) !important;
}

.ant-btn-primary:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%) !important;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6) !important;
  animation: glow 0.6s ease-in-out !important;
}

/* Input and form fixes */
.ant-input {
  border-radius: 10px !important;
  padding: 12px 16px !important;
  border: 2px solid #e1e5e9 !important;
  transition: all 0.3s ease !important;
  direction: rtl !important;
  text-align: right !important;
}

.ant-input:focus {
  border-color: #667eea !important;
  box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2) !important;
  animation: glow 0.6s ease-in-out !important;
}

.ant-form-item-label>label {
  font-weight: 600 !important;
  color: #2d3748 !important;
  text-align: right !important;
}

.ant-form-item {
  direction: rtl !important;
  animation: fadeInUp 0.6s ease-out both !important;
  animation-delay: calc(var(--form-item-index, 0) * 0.1s) !important;
}

.ant-input-number {
  width: 100% !important;
  direction: rtl !important;
}

.ant-input-number-input {
  text-align: right !important;
}

/* Container and layout utilities */
.page-container {
  width: 100% !important;
  max-width: 100% !important;
  padding: 0 !important;
  margin: 0 !important;
  direction: rtl !important;
}

.content-wrapper {
  width: 100% !important;
  max-width: 1200px !important;
  margin: 0 auto !important;
  padding: 40px 24px 24px 24px !important;
  direction: rtl !important;
  min-height: calc(100vh - 104px) !important;
}

@media (max-width: 768px) {
  .content-wrapper {
    padding: 32px 16px 16px 16px !important;
  }
}

/* Component specific styles */
.hero-section {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 60px 24px;
  border-radius: 20px;
  margin-bottom: 40px;
  position: relative;
  overflow: hidden;
  width: 100%;
  direction: rtl;
  animation: fadeInUp 1s ease-out both;
}

.hero-section::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  animation: shimmer 3s ease-in-out infinite;
}

@media (max-width: 768px) {
  .hero-section {
    padding: 40px 20px;
    margin: 0 0 40px 0;
    border-radius: 16px;
  }
}

.stats-card {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.8s ease-out both;
}

.stats-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
  animation: float 2s ease-in-out infinite;
}

.feature-card {
  background: white;
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  height: 100%;
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.8s ease-out both;
}

@media (max-width: 768px) {
  .feature-card {
    padding: 24px;
  }
}

.feature-card:hover {
  transform: translateY(-12px) rotate(1deg);
  box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);
  animation: float 2.5s ease-in-out infinite;
}

.icon-wrapper {
  width: 64px;
  height: 64px;
  border-radius: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-size: 24px;
  animation: bounceIn 1s ease-out both;
}

.icon-wrapper:hover {
  animation: pulse 1s ease-in-out infinite;
}

.testimonial-section {
  background: rgba(102, 126, 234, 0.03);
  border: 1px solid rgba(102, 126, 234, 0.1);
  border-radius: 16px;
  padding: 32px;
  margin-top: 40px;
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 1s ease-out both;
}

@media (max-width: 768px) {
  .testimonial-section {
    padding: 24px;
  }
}

.financial-summary-card {
  border-radius: 16px;
  padding: 24px;
  height: 100%;
  transition: all 0.3s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.8s ease-out both;
}

.financial-summary-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);
  animation: float 2s ease-in-out infinite;
}

.income-card {
  background: rgba(16, 185, 129, 0.1);
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.expense-card {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

.centered-layout {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: calc(100vh - 104px);
  padding: 20px;
  width: 100%;
  direction: rtl;
  animation: fadeInUp 0.8s ease-out both;
}

.login-form {
  background: linear-gradient(145deg, #ffffff, #f8fafc);
  border: 1px solid rgba(0, 0, 0, 0.05);
  border-radius: 20px;
  padding: 40px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
  width: 100%;
  max-width: 500px;
  direction: rtl;
  text-align: right;
  animation: bounceIn 1s ease-out both;
}

@media (max-width: 768px) {
  .login-form {
    padding: 24px;
    margin: 0;
    border-radius: 16px;
  }
}

.form-section {
  background: white;
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
  direction: rtl;
  text-align: right;
  animation: fadeInUp 0.8s ease-out both;
}

@media (max-width: 768px) {
  .form-section {
    padding: 20px;
    margin: 0;
  }
}

/* Grid fixes for RTL */
.ant-row {
  width: 100% !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  direction: rtl !important;
}

.ant-col {
  padding-left: 12px !important;
  padding-right: 12px !important;
  direction: rtl !important;
  animation: fadeInUp 0.6s ease-out both !important;
  animation-delay: calc(var(--col-index, 0) * 0.1s) !important;
}

@media (max-width: 768px) {
  .ant-col {
    padding-left: 8px !important;
    padding-right: 8px !important;
  }
}

/* Table responsive */
.ant-table-wrapper {
  width: 100% !important;
  overflow-x: auto !important;
  direction: rtl !important;
  animation: fadeInUp 0.8s ease-out both !important;
}

.ant-table {
  min-width: 800px !important;
  direction: rtl !important;
}

.ant-table-thead>tr>th {
  text-align: right !important;
}

.ant-table-tbody>tr>td {
  text-align: right !important;
}

.ant-table-tbody>tr {
  transition: all 0.3s ease !important;
}

.ant-table-tbody>tr:hover {
  transform: scale(1.01) !important;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
}

@media (max-width: 768px) {
  .ant-table {
    min-width: 600px !important;
  }
}

/* Typography RTL */
.ant-typography {
  direction: rtl !important;
  text-align: center;
}

/* Space component RTL */
.ant-space {
  direction: rtl !important;
}

/* Upload component RTL */
.ant-upload-drag {
  direction: rtl !important;
  text-align: center !important;
  transition: all 0.3s ease !important;
}

.ant-upload-drag:hover {
  animation: pulse 0.6s ease-in-out !important;
}

/* Progress RTL */
.ant-progress {
  direction: rtl !important;
}

.ant-progress-line-path {
  animation: shimmer 2s ease-in-out infinite !important;
}

/* Alert RTL */
.ant-alert {
  direction: rtl !important;
  text-align: right !important;
  animation: fadeInUp 0.6s ease-out both !important;
}

/* Statistic RTL */
.ant-statistic {
  direction: rtl !important;
  text-align: right !important;
}

.ant-statistic-content {
  direction: rtl !important;
  text-align: right !important;
}

.ant-statistic-content-value {
  animation: bounceIn 1s ease-out both !important;
}

/* Loading animations */
.ant-spin {
  animation: rotateIn 1s ease-out both !important;
}

/* Drawer animations */
.ant-drawer-mask {
  animation: fadeInUp 0.3s ease-out !important;
}

.ant-drawer-content {
  animation: slideInRight 0.5s ease-out !important;
}

/* Menu item index animations */
.ant-menu-item:nth-child(1) {
  --item-index: 1;
}

.ant-menu-item:nth-child(2) {
  --item-index: 2;
}

.ant-menu-item:nth-child(3) {
  --item-index: 3;
}

.ant-menu-item:nth-child(4) {
  --item-index: 4;
}

.ant-menu-item:nth-child(5) {
  --item-index: 5;
}

.ant-menu-item:nth-child(6) {
  --item-index: 6;
}

.ant-menu-item:nth-child(7) {
  --item-index: 7;
}

.ant-menu-item:nth-child(8) {
  --item-index: 8;
}

.ant-menu-item:nth-child(9) {
  --item-index: 9;
}

.ant-menu-item:nth-child(10) {
  --item-index: 10;
}

/* Nav button index animations */
.nav-btn:nth-child(1) {
  --btn-index: 1;
}

.nav-btn:nth-child(2) {
  --btn-index: 2;
}

.nav-btn:nth-child(3) {
  --btn-index: 3;
}

.nav-btn:nth-child(4) {
  --btn-index: 4;
}

/* Form item index animations */
.ant-form-item:nth-child(1) {
  --form-item-index: 1;
}

.ant-form-item:nth-child(2) {
  --form-item-index: 2;
}

.ant-form-item:nth-child(3) {
  --form-item-index: 3;
}

.ant-form-item:nth-child(4) {
  --form-item-index: 4;
}

.ant-form-item:nth-child(5) {
  --form-item-index: 5;
}

.ant-form-item:nth-child(6) {
  --form-item-index: 6;
}

/* Col index animations */
.ant-col:nth-child(1) {
  --col-index: 1;
}

.ant-col:nth-child(2) {
  --col-index: 2;
}

.ant-col:nth-child(3) {
  --col-index: 3;
}

.ant-col:nth-child(4) {
  --col-index: 4;
}

.ant-col:nth-child(5) {
  --col-index: 5;
}

.ant-col:nth-child(6) {
  --col-index: 6;
}

/* Special upload animations */
.upload-container {
  animation: fadeInUp 0.8s ease-out both;
}

.upload-dragger {
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.upload-dragger::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, transparent, rgba(102, 126, 234, 0.1), transparent);
  animation: shimmer 3s ease-in-out infinite;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.upload-dragger:hover::before {
  opacity: 1;
}

.upload-dragger:hover {
  transform: scale(1.02);
  border-color: #667eea !important;
  animation: glow 1s ease-in-out infinite alternate;
}

/* Business data display animations */
.business-data-container {
  animation: fadeInUp 0.8s ease-out both;
}

.business-metric {
  animation: fadeInUp 0.6s ease-out both;
  animation-delay: calc(var(--metric-index, 0) * 0.1s);
  transition: all 0.3s ease;
}

.business-metric:hover {
  transform: translateY(-5px) scale(1.02);
  animation: float 2s ease-in-out infinite;
}

.edit-mode {
  animation: bounceIn 0.6s ease-out both;
}

/* Responsive animations */
@media (max-width: 768px) {
  .hero-section::before {
    animation-duration: 2s;
  }

  .stats-card:hover {
    transform: translateY(-4px) scale(1.01);
  }

  .feature-card:hover {
    transform: translateY(-6px);
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
"use client"
import { useContext, useState } from "react"
import type { Admin } from "../models/Admin"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, CrownOutlined, LoginOutlined } from "@ant-design/icons"
import CenteredLayout from "./CenteredLayout"

const { Title, Text, Link } = Typography

const AdminLogin = () => {
  const nav = useNavigate()
  const [admin, setAdmin] = useState<Admin>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const validationSchema = validationSchemaAdminLogin
  const globalContextDetails = useContext(globalContext)

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(admin)
      setErrors([])

      if (valid) {
        const { data } = await axios.post<any>(`${url}/Auth/admin-login`, admin, { withCredentials: true })
        globalContextDetails.setUser(data.user)
        globalContextDetails.setIsAdmin(true)

        try {
          const res = await axios.get<any>(`${url}/api/Business/${data.user.businessId}`, { withCredentials: true })
          globalContextDetails.setBusinessGlobal(res.data)
        }
        catch (e) {
          console.error("Error setting business global:", e)
        }
        nav("/")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      console.log(e)
      setErrors(["שם משתמש או סיסמה שגויים"])
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (field: string, value: string) => {
    setAdmin((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <ConfigProvider direction="rtl" >
      <div style={{ marginTop: "35vh" }}></div>
      <CenteredLayout>
        <Card className="login-form" style={{ maxWidth: 500, width: "100%" }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <CrownOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              כניסת מנהל
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              ברוכים הבאים למערכת הניהול
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item label="אימייל" required style={{ marginBottom: 20 }}>
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size="large"
                value={admin.email}
                onChange={(e) => handleChange("email", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Form.Item label="סיסמא" required style={{ marginBottom: 24 }}>
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size="large"
                value={admin.password}
                onChange={(e) => handleChange("password", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: 16,
                marginBottom: 16,
              }}
            >
              התחבר
            </Button>

            <Divider>
              <Text type="secondary">או</Text>
            </Divider>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary">אין לך חשבון?</Text>
                <Link href="/register-admin&business" style={{ fontWeight: 600 }}>
                  הירשם כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </CenteredLayout>
    </ConfigProvider>
  )
}

export default AdminLogin
"use client"

import type React from "react"

import { useContext, useState } from "react"
import * as Yup from "yup"
import axios from "axios"
import type { UserPostModel } from "../models/UserPostModel"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import type { UserDto } from "../models/UserDto"
import { converFromUserDto } from "../utils/convertFromUserDto"
// MUI imports
import {
    Box,
    TextField,
    Button,
    Typography,
    Paper,
    Container,
    Alert,
    Grid,
    ThemeProvider,
    createTheme,
    CssBaseline,
    InputAdornment,
    Divider,
} from "@mui/material"
import { Person, Email, Phone, Badge, Lock, AdminPanelSettings } from "@mui/icons-material"

// Create a custom theme with RTL support and Hebrew font
const theme = createTheme({
    direction: "rtl",
    typography: {
        fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
        h4: {
            fontWeight: 700,
        },
        button: {
            fontWeight: 600,
        },
    },
    palette: {
        primary: {
            main: "#3f51b5",
        },
        secondary: {
            main: "#f50057",
        },
        background: {
            default: "#f5f5f5",
        },
    },
    components: {
        MuiTextField: {
            styleOverrides: {
                root: {
                    direction: "rtl",
                },
            },
        },
        MuiButton: {
            styleOverrides: {
                root: {
                    borderRadius: 8,
                    padding: "10px 24px",
                    textTransform: "none",
                    fontSize: "1rem",
                },
            },
        },
    },
})

const AdminRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
    const validationSchema = validationSchemaUserRegister
    const [myAdmin, setMyAdmin] = useState<UserPostModel>({
        firstName: "יוסי", // ערך ברירת מחדל
        lastName: "כהן", // ערך ברירת מחדל
        email: "a@a", // ערך ברירת מחדל
        password: "", // ערך ברירת מחדל
        phone: "050-1234567", // ערך ברירת מחדל
        role: 1, // ערך ברירת מחדל
        idNumber: "123456789", // ערך ברירת מחדל
    })
    const [errors, setErrors] = useState<string[]>([])
    const globalContextDetails = useContext(globalContext)
    const url = import.meta.env.VITE_API_URL

    const handleSubmit = (adminRegister: UserPostModel) => async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault()

        validationSchema
            .isValid(adminRegister)
            .then(async (valid) => {
                setErrors([])
                if (valid) {
                    try {
                        const { data } = await axios.post<UserDto>(`${url}/Auth/admin-register`, adminRegister, { withCredentials: true })
                        globalContextDetails.setUser(converFromUserDto(data))
                        if (data.role == 1) {
                            globalContextDetails.setIsAdmin(true)
                        }
                        if (onSubmitSuccess) onSubmitSuccess()
                    } catch (e) {
                        console.log(e)
                        setErrors(["שגיאה ברישום"])
                    }
                } else {
                    setErrors(["נא למלא את כל השדות הנדרשים"])
                }
            })
            .catch((err) => {
                console.log("Validation error:", err.errors)
                if (err instanceof Yup.ValidationError) {
                    setErrors(err.errors)
                }
            })
    }

    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const { name, value, type } = event.target
        setMyAdmin((prevUser) => ({
            ...prevUser,
            [name]: type === "number" ? Number(value) : value,
        }))
    }

    return (
        <ThemeProvider theme={theme}>
            <CssBaseline />
            <Container maxWidth="md" sx={{ py: 4 }}>
                <Paper
                    elevation={3}
                    sx={{
                        p: 4,
                        borderRadius: 3,
                        boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
                    }}
                >
                    <Box sx={{ mb: 4, textAlign: "center" }}>
                        <AdminPanelSettings color="primary" sx={{ fontSize: 48, mb: 2 }} />
                        <Typography variant="h4" component="h1" gutterBottom>
                            רישום מנהל חדש
                        </Typography>
                        <Typography variant="body1" color="text.secondary">
                            נא למלא את כל הפרטים הנדרשים
                        </Typography>
                        <Divider sx={{ mt: 3 }} />
                    </Box>

                    <Box
                        component="form"
                        onSubmit={handleSubmit(myAdmin)}
                        sx={{
                            display: "flex",
                            flexDirection: "column",
                            gap: 3,
                        }}
                    >
                        <Grid container spacing={2}>
                            <Grid item xs={12} md={6} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="שם פרטי"
                                    name="firstName"
                                    value={myAdmin.firstName}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Person color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                            <Grid item xs={12} md={6} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="שם משפחה"
                                    name="lastName"
                                    value={myAdmin.lastName}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Person color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                            <Grid item xs={12} md={6} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="טלפון"
                                    name="phone"
                                    value={myAdmin.phone}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Phone color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                            <Grid item xs={12} md={6} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="מספר תעודת זהות"
                                    name="idNumber"
                                    value={myAdmin.idNumber}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Badge color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                            <Grid item xs={12} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="אימייל"
                                    name="email"
                                    type="email"
                                    value={myAdmin.email}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Email color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                            <Grid item xs={12} {...({} as any)}>
                                <TextField
                                    fullWidth
                                    label="סיסמא"
                                    name="password"
                                    type="password"
                                    value={myAdmin.password}
                                    onChange={handleChange}
                                    variant="outlined"
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <Lock color="action" />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Grid>
                        </Grid>

                        <Button
                            type="submit"
                            variant="contained"
                            size="large"
                            sx={{
                                mt: 2,
                                py: 1.5,
                                fontWeight: "bold",
                                fontSize: "1.1rem",
                                boxShadow: "0 4px 12px rgba(63, 81, 181, 0.4)",
                            }}
                        >
                            שמור פרטים
                        </Button>

                        {errors.length > 0 && (
                            <Box sx={{ width: "100%", mt: 2 }}>
                                {errors.map((error, index) => (
                                    <Alert key={index} severity="error" sx={{ mb: 1 }}>
                                        {error}
                                    </Alert>
                                ))}
                            </Box>
                        )}
                    </Box>
                </Paper>
            </Container>
        </ThemeProvider>
    )
}

export default AdminRegister
"use client"

import { type JSX, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import { Box, Typography, Container, Paper, Button } from "@mui/material"
import { ThemeProvider, createTheme } from "@mui/material/styles"
import { NoAccountsOutlined } from "@mui/icons-material"
import { useNavigate } from "react-router-dom"

// Create a custom theme with RTL support and Hebrew font
const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: {
      main: "#3f51b5",
    },
    error: {
      main: "#f44336",
    },
  },
})

const AdminRoute = ({ children }: { children: JSX.Element }) => {
  const { isAdmin } = useContext(globalContext)
  const navigate = useNavigate()

  if (isAdmin === false) {
    return (
      <ThemeProvider theme={theme}>
        <Container
          maxWidth="sm"
          sx={{ height: "100vh", display: "flex", alignItems: "center", justifyContent: "center" }}
        >
          <Paper
            elevation={3}
            sx={{
              p: 5,
              borderRadius: 3,
              textAlign: "center",
              boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
            }}
          >
            <NoAccountsOutlined color="error" sx={{ fontSize: 80, mb: 2 }} />
            <Typography variant="h4" component="h1" color="error.main" gutterBottom fontWeight="bold">
              גישה נדחתה
            </Typography>
            <Typography variant="body1" color="text.secondary" paragraph>
              אין לך הרשאה לצפות בדף זה. רק מנהלים יכולים לגשת לתוכן זה.
            </Typography>
            <Box sx={{ mt: 3 }}>
              <Button
                variant="contained"
                color="primary"
                onClick={() => navigate("/")}
                sx={{
                  borderRadius: 2,
                  px: 4,
                  py: 1,
                  fontWeight: "bold",
                }}
              >
                חזרה לדף הבית
              </Button>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    )
  }

  return children
}

export default AdminRoute
"use client"

import { useContext, useEffect, useState } from "react"
import RegisterBusinessData from "./RegisterBusinessData"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import type { BusinessResponsePutModel } from "../models/BusinessResponsePutModel"
import AdminRegister from "./AdminRegister"
import type { UserDto } from "../models/UserDto"
import {
  Box,
  Button,
  Typography,
  Paper,
  Container,
  Stepper,
  Step,
  StepLabel,
  Divider,
  Alert,
  ThemeProvider,
  createTheme,
  CssBaseline,
} from "@mui/material"
import { Business, Person, Check } from "@mui/icons-material"

// Create a custom theme with RTL support and Hebrew font
const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: {
      main: "#3f51b5",
    },
    secondary: {
      main: "#f50057",
    },
    success: {
      main: "#4caf50",
    },
    background: {
      default: "#f5f5f5",
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          padding: "10px 24px",
          textTransform: "none",
          fontSize: "1rem",
        },
      },
    },
  },
})

const BusinessAndAdmin = () => {
  const [isBusiness, setIsBusiness] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [businessDone, setBusinessDone] = useState(false)
  const [adminDone, setAdminDone] = useState(false)
  const [activeStep, setActiveStep] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    if (businessDone && adminDone) {
      // OK
      updateObjects()
      // שניהם הסתיימו => אפשר להמשיך לשלב הבא או לנווט
      console.log("הטפסים נוספו בהצלחה")
    }
  }, [businessDone, adminDone])

  // עדכון קשרים בין עסק למשתמש - מנהל
  const updateObjects = async () => {
    setError(null)

    const updateAdmin = {
      ...globalContextDetails.user,
      businessId: globalContextDetails.business_global.id,
      business: globalContextDetails.business_global,
      role: 1,
      updateBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
    }
    const updateBusiness = {
      ...globalContextDetails.business_global,
      users: [globalContextDetails.user],
      updateBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
    }
    globalContextDetails.setUser(updateAdmin)
    globalContextDetails.setBusinessGlobal(updateBusiness)

    try {
      console.log("updateAdmin ", updateAdmin)
      console.log("updateBusiness ", updateBusiness)

      await axios.put<UserDto>(`${url}/api/User/${globalContextDetails.user.id}`, updateAdmin, { withCredentials: true })
      await axios.put<BusinessResponsePutModel>(
        `${url}/api/Business/${globalContextDetails.business_global.id}`,
        updateBusiness,
        { withCredentials: true }
      )

      globalContextDetails.setBusinessGlobal(updateBusiness)
      globalContextDetails.setUser(updateAdmin)
      setSuccess(true)
      setActiveStep(3)
    } catch (e) {
      console.log(e)
      setError("אירעה שגיאה בעדכון הנתונים. אנא נסה שנית.")
    }
  }

  const handleAdminSuccess = () => {
    setAdminDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 1))
  }

  const handleBusinessSuccess = () => {
    setBusinessDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 2))
  }

  const steps = ["התחלה", "פרטי מנהל", "פרטי עסק", "סיום"]

  return (
    <ThemeProvider theme={theme}>
      <div style={{ marginTop: "65vh" }}></div>

      <CssBaseline />
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Paper
          elevation={3}
          sx={{
            p: 4,
            borderRadius: 3,
            boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
          }}
        >
          <Typography variant="h4" component="h1" align="center" gutterBottom fontWeight="bold" color="primary">
            הגדרת עסק ומנהל
          </Typography>

          <Stepper activeStep={activeStep} sx={{ mb: 4, mt: 3 }}>
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel>{label}</StepLabel>
              </Step>
            ))}
          </Stepper>

          <Divider sx={{ mb: 4 }} />

          {success ? (
            <Box sx={{ textAlign: "center", py: 3 }}>
              <Check sx={{ fontSize: 60, color: "success.main", mb: 2 }} />
              <Typography variant="h5" gutterBottom color="success.main" fontWeight="bold">
                הרישום הושלם בהצלחה!
              </Typography>
              <Typography variant="body1" paragraph>
                פרטי העסק והמנהל נשמרו במערכת.
              </Typography>
            </Box>
          ) : (
            <>
              <Box sx={{ display: "flex", flexDirection: "column", gap: 4 }}>
                <Box>
                  <Button
                    onClick={() => {
                      setIsAdmin(!isAdmin)
                      if (!isAdmin) setActiveStep(1)
                    }}
                    variant={isAdmin ? "outlined" : "contained"}
                    startIcon={<Person />}
                    fullWidth
                    size="large"
                    sx={{ mb: isAdmin ? 2 : 0 }}
                  >
                    {isAdmin ? "סגור טופס רישום מנהל" : "רישום פרטי מנהל"}
                  </Button>

                  {isAdmin && <AdminRegister />}
                </Box>

                <Box>
                  <Button
                    onClick={() => {
                      setIsBusiness(!isBusiness)
                      if (!isBusiness && adminDone) setActiveStep(2)
                    }}
                    variant={isBusiness ? "outlined" : "contained"}
                    startIcon={<Business />}
                    fullWidth
                    size="large"
                    sx={{ mb: isBusiness ? 2 : 0 }}
                    disabled={!adminDone}
                  >
                    {isBusiness ? "סגור טופס רישום עסק" : "רישום פרטי עסק"}
                  </Button>

                  {isBusiness && <RegisterBusinessData onSubmitSuccess={handleBusinessSuccess} />}
                </Box>
              </Box>

              {error && (
                <Alert severity="error" sx={{ mt: 3 }}>
                  {error}
                </Alert>
              )}
            </>
          )}
        </Paper>
      </Container>
    </ThemeProvider>
  )
}

export default BusinessAndAdmin
import type React from "react"
import type { Business } from "../models/Business"
import { Table, Typography, Card, ConfigProvider, Tag } from "antd"
import type { ColumnsType } from "antd/es/table"

const { Title } = Typography

interface BusinessTableProps {
  business: Business
}

const BusinessTable: React.FC<BusinessTableProps> = ({ business }) => {
  const dataSource = [business]

  const columns: ColumnsType<Business> = [
    {
      title: "מזהה",
      dataIndex: "id",
      key: "id",
      align: "right",
    },
    {
      title: "שם עסק",
      dataIndex: "name",
      key: "name",
      align: "right",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "כתובת",
      dataIndex: "address",
      key: "address",
      align: "right",
    },
    {
      title: "אימייל",
      dataIndex: "email",
      key: "email",
      align: "right",
    },
    {
      title: "סוג עסק",
      dataIndex: "businessType",
      key: "businessType",
      align: "right",
      render: (text) => <Tag color="blue">{text}</Tag>,
    },
    {
      title: "הכנסות",
      dataIndex: "income",
      key: "income",
      align: "right",
      render: (value) => <span style={{ color: "#52c41a", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "הוצאות",
      dataIndex: "expenses",
      key: "expenses",
      align: "right",
      render: (value) => <span style={{ color: "#ff4d4f", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "תזרים מזומנים",
      dataIndex: "cashFlow",
      key: "cashFlow",
      align: "right",
      render: (value) => <span style={{ color: "#1890ff", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "שווי נקי",
      dataIndex: "netWorth",
      key: "netWorth",
      align: "right",
      render: (value) => <span style={{ color: "#722ed1", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div style={{ width: "100%" }}>
        <Title level={4} style={{ marginBottom: 16, textAlign: "right" }}>
          פרטי העסק
        </Title>

        <Card style={{ borderRadius: 12, overflow: "hidden" }}>
          <Table
            dataSource={dataSource}
            columns={columns}
            pagination={false}
            rowKey="id"
            scroll={{ x: 800 }}
            style={{ direction: "rtl" }}
          />
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default BusinessTable
import { ConfigProvider } from "antd"
import type React from "react"

const CenteredLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <ConfigProvider direction="rtl">
      <div className="centered-layout">
        <div style={{ width: "100%", maxWidth: 600 }}>{children}</div>
      </div>
    </ConfigProvider>
  )
}

export default CenteredLayout
"use client"
import axios from "axios"
import type React from "react"

import { useState, useContext } from "react"
import {
  Button,
  Typography,
  Card,
  Alert,
  Spin,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
  Statistic,
  Progress,
  Tag,
  Input,
  Form,
  Modal,
  InputNumber,
  message,
} from "antd"
import {
  EyeOutlined,
  ShopOutlined,
  EditOutlined,
  SaveOutlined,
  CloseOutlined,
  DollarOutlined,
  WarningOutlined,
  BarChartOutlined,
  PieChartOutlined,
  LineChartOutlined,
  BankOutlined,
  CreditCardOutlined,
  WalletOutlined,
  RiseOutlined,
  FallOutlined,
} from "@ant-design/icons"
import { Business } from "../models/Business"
import { globalContext } from "../context/GlobalContext"

const { Title, Text } = Typography

function DataViewing() {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [dataLoaded, setDataLoaded] = useState(false)
  const [editModalVisible, setEditModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext) as { user: { businessId: number } }
  const [form] = Form.useForm()

  const [business, setBusiness] = useState<Business>({
    id: 0,
    businessId: 0,
    name: "",
    address: "",
    email: "",
    businessType: "",
    income: 0,
    expenses: 0,
    cashFlow: 0,
    totalAssets: 0,
    totalLiabilities: 0,
    netWorth: 0,
    createdAt: new Date(),
    createdBy: "",
    updatedAt: new Date(),
    updatedBy: "",
  })

  const handleSubmit = async () => {
    setErrors([])
    setLoading(true)

    try {
      const res = await axios.get<Business>(`${url}/api/Business/${globalContextDetails.user.businessId}`, {
        withCredentials: true,
      })

      if (res.status !== 200) {
        setErrors(["שגיאה בטעינת נתוני העסק"])
        setLoading(false)
        return
      }

      if (!res.data) {
        setErrors(["לא נמצאו נתונים"])
        setLoading(false)
        return
      }

      setBusiness(res.data)
      setDataLoaded(true)
      setLoading(false)
    } catch (error) {
      console.error("Error fetching business data:", error)
      setErrors(["שגיאה בטעינת נתוני העסק"])
      setLoading(false)
    }
  }

  const handleEdit = () => {
    form.setFieldsValue(business)
    setEditModalVisible(true)
  }

  const handleSave = async () => {
    try {
      const values = await form.validateFields()
      const updatedBusiness = { ...business, ...values }

      // Here you would typically make an API call to update the business
      // await axios.put(`${url}/api/Business/${business.id}`, updatedBusiness)

      setBusiness(updatedBusiness)
      setEditModalVisible(false)
      message.success("נתוני העסק עודכנו בהצלחה!")
    } catch (error) {
      message.error("שגיאה בעדכון נתוני העסק")
    }
  }


  const getChangeIcon = (value: number) => {
    return value > 0 ? <RiseOutlined style={{ color: "#52c41a" }} /> : <FallOutlined style={{ color: "#ff4d4f" }} />
  }

  const calculateProfitMargin = () => {
    if (business.income === 0) return 0
    return (((business.income - business.expenses) / business.income) * 100).toFixed(1)
  }

  const calculateROI = () => {
    if (business.totalAssets === 0) return 0
    return ((business.netWorth / business.totalAssets) * 100).toFixed(1)
  }

  const businessMetrics = [
    {
      title: "הכנסות כוללות",
      value: business.income,
      prefix: "₪",
      icon: <DollarOutlined />,
      color: "#52c41a",
      change: 12.5,
      description: "גידול של 12.5% מהחודש הקודם",
    },
    {
      title: "הוצאות כוללות",
      value: business.expenses,
      prefix: "₪",
      icon: <CreditCardOutlined />,
      color: "#ff4d4f",
      change: -3.2,
      description: "ירידה של 3.2% מהחודש הקודם",
    },
    {
      title: "תזרים מזומנים",
      value: business.cashFlow,
      prefix: "₪",
      icon: <WalletOutlined />,
      color: business.cashFlow > 0 ? "#52c41a" : "#ff4d4f",
      change: 8.7,
      description: "שיפור של 8.7% מהחודש הקודם",
    },
    {
      title: "סך נכסים",
      value: business.totalAssets,
      prefix: "₪",
      icon: <BankOutlined />,
      color: "#1890ff",
      change: 5.3,
      description: "גידול של 5.3% מהחודש הקודם",
    },
    {
      title: "התחייבויות",
      value: business.totalLiabilities,
      prefix: "₪",
      icon: <CreditCardOutlined />,
      color: "#fa8c16",
      change: -2.1,
      description: "ירידה של 2.1% מהחודש הקודם",
    },
    {
      title: "שווי נקי",
      value: business.netWorth,
      prefix: "₪",
      icon: <WarningOutlined />,
      color: "#722ed1",
      change: 15.4,
      description: "גידול של 15.4% מהחודש הקודם",
    },
  ]

  const performanceMetrics = [
    {
      title: "שיעור רווח",
      value: calculateProfitMargin(),
      suffix: "%",
      target: 25,
      color: "#52c41a",
    },
    {
      title: "תשואה על השקעה",
      value: calculateROI(),
      suffix: "%",
      target: 15,
      color: "#1890ff",
    },
    {
      title: "יחס חוב להון",
      value: business.totalAssets > 0 ? ((business.totalLiabilities / business.totalAssets) * 100).toFixed(1) : 0,
      suffix: "%",
      target: 40,
      color: "#fa8c16",
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div className="business-data-container" style={{ maxWidth: 1400, margin: "0 auto" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <ShopOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              לוח בקרה עסקי מתקדם
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה ונהל את נתוני העסק שלך בצורה חכמה ויעילה
            </Text>

            <Divider />
          </div>

          {!dataLoaded ? (
            <div style={{ textAlign: "center", marginBottom: 32 }}>
              <Button
                type="primary"
                size="large"
                disabled={loading}
                loading={loading}
                icon={<EyeOutlined />}
                onClick={handleSubmit}
                style={{
                  height: 56,
                  padding: "0 40px",
                  fontWeight: 600,
                  fontSize: 18,
                  borderRadius: 16,
                }}
              >
                {loading ? "טוען נתונים..." : "טען נתוני עסק"}
              </Button>
            </div>
          ) : (
            <Space direction="vertical" style={{ width: "100%" }} size="large">
              {/* Business Header */}
              <Card
                style={{
                  background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                  color: "white",
                  border: "none",
                }}
              >
                <Row align="middle" justify="space-between">
                  <Col>
                    <Space direction="vertical" size="small">
                      <Title level={3} style={{ color: "white", margin: 0 }}>
                        {business.name}
                      </Title>
                      <Text style={{ color: "rgba(255,255,255,0.8)", fontSize: 16 }}>
                        {business.businessType} • {business.address}
                      </Text>
                      <Tag color="gold" style={{ marginTop: 8 }}>
                        {business.email}
                      </Tag>
                    </Space>
                  </Col>
                  <Col>
                    <Button
                      type="primary"
                      ghost
                      icon={<EditOutlined />}
                      onClick={handleEdit}
                      size="large"
                      style={{
                        borderColor: "white",
                        color: "white",
                        fontWeight: 600,
                      }}
                    >
                      ערוך פרטים
                    </Button>
                  </Col>
                </Row>
              </Card>

              {/* Financial Metrics */}
              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדים פיננסיים עיקריים
                </Title>
                <Row gutter={[16, 16]}>
                  {businessMetrics.map((metric, index) => (
                    <Col xs={24} sm={12} lg={8} key={index}>
                      <Card
                        className="business-metric"
                        style={
                          {
                            height: "100%",
                            background: `${metric.color}08`,
                            border: `1px solid ${metric.color}30`,
                            borderRadius: 16,
                            "--metric-index": index,
                          } as React.CSSProperties
                        }
                      >
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                            <Text type="secondary" style={{ fontSize: 14 }}>
                              {metric.title}
                            </Text>
                            <Avatar
                              size={40}
                              style={{
                                background: `${metric.color}20`,
                                color: metric.color,
                              }}
                            >
                              {metric.icon}
                            </Avatar>
                          </div>

                          <Statistic
                            value={metric.value}
                            prefix={metric.prefix}
                            valueStyle={{
                              color: metric.color,
                              fontSize: "1.8rem",
                              fontWeight: "bold",
                            }}
                          />

                          <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                            {getChangeIcon(metric.change)}
                            <Text
                              style={{
                                color: metric.change > 0 ? "#52c41a" : "#ff4d4f",
                                fontWeight: 600,
                              }}
                            >
                              {metric.change > 0 ? "+" : ""}
                              {metric.change}%
                            </Text>
                          </div>

                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {metric.description}
                          </Text>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>

              {/* Performance Indicators */}
              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדי ביצועים
                </Title>
                <Row gutter={[16, 16]}>
                  {performanceMetrics.map((metric, index) => (
                    <Col xs={24} md={8} key={index}>
                      <Card style={{ height: "100%", borderRadius: 16 }}>
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <Text strong style={{ fontSize: 16 }}>
                            {metric.title}
                          </Text>

                          <div style={{ textAlign: "center", margin: "16px 0" }}>
                            <Progress
                              type="circle"
                              percent={Math.min(
                                (Number.parseFloat(metric.value.toString()) /
                                  Number.parseFloat(metric.target.toString())) *
                                  100,
                                100,
                              )}
                              format={() => (
                                <div>
                                  <div style={{ fontSize: "1.5rem", fontWeight: "bold", color: metric.color }}>
                                    {metric.value}
                                    {metric.suffix}
                                  </div>
                                  <div style={{ fontSize: "0.8rem", color: "#666" }}>
                                    יעד: {metric.target}
                                    {metric.suffix}
                                  </div>
                                </div>
                              )}
                              strokeColor={metric.color}
                              size={120}
                            />
                          </div>

                          <div style={{ textAlign: "center" }}>
                            <Tag
                              color={
                                Number.parseFloat(metric.value.toString()) >=
                                Number.parseFloat(metric.target.toString())
                                  ? "success"
                                  : "warning"
                              }
                            >
                              {Number.parseFloat(metric.value.toString()) >= Number.parseFloat(metric.target.toString())
                                ? "עומד ביעד"
                                : "מתחת ליעד"}
                            </Tag>
                          </div>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>

              {/* Quick Actions */}
              <Card title="פעולות מהירות" style={{ borderRadius: 16 }}>
                <Row gutter={[16, 16]}>
                  <Col xs={24} sm={8}>
                    <Button
                      type="primary"
                      icon={<BarChartOutlined />}
                      block
                      size="large"
                      style={{ height: 48, borderRadius: 12 }}
                    >
                      דוח מפורט
                    </Button>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Button
                      type="default"
                      icon={<PieChartOutlined />}
                      block
                      size="large"
                      style={{ height: 48, borderRadius: 12, borderWidth: 2 }}
                    >
                      ניתוח מגמות
                    </Button>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Button
                      type="default"
                      icon={<LineChartOutlined />}
                      block
                      size="large"
                      style={{ height: 48, borderRadius: 12, borderWidth: 2 }}
                    >
                      תחזית עתידית
                    </Button>
                  </Col>
                </Row>
              </Card>
            </Space>
          )}

          {loading && (
            <div style={{ textAlign: "center", padding: "60px 0" }}>
              <Spin size="large" />
              <div style={{ marginTop: 24 }}>
                <Text type="secondary" style={{ fontSize: 16 }}>
                  טוען נתוני העסק...
                </Text>
              </div>
            </div>
          )}

          {errors.length > 0 && (
            <div>
              {errors.map((error, index) => (
                <Alert
                  key={index}
                  message="שגיאה"
                  description={error}
                  type="error"
                  showIcon
                  style={{ marginBottom: 8, borderRadius: 12 }}
                />
              ))}
            </div>
          )}
        </Card>

        {/* Edit Modal */}
        <Modal
          title="עריכת נתוני עסק"
          open={editModalVisible}
          onCancel={() => setEditModalVisible(false)}
          footer={[
            <Button key="cancel" onClick={() => setEditModalVisible(false)} icon={<CloseOutlined />}>
              ביטול
            </Button>,
            <Button key="save" type="primary" onClick={handleSave} icon={<SaveOutlined />}>
              שמור שינויים
            </Button>,
          ]}
          width={800}
          className="edit-mode"
        >
          <Form form={form} layout="vertical" style={{ marginTop: 16 }}>
            <Row gutter={[16, 16]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם העסק" name="name">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סוג העסק" name="businessType">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="כתובת" name="address">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הכנסות" name="income">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הוצאות" name="expenses">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סך נכסים" name="totalAssets">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="התחייבויות" name="totalLiabilities">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
            </Row>
          </Form>
        </Modal>
      </div>
    </ConfigProvider>
  )
}

export default DataViewing
"use client"
import { useContext, useEffect, useState } from "react"
import axios from "axios"
import { useNavigate, useParams } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { convertToUser } from "../utils/converToUser"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  EditOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"
import { UserDto } from "../models/UserDto"

const { Title, Text } = Typography

const EditUserPage = () => {
  const { id } = useParams()
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const { setUser } = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL
  const [myUser, setMyUser] = useState<UserDto>({
    id: 0,
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    idNumber: "",
    password: "",
    role: 0,
    status: "", // Default value for status
    lastLogin: new Date(), // Default value for lastLogin
    createdAt: new Date(), // Default value for createdAt
    updateAt: new Date(), // Default value for updateAt
    businessId: 0, // Default value for businessId
  })

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await axios.get<UserDto>(`${url}/api/User/${id}`, { withCredentials: true })
        setMyUser(data)
      } catch (e) {
        setErrors(["שגיאה בטעינת נתוני המשתמש"])
      }
    }

    if (id) fetchUser()
  }, [id, url])

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(myUser)
      setErrors([])

      if (valid && id) {
        console.log(myUser);
        
        const { data } = await axios.put<UserPostModel>(`${url}/api/User/${id}`, myUser, { withCredentials: true })
        setUser(convertToUser(data))
        nav("/user-management")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      console.log(e)
      setErrors(["שגיאה בעדכון המשתמש"])
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto", marginTop: "70vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <EditOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              עריכת משתמש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              עדכן את פרטי המשתמש
            </Text>

            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא (חדשה)" required>
                  <Input.Password
                    prefix={<LockOutlined />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<EditOutlined />}
                  block
                  style={{ height: 48, fontWeight: 600, fontSize: 16 }}
                >
                  עדכן משתמש
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav(-1)}
                  block
                  style={{ height: 48, fontWeight: 600, borderWidth: 2 }}
                >
                  חזרה
                </Button>
              </Col>
            </Row>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default EditUserPage
"use client"
import axios from "axios"
import { useContext, useEffect, useState } from "react"
import type { InvoiceDto } from "../models/InvoiceDto"
import { globalContext } from "../context/GlobalContext"
import {
  Form,
  InputNumber,
  Button,
  Typography,
  Card,
  Row,
  Col,
  Alert,
  Statistic,
  ConfigProvider,
  Divider,
  Avatar,
  Spin,
} from "antd"
import {
  DollarOutlined,
  MinusCircleOutlined,
  SendOutlined,
  FileTextOutlined,
  WarningOutlined,
  DingdingOutlined,
  BarChartOutlined,
  ClearOutlined,
} from "@ant-design/icons"

const { Title, Text } = Typography

const IncomAndExpennses = () => {
  const [income, setIncome] = useState(0)
  const [expenditure, setExpenditure] = useState(0)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)
  const [summaryLoading, setSummaryLoading] = useState(true)
  const [financialSummary, setFinancialSummary] = useState<any[]>([])

  const globalContextDetails = useContext(globalContext)

  const fetchSummaryData = async () => {
    const businessId = globalContextDetails.user.businessId
    const now = new Date()
    const year = now.getFullYear()
    const month = now.getMonth() + 1

    try {
      const response = await axios.get(`https://localhost:7031/api/Reports/monthly?businessId=${businessId}&year=${year}&month=${month}`, {
        withCredentials: true,
      })

      const data = response.data

      const summary = [
        {
          title: "הכנסות החודש",
          amount: data.currentMonthIncome,
          change: data.incomeChangePercent,
          icon: <WarningOutlined />,
          color: "#52c41a",
        },
        {
          title: "הוצאות החודש",
          amount: data.currentMonthExpenses,
          change: data.expensesChangePercent,
          icon: <DingdingOutlined />,
          color: "#ff4d4f",
        },
        {
          title: "רווח נקי",
          amount: data.currentMonthNetProfit,
          change: data.netProfitChangePercent,
          icon: <BarChartOutlined />,
          color: "#1890ff",
        },
      ]

      setFinancialSummary(summary)
    } catch (err) {
      console.error("Failed to fetch financial summary", err)
      setError("שגיאה בטעינת סיכום פיננסי.")
    } finally {
      setSummaryLoading(false)
    }
  }

  useEffect(() => {
    fetchSummaryData()
  }, [])

  const handleSubmit = async () => {
    setLoading(true)
    setSuccess(false)
    setError(null)

    const invoiceToSend: InvoiceDto = {
      id: 0,
      amountDebit: expenditure,
      amountCredit: income,
      invoiceDate: new Date(),
      status: 1,
      notes: "",
      createdAt: new Date(),
      createdBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
      updatedAt: new Date(),
      updatedBy: globalContextDetails.user.firstName + " " + globalContextDetails.user.lastName,
      invoicePath: "",
      userId: globalContextDetails.user.id,
      businessId: globalContextDetails.user.businessId ?? 0,
    }

    try {
      await axios.post("https://localhost:7031/api/Invoice", invoiceToSend, { withCredentials: true })
      setSuccess(true)
      setIncome(0)
      setExpenditure(0)
      fetchSummaryData() // טען מחדש את הסיכום אחרי שמירת תנועה
    } catch (error) {
      console.error("Error saving invoice:", error)
      setError("אירעה שגיאה בשמירת הנתונים. אנא נסה שנית.")
    } finally {
      setLoading(false)
    }
  }

  const handleReset = () => {
    setIncome(0)
    setExpenditure(0)
    setSuccess(false)
    setError(null)
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "0 0 40px 0", marginTop: "80vh" }}>
        <Card className="form-section" style={{ marginBottom: 32 }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <FileTextOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              ניהול הכנסות והוצאות
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              הזן את ההכנסות וההוצאות של העסק שלך לניהול פיננסי יעיל
            </Text>

            <Divider />
          </div>

          {/* Financial Summary */}
          {summaryLoading ? (
            <div style={{ textAlign: "center", marginBottom: 40 }}>
              <Spin size="large" />
            </div>
          ) : (
            <Row gutter={[24, 24]} style={{ marginBottom: 40 }}>
              {financialSummary.map((item, index) => (
                <Col xs={24} md={8} key={index}>
                  <Card className="financial-summary-card">
                    <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 16 }}>
                      <Title level={5} style={{ margin: 0, color: "#2d3748" }}>
                        {item.title}
                      </Title>
                      <Avatar size={48} style={{ background: `${item.color}20`, color: item.color }}>
                        {item.icon}
                      </Avatar>
                    </div>
                    <Statistic
                      value={item.amount}
                      prefix="₪"
                      valueStyle={{ color: item.color, fontSize: "1.8rem", fontWeight: "bold" }}
                    />
                    <div style={{ display: "flex", alignItems: "center", marginTop: 8 }}>
                      <Text
                        style={{
                          color: item.change > 0 ? "#52c41a" : "#ff4d4f",
                          fontWeight: 600,
                          marginLeft: 8,
                        }}
                      >
                        {item.change > 0 ? "+" : ""}
                        {item.change}%
                      </Text>
                      <Text type="secondary">מהחודש הקודם</Text>
                    </div>
                  </Card>
                </Col>
              ))}
            </Row>
          )}

          <Form layout="vertical" onFinish={handleSubmit}>
            <Title level={4} style={{ marginBottom: 24 }}>
              הוספת תנועה חדשה
            </Title>

            <Row gutter={[24, 24]}>
              <Col xs={24} md={12}>
                <Card className="income-card" style={{ height: "100%" }}>
                  <div style={{ display: "flex", alignItems: "center", marginBottom: 20 }}>
                    <Avatar style={{ background: "#52c41a", color: "white", marginLeft: 12 }}>
                      <DollarOutlined />
                    </Avatar>
                    <Title level={5} style={{ margin: 0, color: "#389e0d" }}>
                      הכנסות
                    </Title>
                  </div>
                  <Form.Item label="סכום ההכנסה" required>
                    <InputNumber
                      size="large"
                      style={{ width: "100%" }}
                      placeholder="הזן סכום הכנסה"
                      value={income || undefined}
                      onChange={(value) => setIncome(value || 0)}
                      prefix="₪"
                      formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                      parser={(value) => parseFloat(value!.replace(/\$\s?|(,*)/g, "")) || 0}
                    />
                  </Form.Item>
                </Card>
              </Col>

              <Col xs={24} md={12}>
                <Card className="expense-card" style={{ height: "100%" }}>
                  <div style={{ display: "flex", alignItems: "center", marginBottom: 20 }}>
                    <Avatar style={{ background: "#ff4d4f", color: "white", marginLeft: 12 }}>
                      <MinusCircleOutlined />
                    </Avatar>
                    <Title level={5} style={{ margin: 0, color: "#cf1322" }}>
                      הוצאות
                    </Title>
                  </div>
                  <Form.Item label="סכום ההוצאה" required>
                    <InputNumber
                      size="large"
                      style={{ width: "100%" }}
                      placeholder="הזן סכום הוצאה"
                      value={expenditure || undefined}
                      onChange={(value) => setExpenditure(value || 0)}
                      prefix="₪"
                      formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                      parser={(value) => parseFloat(value!.replace(/\$\s?|(,*)/g, "")) || 0}
                    />
                  </Form.Item>
                </Card>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 32 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<SendOutlined />}
                  block
                  style={{ height: 48, fontWeight: 600, fontSize: 16 }}
                >
                  שמור נתונים
                </Button>
              </Col>

              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  onClick={handleReset}
                  icon={<ClearOutlined />}
                  block
                  style={{ height: 48, fontWeight: 600, borderWidth: 2 }}
                >
                  נקה טופס
                </Button>
              </Col>
            </Row>

            {success && (
              <Alert
                message="הנתונים נשמרו בהצלחה!"
                description="התנועה הפיננסית נוספה למערכת בהצלחה."
                type="success"
                showIcon
                style={{ marginTop: 24, borderRadius: 8, border: "1px solid #b7eb8f" }}
              />
            )}

            {error && (
              <Alert
                message="שגיאה!"
                description={error}
                type="error"
                showIcon
                style={{ marginTop: 24, borderRadius: 8, border: "1px solid #ffccc7" }}
              />
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default IncomAndExpennses
"use client"

import { useContext } from "react"
import { Typography, Row, Col, Card, Button, Space, Avatar, Statistic, ConfigProvider } from "antd"
import {
  DashboardOutlined,
  ShopOutlined,
  DollarOutlined,
  BarChartOutlined,
  ArrowRightOutlined,
  TeamOutlined,
  EyeOutlined,
  UploadOutlined,
  RiseOutlined,
  FallOutlined,
} from "@ant-design/icons"
import { useNavigate } from "react-router-dom"
import { globalContext } from "../context/GlobalContext"

const { Title, Text, Paragraph } = Typography

const MyHome = () => {
  const globalContextDetails = useContext(globalContext)

  if (!globalContextDetails) {
    throw new Error("globalContext must be used within a GlobalContextProvider")
  }
  const navigate = useNavigate()

  const menuItems = [
    {
      title: "לוח בקרה",
      icon: <DashboardOutlined style={{ fontSize: 32, color: "#667eea" }} />,
      description: "צפה בנתונים עדכניים של העסק שלך",
      path: "/view-data",
      color: "#667eea",
    },
    {
      title: "פרטי העסק",
      icon: <ShopOutlined style={{ fontSize: 32, color: "#52c41a" }} />,
      description: "נהל את פרטי העסק שלך",
      path: "/business-register",
      color: "#52c41a",
    },
    {
      title: "הכנסות והוצאות",
      icon: <DollarOutlined style={{ fontSize: 32, color: "#fa8c16" }} />,
      description: "נהל את התקציב והתזרים של העסק",
      path: "/incom&Expennses",
      color: "#fa8c16",
    },
    {
      title: "דוחות",
      icon: <BarChartOutlined style={{ fontSize: 32, color: "#722ed1" }} />,
      description: "צפה בדוחות ביצועים ותחזיות",
      path: "/production-reports",
      color: "#722ed1",
    },
  ]

  const quickActions = [
    { title: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
    { title: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
    { title: "ניהול משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  ]

  const statsData = [
    {
      title: "הכנסות החודש",
      value: 10500,
      prefix: "₪",
      trend: 12.5,
      color: "#52c41a",
      icon: <DollarOutlined />,
    },
    {
      title: "משתמשים פעילים",
      value: 24,
      trend: 3,
      color: "#1890ff",
      icon: <TeamOutlined />,
    },
    {
      title: "יעילות תפעולית",
      value: 92,
      suffix: "%",
      trend: 5.2,
      color: "#722ed1",
      icon: <RiseOutlined />,
    },
    {
      title: "פרויקטים פעילים",
      value: 18,
      trend: 2,
      color: "#fa8c16",
      icon: <BarChartOutlined />,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div>
        {/* Hero Section */}
        <div className="hero-section" style={{ position: "relative", zIndex: 1, marginTop: "1300px" }}>
          <Row gutter={[32, 32]} align="middle">
            <Col xs={24} lg={14}>
              <Title level={1} style={{ color: "white", marginBottom: 16, fontSize: "2.5rem" }}>
                שלום, {globalContextDetails.user?.firstName || "אורח"} {globalContextDetails.user?.lastName || ""}
              </Title>
              <Title level={3} style={{ color: "rgba(255,255,255,0.9)", marginBottom: 24, fontWeight: 400 }}>
                ברוכים הבאים למערכת BusinessMan - הדרך החכמה לנהל את העסק שלך
              </Title>
              <Paragraph style={{ color: "rgba(255,255,255,0.8)", fontSize: 16, marginBottom: 32 }}>
                נהל את העסק שלך בקלות ויעילות עם כלים מתקדמים לניהול הכנסות, הוצאות, משתמשים ודוחות.
              </Paragraph>
              <Space size="large" wrap>
                <Button
                  type="primary"
                  size="large"
                  onClick={() => navigate("/view-data")}
                  style={{
                    height: 48,
                    padding: "0 32px",
                    background: "#fa8c16",
                    borderColor: "#fa8c16",
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  צפה בנתוני העסק
                </Button>
                <Button
                  size="large"
                  onClick={() => navigate("/business-register")}
                  style={{
                    height: 48,
                    padding: "0 32px",
                    background: "rgba(255,255,255,0.1)",
                    borderColor: "rgba(255,255,255,0.3)",
                    color: "white",
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  עדכן פרטי עסק
                </Button>
              </Space>
            </Col>
            <Col xs={0} lg={10} style={{ textAlign: "center" }}>
              <div
                style={{
                  width: "100%",
                  maxWidth: 400,
                  height: 300,
                  background: "rgba(255,255,255,0.1)",
                  borderRadius: 20,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backdropFilter: "blur(10px)",
                  border: "1px solid rgba(255,255,255,0.2)",
                }}
              >
                <DashboardOutlined style={{ fontSize: 120, color: "rgba(255,255,255,0.8)" }} />
              </div>
            </Col>
          </Row>
        </div>

        {/* Stats Section */}
        <Row gutter={[24, 24]} style={{ marginBottom: 48 }}>
          {statsData.map((stat, index) => (
            <Col xs={24} sm={12} lg={6} key={index}>
              <Card className="stats-card">
                <div style={{ display: "flex", alignItems: "center", marginBottom: 16 }}>
                  <Avatar
                    size={48}
                    style={{
                      background: `${stat.color}20`,
                      color: stat.color,
                      marginLeft: 12,
                    }}
                  >
                    {stat.icon}
                  </Avatar>
                </div>
                <Statistic
                  title={stat.title}
                  value={stat.value}
                  prefix={stat.prefix}
                  suffix={stat.suffix}
                  valueStyle={{
                    color: stat.color,
                    fontSize: "2rem",
                    fontWeight: "bold",
                  }}
                />
                <div style={{ display: "flex", alignItems: "center", marginTop: 12 }}>
                  {stat.trend > 0 ? (
                    <RiseOutlined style={{ color: "#52c41a", marginLeft: 4 }} />
                  ) : (
                    <FallOutlined style={{ color: "#ff4d4f", marginLeft: 4 }} />
                  )}
                  <Text
                    style={{
                      color: stat.trend > 0 ? "#52c41a" : "#ff4d4f",
                      fontWeight: 600,
                      marginLeft: 8,
                    }}
                  >
                    {stat.trend > 0 ? "+" : ""}
                    {stat.trend}%
                  </Text>
                  <Text type="secondary">מהחודש הקודם</Text>
                </div>
              </Card>
            </Col>
          ))}
        </Row>

        {/* Quick Actions */}
        <div style={{ marginBottom: 48 }}>
          <Title level={3} style={{ textAlign: "center", marginBottom: 24 }}>
            פעולות מהירות
          </Title>
          <Row gutter={[16, 16]}>
            {quickActions.map((action, index) => (
              <Col xs={24} sm={8} key={index}>
                <Button
                  type="default"
                  size="large"
                  icon={action.icon}
                  onClick={() => navigate(action.path)}
                  block
                  style={{
                    height: 56,
                    borderRadius: 12,
                    borderWidth: 2,
                    fontWeight: 600,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  {action.title}
                </Button>
              </Col>
            ))}
          </Row>
        </div>

        {/* Main Menu Cards */}
        <div style={{ marginBottom: 48 }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Title level={3} style={{ marginBottom: 8 }}>
              ניהול העסק שלך
            </Title>
            <Text type="secondary" style={{ fontSize: 16 }}>
              כל הכלים שאתה צריך לניהול יעיל ומוצלח של העסק שלך במקום אחד
            </Text>
          </div>

          <Row gutter={[24, 24]}>
            {menuItems.map((item, index) => (
              <Col xs={24} sm={12} lg={6} key={index}>
                <Card className="feature-card" hoverable style={{ height: "100%" }} bodyStyle={{ padding: 32 }}>
                  <div className="icon-wrapper" style={{ background: `${item.color}20`, color: item.color }}>
                    {item.icon}
                  </div>
                  <Title level={4} style={{ marginBottom: 12, color: "#2d3748" }}>
                    {item.title}
                  </Title>
                  <Paragraph type="secondary" style={{ marginBottom: 24, minHeight: 48 }}>
                    {item.description}
                  </Paragraph>
                  <Button
                    type="text"
                    icon={<ArrowRightOutlined />}
                    onClick={() => navigate(item.path)}
                    style={{
                      padding: 0,
                      height: "auto",
                      color: item.color,
                      fontWeight: 600,
                    }}
                  >
                    כניסה
                  </Button>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Testimonial */}
        <Card className="testimonial-section">
          <Row gutter={[32, 32]} align="middle">
            <Col xs={24} lg={16}>
              <Title level={4} style={{ color: "#667eea", marginBottom: 16 }}>
                "מערכת BusinessMan שינתה את הדרך שבה אני מנהל את העסק שלי. הכל נגיש ויעיל."
              </Title>
              <Text type="secondary">יוסי כהן, בעלים של "טכנולוגיות מתקדמות" בע״מ</Text>
            </Col>
            <Col xs={24} lg={8} style={{ textAlign: "center" }}>
              <Button
                type="primary"
                size="large"
                onClick={() => navigate("/register-user")}
                style={{
                  height: 48,
                  padding: "0 32px",
                  fontWeight: 600,
                  marginBottom: 8,
                }}
              >
                הצטרף עכשיו
              </Button>
              <div>
                <Text type="secondary" style={{ fontSize: 12 }}>
                  הצטרפו למאות עסקים שכבר משתמשים במערכת
                </Text>
              </div>
            </Col>
          </Row>
        </Card>

        {/* Footer */}
        <div style={{ marginTop: 64, paddingTop: 32, borderTop: "1px solid #f0f0f0" }}>
          <Row justify="space-between" align="middle">
            <Col>
              <Space>
                <Avatar style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                  <DashboardOutlined />
                </Avatar>
                <div>
                  <Title level={4} style={{ margin: 0, color: "#667eea" }}>
                    BusinessMan
                  </Title>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    © 2025 BusinessMan. כל הזכויות שמורות.
                  </Text>
                </div>
              </Space>
            </Col>
            <Col>
              <Space>
                <Button type="text" size="small">
                  תנאי שימוש
                </Button>
                <Button type="text" size="small">
                  פרטיות
                </Button>
                <Button type="text" size="small">
                  צור קשר
                </Button>
              </Space>
            </Col>
          </Row>
        </div>
      </div>
    </ConfigProvider>
  )
}

export default MyHome
"use client"

import type React from "react"
import {
  Box,
  Typography,
  Paper,
  Container,
  Grid,
  Card,
  CardContent,
  ThemeProvider,
  createTheme,
  CssBaseline,
  Tabs,
  Tab,
  Divider,
  CircularProgress,
} from "@mui/material"
import {
  BarChart,
  PieChart,
  Timeline,
  Assessment,
  TrendingUp,
  TrendingDown,
  QueryStats,
} from "@mui/icons-material"
import { useContext, useEffect, useState } from "react"
import axios from "axios"
import { globalContext } from "../context/GlobalContext"
import { ProdactionReportData } from "../models/ProdactionReportData"

const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: { main: "#3f51b5" },
    secondary: { main: "#f50057" },
    background: { default: "#f5f5f5" },
  },
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 16,
          boxShadow: "0 4px 20px rgba(0, 0, 0, 0.08)",
        },
      },
    },
  },
})

const ProductionReports = () => {
  const [tabValue, setTabValue] = useState(0)
  const [reportData, setReportData] = useState<ProdactionReportData | null>(null)
  const [loading, setLoading] = useState(true)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue)
  }

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/business-report/${globalContextDetails.business_global.id}`,
          { withCredentials: true }
        )
        setReportData(data)
      } catch (error) {
        console.error("שגיאה בטעינת דוח ייצור:", error)
      } finally {
        setLoading(false)
      }
    }

    fetchReport()
  }, [])

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Box sx={{ minHeight: "100vh", background: "linear-gradient(to bottom, #f5f7ff, #ffffff)", py: 4 }}>
        <Container>
          <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
            <Box sx={{ textAlign: "center", mb: 4 }}>
              <Assessment color="primary" sx={{ fontSize: 48, mb: 2 }} />
              <Typography variant="h4" fontWeight="bold">
                דוח ייצור - {reportData?.businessName ?? "טוען..."}
              </Typography>
              <Typography variant="body1" color="text.secondary">
                צפה בביצועי הייצור של העסק שלך
              </Typography>
            </Box>

            <Tabs value={tabValue} onChange={handleTabChange} variant="fullWidth" sx={{ mb: 4 }}>
              <Tab icon={<BarChart />} label="סקירה כללית" />
              <Tab icon={<Timeline />} label="מגמות" />
              <Tab icon={<PieChart />} label="התפלגות" />
            </Tabs>

            <Divider sx={{ mb: 4 }} />

            {loading ? (
              <Box sx={{ display: "flex", justifyContent: "center", py: 10 }}>
                <CircularProgress />
              </Box>
            ) : reportData && tabValue === 0 ? (
              <Grid container spacing={3}>
                {[
                  {
                    label: "סה״כ הכנסות",
                    value: `₪${reportData.totalIncome.toLocaleString()}`,
                    icon: <TrendingUp color="success" />,
                    color: "success.light",
                  },
                  {
                    label: "סה״כ הוצאות",
                    value: `₪${reportData.totalExpenses.toLocaleString()}`,
                    icon: <TrendingDown color="error" />,
                    color: "error.light",
                  },
                  {
                    label: "רווח נקי",
                    value: `₪${reportData.netProfit.toLocaleString()}`,
                    icon: <QueryStats color="primary" />,
                    color: "primary.light",
                  },
                  {
                    label: "תזרים מזומנים",
                    value: `₪${reportData.cashFlow.toLocaleString()}`,
                    icon: <BarChart color="secondary" />,
                    color: "secondary.light",
                  },
                  {
                    label: "מספר חשבוניות",
                    value: `${reportData.invoiceCount}`,
                    icon: <Assessment color="info" />,
                    color: "info.light",
                  },
                  {
                    label: "סה״כ חיובים",
                    value: `₪${reportData.totalDebit.toLocaleString()}`,
                    icon: <TrendingDown color="warning" />,
                    color: "warning.light",
                  },
                  {
                    label: "סה״כ זיכויים",
                    value: `₪${reportData.totalCredit.toLocaleString()}`,
                    icon: <TrendingUp color="info" />,
                    color: "info.light",
                  },
                  {
                    label: "תאריך הדוח",
                    value: new Date(reportData.reportDate).toLocaleDateString("he-IL"),
                    icon: <Timeline color="disabled" />,
                    color: "grey.300",
                  },
                ].map((item, index) => (
                  <Grid item xs={12} md={6} lg={3} key={index} {...({} as any)}>
                    <Card>
                      <CardContent sx={{ p: 3 }}>
                        <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                          <Box sx={{ bgcolor: item.color, borderRadius: "50%", p: 1, mr: 2 }}>{item.icon}</Box>
                          <Typography variant="h6" fontWeight="bold">
                            {item.label}
                          </Typography>
                        </Box>
                        <Typography variant="h4" fontWeight="bold">
                          {item.value}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            ) : tabValue === 1 ? (
              <Box
                sx={{
                  height: 400,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  bgcolor: "grey.100",
                  borderRadius: 2,
                  p: 2,
                }}
              >
                <Typography variant="h6" color="text.secondary">
                  כאן יוצגו נתוני המגמות
                </Typography>
              </Box>
            ) : tabValue === 2 ? (
              <Box
                sx={{
                  height: 400,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  bgcolor: "grey.100",
                  borderRadius: 2,
                  p: 2,
                }}
              >
                <Typography variant="h6" color="text.secondary">
                  כאן תוצג התפלגות הנתונים
                </Typography>
              </Box>
            ) : (
              <Typography color="error">שגיאה בטעינת הנתונים</Typography>
            )}
          </Paper>
        </Container>
      </Box>
    </ThemeProvider>
  )
}

export default ProductionReports
"use client"

import type React from "react"

import axios from "axios"
import { useState, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import type { BusinessPostModel } from "../models/BusinessPostModel"
import { convertToBusiness } from "../utils/convertToBusiness"
import { validationSchemaBusinessRegister } from "../utils/validationSchema"
import * as Yup from "yup"
import {
  Box,
  TextField,
  Button,
  Typography,
  Paper,
  Container,
  Grid,
  Alert,
  InputAdornment,
  ThemeProvider,
  createTheme,
  CssBaseline,
  Divider,
} from "@mui/material"
import {
  Business,
  LocationOn,
  Email,
  Category,
  AttachMoney,
  MoneyOff,
  AccountBalance,
  Savings,
  CreditCard,
  Calculate,
} from "@mui/icons-material"

// Create a custom theme with RTL support and Hebrew font
const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: {
      main: "#3f51b5",
    },
    secondary: {
      main: "#f50057",
    },
    background: {
      default: "#f5f5f5",
    },
  },
  components: {
    MuiTextField: {
      styleOverrides: {
        root: {
          direction: "rtl",
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          padding: "10px 24px",
          textTransform: "none",
          fontSize: "1rem",
        },
      },
    },
  },
})

const RegisterBusinessData = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const validationSchema = validationSchemaBusinessRegister
  const globalContextDetails = useContext(globalContext)
  const [businessData, setBusinessData] = useState({
    id: 0,
    businessId: 1, // ערך ברירת מחדל
    name: "עסק לדוגמה", // ערך ברירת מחדל
    address: "כתובת לדוגמה", // ערך ברירת מחדל
    email: "example@business.com", // ערך ברירת מחדל
    businessType: "סוג עסק לדוגמה", // ערך ברירת מחדל
    income: 10000, // ערך ברירת מחדל
    expenses: 5000, // ערך ברירת מחדל
    cashFlow: 5000, // ערך ברירת מחדל
    totalAssets: 20000, // ערך ברירת מחדל
    totalLiabilities: 10000, // ערך ברירת מחדל
    netWorth: 10000,
    revenueGrowthRate: undefined,
    profitMargin: undefined,
    currentRatio: undefined,
    quickRatio: undefined,
    createdAt: undefined,
    createdBy: "",
    updatedAt: undefined,
    updatedBy: "",
    users: [],
    invoices: [],
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setBusinessData((prevData) => ({
      ...prevData,
      [name]: value,
    }))
  }

  const handleSubmit = (businessDetails: BusinessPostModel) => async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    validationSchema
      .isValid(businessDetails)
      .then(async (valid) => {
        setErrors([])
        if (valid) {
          try {
            const { data } = await axios.post<BusinessPostModel>(`${url}/api/Business`, businessDetails, { withCredentials: true })
            console.log("The data", data)
            globalContextDetails.setBusinessGlobal(convertToBusiness(data))
            console.log("globalContextDetails.business_global", globalContextDetails.business_global)
            console.log("convertToBusiness(data)", convertToBusiness(data))

            if (onSubmitSuccess) onSubmitSuccess()
          } catch (e) {
            console.log(e)
            setErrors(["שגיאה בשמירת נתוני העסק"])
          }
        } else {
          setErrors(["נא למלא את כל השדות הנדרשים"])
        }
      })
      .catch((err) => {
        console.log("Validation error:", err.errors)
        if (err instanceof Yup.ValidationError) {
          setErrors(err.errors)
        }
      })
    setErrors([])
  }

  return (
    <ThemeProvider theme={theme}>
            <div style={{marginTop: "50vh"}}></div>

      <CssBaseline />
      <Container maxWidth="md">
        <Paper
          elevation={3}
          sx={{
            p: 4,
            borderRadius: 3,
            boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
          }}
        >
          <Box sx={{ mb: 4, textAlign: "center" }}>
            <Business color="primary" sx={{ fontSize: 48, mb: 2 }} />
            <Typography variant="h4" component="h1" gutterBottom fontWeight="bold">
              רישום פרטי העסק
            </Typography>
            <Typography variant="body1" color="text.secondary">
              נא למלא את כל הפרטים הנדרשים לרישום העסק שלך
            </Typography>
            <Divider sx={{ mt: 3 }} />
          </Box>

          <Box
            component="form"
            onSubmit={handleSubmit(businessData)}
            sx={{
              display: "flex",
              flexDirection: "column",
              gap: 3,
            }}
          >
            <Typography variant="h6" fontWeight="bold" color="primary">
              פרטים בסיסיים
            </Typography>

            <Grid container spacing={2}>
              <Grid item xs={12} md={6} {...({} as any)}>
                <TextField
                  fullWidth
                  label="מזהה ייחודי לעסק"
                  name="businessId"
                  type="number"
                  value={businessData.businessId}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Business color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6} {...({} as any)}>
                <TextField
                  fullWidth
                  label="שם העסק"
                  name="name"
                  value={businessData.name}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Business color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6} {...({} as any)}>
                <TextField
                  fullWidth
                  label="כתובת העסק"
                  name="address"
                  value={businessData.address}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <LocationOn color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6} {...({} as any)}>
                <TextField
                  fullWidth
                  label="אימייל של העסק"
                  name="email"
                  type="email"
                  value={businessData.email}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Email color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} {...({} as any)}>
                <TextField
                  fullWidth
                  label="סוג העסק"
                  name="businessType"
                  value={businessData.businessType}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Category color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
            </Grid>

            <Divider sx={{ my: 2 }} />

            <Typography variant="h6" fontWeight="bold" color="primary">
              נתונים פיננסיים
            </Typography>

            <Grid container spacing={2}>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="הכנסות העסק"
                  name="income"
                  type="number"
                  value={businessData.income}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <AttachMoney color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="הוצאות העסק"
                  name="expenses"
                  type="number"
                  value={businessData.expenses}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <MoneyOff color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="תזרים מזומנים"
                  name="cashFlow"
                  type="number"
                  value={businessData.cashFlow}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <AccountBalance color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="סך הנכסים"
                  name="totalAssets"
                  type="number"
                  value={businessData.totalAssets}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Savings color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="סך ההתחייבויות"
                  name="totalLiabilities"
                  type="number"
                  value={businessData.totalLiabilities}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <CreditCard color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4} {...({} as any)}>
                <TextField
                  fullWidth
                  label="שווי נקי"
                  name="netWorth"
                  type="number"
                  value={businessData.netWorth}
                  onChange={handleChange}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <Calculate color="action" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
            </Grid>

            <Button
              type="submit"
              variant="contained"
              size="large"
              sx={{
                mt: 3,
                py: 1.5,
                fontWeight: "bold",
                fontSize: "1.1rem",
                boxShadow: "0 4px 12px rgba(63, 81, 181, 0.4)",
              }}
            >
              שמור פרטי עסק
            </Button>

            {errors.length > 0 && (
              <Box sx={{ width: "100%", mt: 2 }}>
                {errors.map((error, index) => (
                  <Alert key={index} severity="error" sx={{ mb: 1 }}>
                    {error}
                  </Alert>
                ))}
              </Box>
            )}
          </Box>
        </Paper>
      </Container>
    </ThemeProvider>
  )
}

export default RegisterBusinessData
"use client"
import { useState } from "react"
import axios from "axios"
import {
  Upload,
  Button,
  Typography,
  Card,
  Alert,
  Progress,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
} from "antd"
import {
  CloudUploadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  InboxOutlined,
  FileOutlined,
  DeleteOutlined,
  EyeOutlined,
  DownloadOutlined,
  RocketOutlined,
} from "@ant-design/icons"
import type { UploadProps } from "antd"

const { Title, Text } = Typography
const { Dragger } = Upload

const UploadFiles = () => {
  const [file, setFile] = useState<File | null>(null)
  const [message, setMessage] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState(0)
  const [uploadComplete, setUploadComplete] = useState(false)
  const [dragActive, setDragActive] = useState(false)

  const url = import.meta.env.VITE_API_URL

  const uploadProps: UploadProps = {
    name: "fileUpload",
    multiple: false,
    accept: ".jpg,.png,.pdf,.docx,.txt",
    beforeUpload: (file) => {
      setFile(file)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      return false // Prevent automatic upload
    },
    onRemove: () => {
      setFile(null)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      setProgress(0)
    },
    // Removed onDragEnter as it is not a valid property of UploadProps
    // onDragLeave: () => setDragActive(false),
    onDrop: () => setDragActive(false),
  }

  const handleSubmit = async () => {
    if (!file) {
      setError("יש לבחור קובץ לפני השליחה")
      return
    }

    setUploading(true)
    setProgress(0)

    const formData = new FormData()
    formData.append("fileUpload", file)

    try {
      // Simulate realistic progress
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval)
            return 90
          }
          return prev + Math.random() * 15
        })
      }, 200)

      const response = await axios.post(`${url}/FileUpload/upload`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      })

      clearInterval(progressInterval)
      setProgress(100)

      setTimeout(() => {
        setMessage(response.data.message || "הקובץ הועלה בהצלחה")
        setError(null)
        setUploading(false)
        setUploadComplete(true)
      }, 800)
    } catch (err: any) {
      setProgress(0)
      setUploading(false)
      const msg = err.response?.data || "אירעה שגיאה בהעלאת הקובץ"
      setError(msg.message || msg)
      setMessage(null)
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  const getFileIcon = (fileName: string) => {
    const extension = fileName.split(".").pop()?.toLowerCase()
    switch (extension) {
      case "pdf":
        return <FileOutlined style={{ color: "#ff4d4f" }} />
      case "jpg":
      case "jpeg":
      case "png":
        return <FileOutlined style={{ color: "#52c41a" }} />
      case "docx":
      case "doc":
        return <FileOutlined style={{ color: "#1890ff" }} />
      default:
        return <FileOutlined style={{ color: "#666" }} />
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div className="upload-container" style={{ maxWidth: 900, margin: "0 auto", marginTop: "45vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              className="upload-avatar"
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <RocketOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" , textAlign:"center"}}>
              העלאת קבצים וניתוח נתונים לעסק עם AI
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              גרור קבצים או לחץ לבחירה - תמיכה מלאה בכל סוגי הקבצים
            </Text>

            <Divider />
          </div>

          <Row gutter={[24, 24]}>
            <Col xs={24} lg={16}>
              <Dragger
                {...uploadProps}
                className={`upload-dragger ${dragActive ? "drag-active" : ""}`}
                style={{
                  background: dragActive
                    ? "linear-gradient(145deg, #f0f7ff, #e6f4ff)"
                    : "linear-gradient(145deg, #f8fafc, #ffffff)",
                  border: dragActive ? "3px dashed #1890ff" : "2px dashed #667eea",
                  borderRadius: 20,
                  padding: "60px 20px",
                  marginBottom: 24,
                  position: "relative",
                  overflow: "hidden",
                  transition: "all 0.3s ease",
                }}
              >
                <div style={{ position: "relative", zIndex: 2, display:"flex", alignItems:"center", justifyContent:"center", flexDirection:"column" }}>
                  <p className="ant-upload-drag-icon">
                    <InboxOutlined
                      style={{
                        fontSize: 80,
                        color: dragActive ? "#1890ff" : "#667eea",
                        transition: "all 0.3s ease",
                      }}
                    />
                  </p>
                  <Title
                    level={3}
                    style={{
                      color: "#2d3748",
                      marginBottom: 12,
                      transition: "all 0.3s ease",
                    }}
                  >
                    {dragActive ? "שחרר כאן!" : "גרור קובץ לכאן או לחץ לבחירה"}
                  </Title>
                  <Text type="secondary" style={{ fontSize: 16, display: "block", marginBottom: 16 }}>
                    תומך בקבצים מסוג JPG, PNG, PDF, DOCX, TXT
                  </Text>
                  <Text type="secondary" style={{ fontSize: 14 }}>
                    גודל מקסימלי: 10MB
                  </Text>
                </div>
              </Dragger>

              {file && (
                <Card
                  size="small"
                  style={{
                    marginBottom: 24,
                    background: "linear-gradient(145deg, #f0f9ff, #ffffff)",
                    border: "1px solid #e6f4ff",
                    borderRadius: 12,
                  }}
                >
                  <Row align="middle" gutter={[16, 16]}>
                    <Col flex="auto">
                      <Space>
                        {getFileIcon(file.name)}
                        <div>
                          <Text strong>{file.name}</Text>
                          <br />
                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {formatFileSize(file.size)}
                          </Text>
                        </div>
                      </Space>
                    </Col>
                    <Col>
                      <Space>
                        <Button type="text" icon={<EyeOutlined />} size="small" style={{ color: "#1890ff" }}>
                          תצוגה מקדימה
                        </Button>
                        <Button
                          type="text"
                          icon={<DeleteOutlined />}
                          size="small"
                          danger
                          onClick={() => {
                            setFile(null)
                            setMessage(null)
                            setError(null)
                            setUploadComplete(false)
                          }}
                        >
                          הסר
                        </Button>
                      </Space>
                    </Col>
                  </Row>
                </Card>
              )}

              {uploading && (
                <Card
                  size="small"
                  style={{
                    marginBottom: 24,
                    background: "linear-gradient(145deg, #fff7e6, #ffffff)",
                    border: "1px solid #ffd591",
                  }}
                >
                  <Space direction="vertical" style={{ width: "100%" }}>
                    <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                      <Text strong>מעלה קובץ...</Text>
                      <Text style={{ color: "#fa8c16" }}>{Math.round(progress)}%</Text>
                    </div>
                    <Progress
                      percent={progress}
                      strokeColor={{
                        "0%": "#667eea",
                        "50%": "#764ba2",
                        "100%": "#52c41a",
                      }}
                      strokeWidth={8}
                      style={{ marginBottom: 8 }}
                      showInfo={false}
                    />
                    <Text type="secondary" style={{ fontSize: 12 }}>
                      {progress < 30 && "מתחיל העלאה..."}
                      {progress >= 30 && progress < 60 && "מעלה נתונים..."}
                      {progress >= 60 && progress < 90 && "מעבד קובץ..."}
                      {progress >= 90 && "משלים העלאה..."}
                    </Text>
                  </Space>
                </Card>
              )}
            </Col>

            <Col xs={24} lg={8}>
              <Card title="פעולות מהירות" size="small" style={{ marginBottom: 24 }}>
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Button
                    type="primary"
                    size="large"
                    disabled={!file || uploading}
                    loading={uploading}
                    icon={uploadComplete ? <CheckCircleOutlined /> : <CloudUploadOutlined />}
                    onClick={handleSubmit}
                    block
                    style={{
                      height: 48,
                      fontWeight: 600,
                      fontSize: 16,
                      background: uploadComplete ? "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)" : undefined,
                    }}
                  >
                    {uploading ? "מעלה..." : uploadComplete ? "הועלה בהצלחה!" : "העלה קובץ"}
                  </Button>

                  {uploadComplete && (
                    <Button
                      type="default"
                      size="large"
                      icon={<DownloadOutlined />}
                      block
                      style={{
                        height: 40,
                        fontWeight: 600,
                        borderWidth: 2,
                      }}
                    >
                      הורד קובץ
                    </Button>
                  )}
                </Space>
              </Card>

              <Card title="מידע שימושי" size="small">
                <Space direction="vertical" style={{ width: "100%" }}>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>העלאה מאובטחת</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>גיבוי אוטומטי</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>סריקת וירוסים</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>דחיסה אוטומטית</Text>
                  </div>
                </Space>
              </Card>
            </Col>
          </Row>

          {message && (
            <Alert
              message="הצלחה!"
              description={
                <Space direction="vertical">
                  <Text>{message}</Text>
                  <Text type="secondary">הקובץ נשמר בבטחה במערכת</Text>
                </Space>
              }
              type="success"
              showIcon
              icon={<CheckCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #b7eb8f",
                background: "linear-gradient(145deg, #f6ffed, #ffffff)",
              }}
              action={
                <Button size="small" type="primary" ghost>
                  צפה בקובץ
                </Button>
              }
            />
          )}

          {error && (
            <Alert
              message="שגיאה!"
              description={error}
              type="error"
              showIcon
              icon={<ExclamationCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #ffccc7",
                background: "linear-gradient(145deg, #fff2f0, #ffffff)",
              }}
              action={
                <Button size="small" danger ghost>
                  נסה שוב
                </Button>
              }
            />
          )}
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UploadFiles
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import type { AdminRegister } from "../models/AdminRegister"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, UserOutlined, LoginOutlined } from "@ant-design/icons"
import CenteredLayout from "./CenteredLayout"

const { Title, Text, Link } = Typography

const UserLogin = () => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserLogin
  const [userLogin, setUserLogin] = useState<AdminRegister>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const { setUser } = useContext(globalContext)

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(userLogin)
      setErrors([])

      if (valid) {
        const { data } = await axios.post<any>(`${url}/Auth/user-login`, userLogin, { withCredentials: true })
        setUser(data.user)
        nav("/")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      console.log(e)
      setErrors(["שם משתמש או סיסמה שגויים"])
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (field: string, value: string) => {
    setUserLogin((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{marginTop: "50vh"}}></div>
      <CenteredLayout >
        <Card className="login-form" style={{ maxWidth: 500, width: "100%" }}>
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" , textAlign:"center"}}>
              כניסת משתמש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              ברוכים הבאים למערכת ניהול העסק
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item label="אימייל" required style={{ marginBottom: 20 }}>
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size="large"
                value={userLogin.email}
                onChange={(e) => handleChange("email", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Form.Item label="סיסמא" required style={{ marginBottom: 24 }}>
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size="large"
                value={userLogin.password}
                onChange={(e) => handleChange("password", e.target.value)}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: 16,
                marginBottom: 16,
              }}
            >
              התחבר
            </Button>

            <Divider>
              <Text type="secondary">או</Text>
            </Divider>

            <Button
              type="default"
              size="large"
              block
              onClick={() => nav("/register-user")}
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                marginBottom: 16,
                borderWidth: 2,
              }}
            >
              הירשם עכשיו
            </Button>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary">מנהל?</Text>
                <Link href="/admin-login" style={{ fontWeight: 600 }}>
                  התחבר כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </CenteredLayout>
    </ConfigProvider>
  )
}

export default UserLogin
import React, { useEffect, useState } from "react"
import {
  Box,
  Typography,
  Paper,
  Container,
  ThemeProvider,
  createTheme,
  CssBaseline,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Chip,
  Divider,
} from "@mui/material"
import {
  Person,
  Edit,
  Delete,
  Add,
  AdminPanelSettings,
  PersonOutline,
} from "@mui/icons-material"
import axios from "axios"
import { useNavigate } from "react-router-dom"
const url = import.meta.env.VITE_API_URL

// טיפוס לנתוני המשתמש
interface User {
  id: number
  firstName: string
  lastName: string
  email: string
  phone: string
  role: number // 0 = רגיל, 1 = מנהל
}

// ערכת נושא עם RTL וגופן עברי
const theme = createTheme({
  direction: "rtl",
  typography: {
    fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
  },
  palette: {
    primary: { main: "#3f51b5" },
    secondary: { main: "#f50057" },
    background: { default: "#f5f5f5" },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          textTransform: "none",
        },
      },
    },
  },
})

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([])
  const nav = useNavigate()

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const {data} = await axios.get<User[]>(`${url}/api/User`)
        setUsers(data)
      } catch (err) {
        console.error("שגיאה בטעינת משתמשים:", err)
      }
    }
    fetchUsers()
  }, [])

  const handleDelete = async (id: number) => {
    console.log(id);
    
    if (window.confirm("האם אתה בטוח שברצונך למחוק את המשתמש?")) {
      await axios.delete(`${url}/api/User/${id}`)
      try {
        const res = await axios.delete(`${url}/api/User/${id}`);
        if (res.status >= 200 && res.status < 300) {
          setUsers((prev) => prev.filter((user) => user.id !== id));
        } else {
          alert("מחיקה נכשלה");
        }
      } catch (err) {
        console.error("שגיאה במחיקה:", err);
      }
      }
    }
  
    const handleEdit = (id: number) => {
      nav(`/edit-user/${id}`)
    }

    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Box
          sx={{
            minHeight: "100vh",
            background: "linear-gradient(to bottom, #f5f7ff, #ffffff)",
            py: 4,
          }}
        >
          <Container>
            <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  mb: 4,
                }}
              >
                <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                  <Person color="primary" sx={{ fontSize: 40 }} />
                  <Box>
                    <Typography variant="h4" fontWeight="bold">
                      ניהול משתמשים
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      צפה, הוסף, ערוך או מחק משתמשים במערכת
                    </Typography>
                  </Box>
                </Box>

                <Button
                  variant="contained"
                  startIcon={<Add />}
                  sx={{ py: 1, px: 3, fontWeight: "bold" }}
                  onClick={() => nav("/register-user")}
                >
                  הוסף משתמש חדש
                </Button>
              </Box>

              <Divider sx={{ mb: 4 }} />

              <TableContainer component={Paper} sx={{ boxShadow: "none", borderRadius: 2 }}>
                <Table sx={{ minWidth: 650 }} aria-label="users table">
                  <TableHead sx={{ bgcolor: "primary.main" }}>
                    <TableRow>
                      {["מזהה", "שם פרטי", "שם משפחה", "אימייל", "טלפון", "תפקיד", "פעולות"].map((col) => (
                        <TableCell key={col} align="right" sx={{ color: "white", fontWeight: "bold" }}>
                          {col}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {users.map((user) => (
                      <TableRow
                        key={user.id}
                        sx={{
                          "&:last-child td": { border: 0 },
                          "&:hover": { bgcolor: "action.hover" },
                        }}
                      >
                        <TableCell align="right">{user.id}</TableCell>
                        <TableCell align="right">{user.firstName}</TableCell>
                        <TableCell align="right">{user.lastName}</TableCell>
                        <TableCell align="right">{user.email}</TableCell>
                        <TableCell align="right">{user.phone}</TableCell>
                        <TableCell align="right">
                          <Chip
                            icon={user.role === 1 ? <AdminPanelSettings /> : <PersonOutline />}
                            label={user.role === 1 ? "מנהל" : "משתמש רגיל"}
                            color={user.role === 1 ? "primary" : "default"}
                            variant={user.role === 1 ? "filled" : "outlined"}
                            size="small"
                          />
                        </TableCell>
                        <TableCell align="right">
                          <Box sx={{ display: "flex", gap: 1, justifyContent: "flex-end" }}>
                            <IconButton color="primary" size="small" onClick={() => handleEdit(user.id)}>
                              <Edit fontSize="small" />
                            </IconButton>
                            <IconButton color="error" size="small" onClick={() => handleDelete(user.id)}>
                              <Delete fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Paper>
          </Container>
        </Box>
      </ThemeProvider>
    )
  }

  export default UserManagement
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { convertToUser } from "../utils/converToUser"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  TeamOutlined,
  UserAddOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"

const { Title, Text, Link } = Typography

const UserRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const { setUser } = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL
  const [myUser, setMyUser] = useState<UserPostModel>({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    phone: "",
    role: 0,
    idNumber: "",
  })

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(myUser)
      setErrors([])

      if (valid) {
        const { data } = await axios.post<UserPostModel>(`${url}/Auth/user-register`, myUser, { withCredentials: true })
        setUser(convertToUser(data))

        if (onSubmitSuccess) onSubmitSuccess()
        nav("/")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      console.log(e)
      setErrors(["שגיאה ברישום המשתמש"])
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto" , marginTop: "70vh"}}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserAddOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign:"center" }}>
              הרשמת משתמש חדש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              נא למלא את כל הפרטים הנדרשים
            </Text>

            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא" required>
                  <Input.Password
                    prefix={<LockOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    prefix={<TeamOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<UserAddOutlined />}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  הירשם
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav("/user-login")}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    borderWidth: 2,
                  }}
                >
                  חזרה לכניסה
                </Button>
              </Col>
            </Row>

            <div style={{ textAlign: "center", marginTop: 24 }}>
              <Text type="secondary">
                כבר יש לך חשבון?{" "}
                <Link href="/user-login" style={{ fontWeight: 600 }}>
                  התחבר כאן
                </Link>
              </Text>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserRegister
