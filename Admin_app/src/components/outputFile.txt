"use client"

import { useState, useEffect, useContext } from "react"
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom"
import {
  Layout,
  Menu,
  Typography,
  Avatar,
  Space,
  Drawer,
  ConfigProvider,
  theme as antTheme,
} from "antd"
import {
  MenuOutlined,
  UserAddOutlined,
  BuildOutlined,
  BankOutlined,
  BarChartOutlined,
  CrownOutlined,
  DollarOutlined,
  EyeOutlined,
  LoginOutlined,
  TeamOutlined,
  UploadOutlined,
  CloudDownloadOutlined,
} from "@ant-design/icons"
import { useMediaQuery } from "react-responsive"
import "./App.css"

import AdminLogin from "./components/AdminLogin"
import BusinessAndAdmin from "./components/BusinessAndAdmin"
import ProductionReports from "./components/ProductionReports"
import UploadFiles from "./components/UploadFiles"
import UserLogin from "./components/UserLogin"
import UserRegister from "./components/UserRegister"
import GlobalContext, { globalContext } from "./context/GlobalContext"
import { Home } from "@mui/icons-material"
import MyHome from "./components/MyHome"
import EditUserPage from "./components/EditUserPage"
import BusinessFiles from "./components/BusinessFiles"
import AccountTransactions from "./components/AccountTransactions"
import DataViewing from "./components/DataViweing"
import AdminRoute from "./components/AdminRoute"
import RegisterBusinessData from "./components/RegisterBusinessData"
import UserManagemet from "./components/UserManagemet"
import ContactUs from "./components/ContactUs"
import TermsOfService from "./components/TermsOfService"
import PrivacyPolicy from "./components/PrivacyPolicy"

const { Header, Sider, Content } = Layout
const { Title } = Typography

const navItems = [
  { key: "/", label: "בית", icon: <Home />, path: "/" },
  { key: "/register-user", label: "רישום משתמש", icon: <UserAddOutlined />, path: "/register-user" },
  { key: "/user-login", label: "כניסת משתמש", icon: <LoginOutlined />, path: "/user-login" },
  { key: "/admin-login", label: "כניסת מנהל", icon: <CrownOutlined />, path: "/admin-login" },
  { key: "/business-files", label: "קבצי העסק", icon: <CloudDownloadOutlined />, path: "/business-files" },
  { key: "/upload-file", label: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
  { key: "/view-data", label: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
  { key: "/user-management", label: "משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  { key: "/production-reports", label: 'דו"ח ייצור', icon: <BarChartOutlined />, path: "/production-reports" },
  { key: "/account-transactions", label: "תנועות בחשבון", icon: <DollarOutlined />, path: "/account-transactions" },
  {
    key: "/register-admin&business",
    label: "רישום עסק ומנהל חדש",
    icon: <BankOutlined />,
    path: "/register-admin&business",
  },
]

// Global colors:
export const orange = "#fa8c16"
export const blue = "#1677ff"
export const green = "#52c41a"
export const purple = "#722ed1"

function ResponsiveDrawer() {
  const [collapsed, setCollapsed] = useState(false)
  const [mobileOpen, setMobileOpen] = useState(false)
  const location = useLocation()
  const isMobile = useMediaQuery({ maxWidth: 768 })
  const isTablet = useMediaQuery({ maxWidth: 1024, minWidth: 769 })
  const globalContextDetails = useContext(globalContext)

  const [pageTitle, setPageTitle] = useState("")

  // התאמה דינמית לגודל מסך
  useEffect(() => {
    if (isMobile) {
      setCollapsed(true)
    } else if (isTablet) {
      setCollapsed(true)
    } else {
      setCollapsed(false)
    }
  }, [isMobile, isTablet])

  useEffect(() => {
    const routeTitles: { [key: string]: string } = {
      "/": "דף הבית",
      "/register-user": "רישום משתמש",
      "/user-login": "כניסת משתמש",
      "/admin-login": "כניסת מנהל",
      "/business-files": "קבצי העסק",
      "/upload-file": "העלאת קבצים",
      "/view-data": "צפייה בנתונים",
      "/user-management": "ניהול משתמשים",
      "/production-reports": 'דו"ח ייצור',
      "/account-transactions": "תנועות חשבון",
      "/register-admin&business": "רישום עסק ומנהל",
      "/concat-us": "צור קשר",
      "/private-policy": "פרטיות",
      "/term-of-service": "תנאי שימוש"
    }

    if (location.pathname.startsWith("/edit-user/")) {
      setPageTitle("עריכת משתמש")
    } else {
      setPageTitle(routeTitles[location.pathname] || "עמוד לא מזוהה")
    }

  }, [location.pathname, globalContextDetails.user.firstName])

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen)
  }

  const menuItems = navItems.map((item) => ({
    key: item.key,
    icon: item.icon,
    label: (
      <Link to={item.path} onClick={(e) => e.stopPropagation()}>
        {item.label}
      </Link>
    ),
  }))

  const siderContent = (
    <div
      style={{
        height: "100%",
        display: "flex",
        flexDirection: "column",
        direction: "rtl",
        width: "100%",
      }}
    >
      <div
        className="logo-section"
        style={{
          padding: collapsed ? "16px 8px" : "24px 16px",
          borderBottom: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column",
          minHeight: collapsed ? 64 : 88,
        }}
      >
        <Avatar
          size={collapsed ? 32 : 48}
          className="logo-avatar"
          style={{
            background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            marginBottom: collapsed ? 0 : 8,
          }}
        >
          <BuildOutlined />
        </Avatar>
        {!collapsed && (
          <Title level={4} className="logo-title" style={{ margin: "8px 0 0 0", color: blue }}>
            BusinessMan
          </Title>
        )}
      </div>

      <Menu
        mode="inline"
        selectedKeys={[location.pathname]}
        className="sidebar-menu"
        style={{
          border: "none",
          flex: 1,
          padding: "8px",
          direction: "rtl",
          backgroundColor: '#7354af0f',
          // overflowY: "auto",
        }}
        items={menuItems}
        onClick={(e) => {
          e.domEvent.stopPropagation()
          if (isMobile) setMobileOpen(false)
        }}
      />

      <div
        style={{
          padding: collapsed ? "8px" : "16px",
          borderTop: "1px solid #f0f0f0",
          textAlign: "center",
          direction: "rtl",
        }}
      >
        <Typography.Text type="secondary" style={{ fontSize: collapsed ? "10px" : "12px" }}>
          © 2025 BusinessMan
        </Typography.Text>
      </div>
    </div>
  )

  // חישוב רוחב דינמי
  const siderWidth = collapsed ? 80 : 280
  const headerWidth = isMobile ? "100%" : `calc(100% - ${siderWidth}px)`
  const contentWidth = isMobile ? "100%" : `calc(100% - ${siderWidth}px)`
  const marginRight = isMobile ? 0 : siderWidth

  return (
    <ConfigProvider
      direction="rtl"
      theme={{
        algorithm: antTheme.defaultAlgorithm,
        token: {
          colorPrimary: blue,
          borderRadius: 10,
          fontFamily: '"Assistant", "Rubik", "Heebo", sans-serif',
        },
      }}
    >
      <Layout style={{ minHeight: "100vh", height: "100vh", width: "100%", direction: "rtl"}}>
        {!isMobile && (
          <Sider
            trigger={null}
            collapsible
            collapsed={collapsed}
            width={280}
            collapsedWidth={80}
            className="desktop-sider"
            style={{
              background: "#ffffff",
              position: "fixed",
              height: "100vh",
              right: 0,
              top: 0,
              zIndex: 1001,
              boxShadow: "-2px 0 8px rgba(0, 0, 0, 0.05)",
              overflowY: "auto",
              overflowX: "hidden",
            }}
          >
            {siderContent}
          </Sider>
        )}

        {isMobile && (
          <Drawer
            title={
              <Space style={{ direction: "rtl" }}>
                <Avatar style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                  <BuildOutlined />
                </Avatar>
                <span>BusinessMan</span>
              </Space>
            }
            placement="right"
            onClose={handleDrawerToggle}
            open={mobileOpen}
            width={280}
            className="mobile-drawer"
            style={{ padding: 0, direction: "rtl" }}
          >
            <Menu
              mode="inline"
              selectedKeys={[location.pathname]}
              style={{ border: "none", direction: "rtl" }}
              items={menuItems}
              onClick={handleDrawerToggle}
            />
          </Drawer>
        )}

        <Layout
          className={`main-layout ${collapsed ? "collapsed" : ""}`}
          style={{
            marginRight,
            width: contentWidth,
            height: "100vh",
            direction: "rtl",
            // overflow: "hidden",
          }}
        >
          <Header
            style={{
              background: "#fff",
              padding: isMobile ? "0 16px" : "0 24px",
              boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              flexDirection: "row-reverse",
              position: "fixed",
              top: 0,
              zIndex: 1000,
              height: "64px",
              width: headerWidth,
              right: marginRight,
            }}
          >
            <Space
              size={isMobile ? "small" : "middle"}
              style={{
                alignItems: "center",
                flexDirection: "row-reverse",
                flex: 1,
                justifyContent: "space-between",
                width: "100%",
              }}
            >
              {/* כותרת העמוד */}
              {!isMobile && (
                <Title level={5} style={{ margin: 0, color: "#444", flex: 1, textAlign: "center" }}>
                  {pageTitle}
                </Title>
              )}

              {/* כפתור כניסה/יציאה מהתפריט הצידי */}
              {!isMobile && (
                <MenuOutlined
                  style={{
                    fontSize: "18px",
                    cursor: "pointer",
                    color: blue,
                    marginLeft: "16px",
                  }}
                  onClick={() => setCollapsed(!collapsed)}
                />
              )}

            </Space>
          </Header>

          <Content
            style={{
              margin: 0,
              padding: isMobile ? "80px 16px 16px 16px" : "88px 24px 24px 24px",
              background: "#ffffff",
              minHeight: "100vh",
              direction: "rtl",
              // overflowY: "auto",
              // overflowX: "hidden",
            }}
          >
            <Routes>
              <Route path="/" element={<MyHome />} />
              <Route path="/register-user" element={<UserRegister />} />
              <Route path="/user-login" element={<UserLogin />} />
              <Route path="/admin-login" element={<AdminLogin />} />
              <Route path="/upload-file" element={<UploadFiles />} />
              <Route path="/register-admin&business" element={<BusinessAndAdmin />} />
              <Route path="/edit-user/:id" element={<EditUserPage />} />
              <Route path="/concat-us" element={<ContactUs />} />
              <Route path="/term-of-service" element={<TermsOfService />} />
              <Route path="/private-policy" element={<PrivacyPolicy />} />

              <Route
                path="/production-reports"
                element={
                  <AdminRoute>
                    <ProductionReports />
                  </AdminRoute>
                }
              />
              <Route
                path="/business-files"
                element={
                  <AdminRoute>
                    <BusinessFiles />
                  </AdminRoute>
                }
              />
              <Route
                path="/view-data"
                element={
                  <AdminRoute>
                    <DataViewing />
                  </AdminRoute>
                }
              />
              <Route
                path="/user-management"
                element={
                  <AdminRoute>
                    <UserManagemet />
                  </AdminRoute>
                }
              />
              <Route
                path="/business-register"
                element={
                  <AdminRoute>
                    <RegisterBusinessData />
                  </AdminRoute>
                }
              />
              <Route
                path="/account-transactions"
                element={
                  <AdminRoute>
                    <AccountTransactions />
                  </AdminRoute>
                }
              />
            </Routes>
          </Content>
        </Layout>
      </Layout>
    </ConfigProvider>
  )
}

export default function App() {


  return (
    <Router>
      <GlobalContext>
        <ResponsiveDrawer />
      </GlobalContext>
    </Router>
  )
}

import React, { useState, useEffect, useContext } from "react"
import {
  Form,
  Input,
  InputNumber,
  Button,
  Select,
  Row,
  Col,
  message,
  Alert,
  Typography,
  Card,
  Table,
  Space,
  Statistic,
  Tag,
  Tabs,
  Badge,
  Tooltip,
  DatePicker,
  Empty,
  Avatar,
  Grid,
  FloatButton,
} from "antd"
import {
  DollarOutlined,
  PlusOutlined,
  HistoryOutlined,
  CalculatorOutlined,
  FileTextOutlined,
  TagOutlined,
  UserOutlined,
  ReloadOutlined,
  ExportOutlined,
  ReconciliationOutlined,
} from "@ant-design/icons"
import type { ColumnsType } from "antd/es/table"
import axios from "axios"
import { globalContext } from "../context/GlobalContext"
import { InvoiceDto } from "../models/InvoiceDto"
import dayjs from "dayjs"
import { TrendingUpOutlined, TrendingDownOutlined } from "@mui/icons-material"
import { InvoiceType } from "../models/Invoices"

const { Option } = Select
const { Text, Title } = Typography
const { RangePicker } = DatePicker
const { useBreakpoint } = Grid

interface Totals {
  debit: number
  credit: number
}

const transactionTypes = [
  { key: "Income", label: "הכנסה", color: "#52c41a", icon: <TrendingUpOutlined /> },
  { key: "Expense", label: "הוצאה", color: "#ff4d4f", icon: <TrendingDownOutlined /> },
  { key: "AssetIncrease", label: "הגדלת נכסים", color: "#1890ff", icon: <TrendingUpOutlined /> },
  { key: "AssetDecrease", label: "הקטנת נכסים", color: "#fa8c16", icon: <TrendingDownOutlined /> },
  { key: "LiabilityIncrease", label: "הגדלת התחייבויות", color: "#722ed1", icon: <TrendingUpOutlined /> },
  { key: "LiabilityDecrease", label: "הקטנת התחייבויות", color: "#eb2f96", icon: <TrendingDownOutlined /> },
  { key: "EquityIncrease", label: "הגדלת הון עצמי", color: "#13c2c2", icon: <TrendingUpOutlined /> },
  { key: "EquityDecrease", label: "הקטנת הון עצמי", color: "#faad14", icon: <TrendingDownOutlined /> },
  { key: "Revenue", label: "הכנסות נוספות", color: "#52c41a", icon: <DollarOutlined /> },
  { key: "CostOfGoodsSold", label: "עלות סחורה", color: "#ff7a45", icon: <CalculatorOutlined /> },
  { key: "OtherIncome", label: "הכנסה אחרת", color: "#36cfc9", icon: <TrendingUpOutlined /> },
  { key: "OtherExpense", label: "הוצאה אחרת", color: "#ff85c0", icon: <TrendingDownOutlined /> },
]

const AccountTransactions: React.FC = () => {
  const globalContextDetails = useContext(globalContext)
  const [form] = Form.useForm()
  const [loading, setLoading] = useState<boolean>(false)
  const [transactionsLoading, setTransactionsLoading] = useState<boolean>(false)
  const [transactions, setTransactions] = useState<InvoiceDto[]>([])
  const [filteredTransactions, setFilteredTransactions] = useState<InvoiceDto[]>([])
  const [success, setSuccess] = useState<boolean>(false)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<string>("1")
  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs] | null>(null)
  const [selectedType, setSelectedType] = useState<InvoiceType | undefined>(undefined)

  const url = import.meta.env.VITE_API_URL
  const screens = useBreakpoint()

  const [totals, setTotals] = useState<Totals>({
    debit: 0,
    credit: 0,
  })

  const user = {
    id: globalContextDetails.user.id,
    firstName: globalContextDetails.user.firstName,
    lastName: globalContextDetails.user.lastName,
    businessId: globalContextDetails.business_global.id,
  }

  const getTransactionTypeInfo = (type: string) => {
    return transactionTypes.find(t => t.key === type) ||
      { key: type, label: type, color: "#8c8c8c", icon: <FileTextOutlined /> }
  }

  const fetchTotals = async (): Promise<void> => {
    try {
      const { data } = await axios.get(
        `${url}/api/Invoice/totals/${user.businessId}`,
        { withCredentials: true }
      )
      setTotals({ debit: data.totalDebit, credit: data.totalCredit })
    } catch (err) {
      console.error("Failed to fetch totals:", err)
      message.error("שגיאה בטעינת הסכומים")
    }
  }

  const GetAllTransactions = async (): Promise<void> => {
    setTransactionsLoading(true)
    try {
      const { data } = await axios.get<InvoiceDto[]>(
        `${url}/api/Invoice/my-files`,
        { withCredentials: true }
      )
      setTransactions(data)
      setFilteredTransactions(data)
      message.success(`נטענו ${data.length} תנועות`)
    } catch (err) {
      console.error("Failed to fetch transactions:", err)
      message.error("אירעה שגיאה בעת טעינת התנועות.")
    } finally {
      setTransactionsLoading(false)
    }
  }

  const handleFinish = async (values: any): Promise<void> => {
    setLoading(true)
    setSuccess(false)
    setError(null)

    if (!values.amount || values.amount <= 0) {
      setError("נא להזין סכום תקין הגדול מאפס")
      setLoading(false)
      return
    }

    const invoiceToSend: Partial<InvoiceDto> = {
      id: 0,
      amount: values.amount,
      invoiceDate: new Date(),
      status: 1,
      notes: values.description ?? "",
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: `${user.firstName} ${user.lastName}`,
      updatedBy: `${user.firstName} ${user.lastName}`,
      invoicePath: "",
      userId: user.id,
      businessId: user.businessId ?? 0,
      type: values.transactionType,
    }

    try {
      await axios.post(`${url}/api/Invoice`, invoiceToSend, {
        withCredentials: true,
      })
      setSuccess(true)
      form.resetFields()
      message.success("התנועה נוספה בהצלחה!")
      await fetchTotals()
      if (activeTab === "2") {
        await GetAllTransactions()
      }
    } catch (err) {
      setError("אירעה שגיאה בשמירת התנועה.")
    } finally {
      setLoading(false)
    }
  }

  const handleFilter = (): void => {
    let filtered = [...transactions]

    if (dateRange) {
      filtered = filtered.filter(transaction => {
        const transactionDate = dayjs(transaction.invoiceDate)
        return transactionDate.isAfter(dateRange[0], 'day') &&
          transactionDate.isBefore(dateRange[1], 'day')
      })
    }

    if (selectedType) {
      filtered = filtered.filter(transaction => transaction.type === selectedType)
    }

    setFilteredTransactions(filtered)
  }

  const clearFilters = (): void => {
    setDateRange(null)
    setSelectedType(undefined)
    setFilteredTransactions(transactions)
  }

  const formatCurrency = (amount: number): string => {
    return `₪${amount.toLocaleString('he-IL', { minimumFractionDigits: 2 })}`
  }

  useEffect(() => {
    fetchTotals()
    GetAllTransactions()
  }, [])

  useEffect(() => {
    handleFilter()
  }, [dateRange, selectedType, transactions])

  const columns: ColumnsType<InvoiceDto> = [
    {
      title: "תאריך",
      dataIndex: "invoiceDate",
      key: "invoiceDate",
      width: screens.xs ? 100 : 130,
      render: (date: string) => (
        <Space direction="vertical" size="small">
          <Text strong style={{ fontSize: 13 }}>
            {dayjs(date).format('DD/MM/YY')}
          </Text>
          <Text type="secondary" style={{ fontSize: 11 }}>
            {dayjs(date).format('HH:mm')}
          </Text>
        </Space>
      ),
      sorter: (a, b) => dayjs(a.invoiceDate).unix() - dayjs(b.invoiceDate).unix(),
    },
    {
      title: "סוג תנועה",
      dataIndex: "type",
      key: "type",
      width: screens.xs ? 120 : 160,
      render: (type: string) => {
        const typeInfo = getTransactionTypeInfo(type)
        return (
          <Tag
            color={typeInfo.color}
            icon={typeInfo.icon}
            style={{ fontSize: screens.xs ? 11 : 12 }}
          >
            {typeInfo.label}
          </Tag>
        )
      },
      filters: transactionTypes.map(type => ({
        text: type.label,
        value: type.key,
      })),
      onFilter: (value, record) => record.type === value,
    },
    {
      title: "סכום",
      dataIndex: "amount",
      key: "amount",
      width: screens.xs ? 100 : 120,
      align: "center",
      render: (amount: number) => (
        <Text
          strong
          style={{
            color: amount > 0 ? "#52c41a" : "#ff4d4f",
            fontSize: screens.xs ? 13 : 14
          }}
        >
          {formatCurrency(amount)}
        </Text>
      ),
      sorter: (a, b) => a.amount - b.amount,
    },
    {
      title: "תיאור",
      dataIndex: "notes",
      key: "notes",
      ellipsis: { showTitle: false },
      render: (notes: string) => (
        <Tooltip title={notes || "ללא תיאור"}>
          <Text style={{ fontSize: screens.xs ? 12 : 13 }}>
            {notes || "ללא תיאור"}
          </Text>
        </Tooltip>
      ),
    },
    {
      title: "נוצר על ידי",
      dataIndex: "createdBy",
      key: "createdBy",
      width: screens.xs ? 100 : 130,
      render: (createdBy: string) => (
        <Space size="small">
          <Avatar size="small" icon={<UserOutlined />} />
          <Text style={{ fontSize: screens.xs ? 11 : 12 }}>{createdBy}</Text>
        </Space>
      ),
    },
  ]

  const statisticsCards = (
    <Row gutter={[16, 16]}>
      <Col xs={24} sm={12} lg={8}>
        <Card size="small" style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
          <Statistic
            title={<Text style={{ color: "white", fontWeight: 600 }}>סכום חובה</Text>}
            value={totals.debit}
            precision={2}
            valueStyle={{ color: "white", fontSize: screens.xs ? 18 : 24 }}
            prefix={<TrendingUpOutlined style={{ color: "white" }} />}
            suffix="₪"
            formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
          />
        </Card>
      </Col>
      <Col xs={24} sm={12} lg={8}>
        <Card size="small" style={{ background: "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)" }}>
          <Statistic
            title={<Text style={{ color: "#8b4513", fontWeight: 600 }}>סכום זכות</Text>}
            value={totals.credit}
            precision={2}
            valueStyle={{ color: "#8b4513", fontSize: screens.xs ? 18 : 24 }}
            prefix={<TrendingDownOutlined style={{ color: "#8b4513" }} />}
            suffix="₪"
            formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
          />
        </Card>
        
      </Col>
      <Col xs={24} sm={24} lg={8}>
        <Card size="small" style={{ background: "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)" }}>
          <Statistic
            title={<Text style={{ color: "#2d3748", fontWeight: 600 }}>כמות התנועות בחשבון</Text>}
            value={transactions.length}
            precision={0}
            valueStyle={{
              color: (totals.debit - totals.credit) >= 0 ? "#52c41a" : "#ff4d4f",
              fontSize: screens.xs ? 18 : 24
            }}
            prefix={<ReconciliationOutlined />}
            formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
          />
        </Card>
      </Col>
    </Row>
  )

  return (
    <div dir="rtl" style={{
      padding: screens.xs ? "16px 8px" : "24px 16px",
      maxWidth: 1400,
      margin: "0 auto",
      minHeight: "100vh",
      background: "#f5f5f5"
    }}>
      <Card style={{
        borderRadius: 12,
        marginBottom: 24,
        boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
      }}>
        <div style={{ textAlign: "center", marginBottom: 24 }}>
          <Avatar
            size={screens.xs ? 48 : 64}
            style={{
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              marginBottom: 16,
            }}
          >
            <DollarOutlined style={{ fontSize: screens.xs ? 24 : 32 }} />
          </Avatar>

          <Title level={screens.xs ? 3 : 2} style={{ marginBottom: 8, color: "#2d3748" }}>
            ניהול תנועות חשבון
          </Title>

          <Text type="secondary" style={{ fontSize: screens.xs ? 14 : 16 }}>
            רישום ועקיבה אחר תנועות כספיות בעסק
          </Text>
        </div>

        {statisticsCards}
      </Card>

      <Card style={{
        borderRadius: 12,
        boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
      }}>
        <Tabs
          activeKey={activeTab}
          onChange={setActiveTab}
          size={screens.xs ? "small" : "middle"}
          items={[
            {
              key: "1",
              label: (
                <Space>
                  <PlusOutlined />
                  <span>רישום תנועה חדשה</span>
                </Space>
              ),
              children: (
                <div style={{ maxWidth: 600, margin: "0 auto" }}>
                  {error && (
                    <Alert
                      message={error}
                      type="error"
                      style={{ marginBottom: 16 }}
                      showIcon
                      closable
                      onClose={() => setError(null)}
                    />
                  )}

                  {success && (
                    <Alert
                      message="התנועה נשמרה בהצלחה"
                      type="success"
                      style={{ marginBottom: 16 }}
                      showIcon
                      closable
                      onClose={() => setSuccess(false)}
                    />
                  )}

                  <Form
                    form={form}
                    layout="vertical"
                    onFinish={handleFinish}
                    size={screens.xs ? "small" : "middle"}
                  >
                    <Form.Item
                      name="transactionType"
                      label={
                        <Space>
                          <TagOutlined />
                          <span>סוג תנועה</span>
                        </Space>
                      }
                      rules={[{ required: true, message: "נא לבחור סוג תנועה" }]}
                    >
                      <Select
                        placeholder="בחר סוג תנועה"
                        showSearch
                        optionFilterProp="children"
                      >
                        {transactionTypes.map((type) => (
                          <Option key={type.key} value={type.key}>
                            <Space>
                              {type.icon}
                              {type.label}
                            </Space>
                          </Option>
                        ))}
                      </Select>
                    </Form.Item>

                    <Form.Item
                      name="amount"
                      label={
                        <Space>
                          <DollarOutlined />
                          <span>סכום</span>
                        </Space>
                      }
                      rules={[
                        { required: true, message: "נא להזין סכום" },
                        {
                          type: "number",
                          min: 0.01,
                          message: "הסכום חייב להיות גדול מאפס",
                        },
                      ]}
                    >
                      <InputNumber<number>
                        placeholder="הזן סכום"
                        style={{ width: "100%" }}
                        min={0.01}
                        size="large"
                        formatter={(value) =>
                          `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                        }
                        parser={(value) =>
                          parseFloat(value?.replace(/₪\s?|(,*)/g, "") || "0")
                        }
                      />
                    </Form.Item>

                    <Form.Item
                      name="description"
                      label={
                        <Space>
                          <FileTextOutlined />
                          <span>תיאור</span>
                        </Space>
                      }
                    >
                      <Input.TextArea
                        rows={3}
                        placeholder="הוסף תיאור (אופציונלי)"
                        showCount
                        maxLength={200}
                      />
                    </Form.Item>

                    <Button
                      type="primary"
                      htmlType="submit"
                      loading={loading}
                      block
                      size="large"
                      style={{
                        height: 48,
                        fontWeight: 600,
                        borderRadius: 8
                      }}
                    >
                      <Space>
                        <PlusOutlined />
                        שמור תנועה
                      </Space>
                    </Button>
                  </Form>
                </div>
              )
            },
            {
              key: "2",
              label: (
                <Space>
                  <HistoryOutlined />
                  <span>היסטוריית תנועות</span>
                  <Badge count={transactions.length} showZero />
                </Space>
              ),
              children: (
                <div>
                  {/* מסנני חיפוש */}
                  <Card size="small" style={{ marginBottom: 16 }}>
                    <Row gutter={[16, 16]} align="middle">
                      <Col xs={24} sm={12} md={8}>
                        <Space direction="vertical" size="small" style={{ width: "100%" }}>
                          <Text strong>סינון לפי תאריך:</Text>
                          <RangePicker
                            value={dateRange}
                            onChange={(dates) => {
                              if (dates) {
                                const [start, end] = dates;
                                setDateRange(start && end ? [start, end] : null);
                              } else {
                                setDateRange(null);
                              }
                            }}
                            style={{ width: "100%" }}
                            placeholder={["מתאריך", "עד תאריך"]}
                            format="DD/MM/YYYY"
                          />
                        </Space>
                      </Col>

                      <Col xs={24} sm={12} md={8}>
                        <Space direction="vertical" size="small" style={{ width: "100%" }}>
                          <Text strong>סינון לפי סוג:</Text>
                          <Select
                            value={selectedType}
                            onChange={setSelectedType}
                            placeholder="כל הסוגים"
                            style={{ width: "100%" }}
                            allowClear
                          >
                            {transactionTypes.map((type) => (
                              <Option key={type.key} value={type.key}>
                                <Space>
                                  {type.icon}
                                  {type.label}
                                </Space>
                              </Option>
                            ))}
                          </Select>
                        </Space>
                      </Col>

                      <Col xs={24} sm={24} md={8}>
                        <Space style={{ width: "100%" }}>
                          <Button
                            onClick={clearFilters}
                            icon={<ReloadOutlined />}
                          >
                            נקה מסננים
                          </Button>
                          <Button
                            onClick={GetAllTransactions}
                            icon={<ReloadOutlined />}
                            loading={transactionsLoading}
                          >
                            רענן
                          </Button>
                          <Tooltip title="יחזור בקרוב">
                            <Button
                              icon={<ExportOutlined />}
                              disabled
                            >
                              ייצא
                            </Button>
                          </Tooltip>
                        </Space>
                      </Col>
                    </Row>
                  </Card>

                  {/* טבלת תנועות */}
                  <Card style={{ borderRadius: 8 }}>
                    {filteredTransactions.length > 0 ? (
                      <Table
                        columns={columns}
                        dataSource={filteredTransactions}
                        rowKey="id"
                        loading={transactionsLoading}
                        pagination={{
                          pageSize: screens.xs ? 5 : 10,
                          showSizeChanger: !screens.xs,
                          showQuickJumper: !screens.xs,
                          showTotal: (total, range) =>
                            `${range[0]}-${range[1]} מתוך ${total} תנועות`,
                          size: screens.xs ? "small" : "default",
                        }}
                        scroll={{
                          x: screens.xs ? 600 : 800
                        }}
                        size={screens.xs ? "small" : "middle"}
                        rowClassName={(_record, index) =>
                          index % 2 === 0 ? "table-row-light" : "table-row-dark"
                        }
                      />
                    ) : (
                      <Empty
                        image={Empty.PRESENTED_IMAGE_SIMPLE}
                        description={
                          <div>
                            <Text type="secondary" style={{ fontSize: 16 }}>
                              לא נמצאו תנועות
                            </Text>
                            <br />
                            <Text type="secondary">
                              נסה לשנות את המסננים או הוסף תנועה חדשה
                            </Text>
                          </div>
                        }
                        style={{ padding: "40px 0" }}
                      />
                    )}
                  </Card>
                </div>
              )
            }
          ]}
        />
      </Card>

      {/* כפתור צף */}
      <FloatButton.Group
        trigger="hover"
        type="primary"
        style={{ left: 24 }}
        icon={<PlusOutlined />}
      >
        <FloatButton
          icon={<PlusOutlined />}
          tooltip="תנועה חדשה"
          onClick={() => setActiveTab("1")}
        />
        <FloatButton
          icon={<HistoryOutlined />}
          tooltip="היסטוריית תנועות"
          onClick={() => setActiveTab("2")}
        />
        <FloatButton
          icon={<ReloadOutlined />}
          tooltip="רענן נתונים"
          onClick={() => {
            fetchTotals()
            GetAllTransactions()
          }}
        />
      </FloatButton.Group>

      {/* סטיילים מותאמים */}
      <style >{`
        .table-row-light {
          background-color: #fafafa;
        }
        .table-row-dark {
          background-color: #ffffff;
        }
        
        @media (max-width: 576px) {
          .ant-table-thead > tr > th {
            padding: 8px 4px !important;
            font-size: 12px !important;
          }
          .ant-table-tbody > tr > td {
            padding: 8px 4px !important;
          }
          .ant-statistic-title {
            font-size: 12px !important;
          }
          .ant-statistic-content {
            font-size: 16px !important;
          }
        }
        
        .ant-card {
          transition: all 0.3s ease;
        }
        
        .ant-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        }
      `}</style>
    </div>
  )
}

export default AccountTransactions
"use client"
import { useContext, useState } from "react"
import { useNavigate } from "react-router-dom"
import axios from "axios"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, CrownOutlined, LoginOutlined, ExclamationCircleOutlined } from "@ant-design/icons"

import type { Admin } from "../models/Admin"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { BusinessDto } from "../models/BusinessDto"
import { useMediaQuery } from "react-responsive"

const { Title, Text, Link } = Typography

const AdminLogin = () => {
  const nav = useNavigate()
  const [admin, setAdmin] = useState<Admin>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const validationSchema = validationSchemaAdminLogin
  const globalContextDetails = useContext(globalContext)
  const isMobile = useMediaQuery({ maxWidth: 768 })

  const handleSubmit = async () => {
    console.log("url: ", url);
    
    setLoading(true)
    setErrors([])
    try {
      const valid = await validationSchema.isValid(admin)
      if (!valid) {
        const validationErrors = await validationSchema.validate(admin).catch((err) => err.errors)
        setErrors(validationErrors || [])
        return
      }

      let data: any
      try {
        const response = await axios.post(`${url}/Auth/admin-login`, admin, { withCredentials: true })
        data = response.data
        globalContextDetails.setUser(data.user)
        globalContextDetails.setIsAdmin(true)
      } catch (e) {
        if (axios.isAxiosError(e) && e.response?.status === 400) {
          setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"])
        } else {
          setErrors([e instanceof Error ? e.message : "שגיאה בכניסה, נא לנסות שוב מאוחר יותר"])
        }
        return
      }

      try {
        const res = await axios.get<BusinessDto>(`${url}/api/Business/${data.user.businessId}`, { withCredentials: true })
        globalContextDetails.setBusinessGlobal(res.data)
        globalContextDetails.setUserCount(res.data.usersCount)
      } catch (e) {
        setErrors([e instanceof Error ? e.message : "שגיאה בטעינת העסק, נא לנסות שוב מאוחר יותר"])
      }

      nav("/")
    } catch (e) {
      setErrors([e instanceof Error ? e.message : "שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
    } finally {
      console.log("User after set-user !!!!!!!!!!!!!!: ", globalContextDetails.user);
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div
        className="centered-layout"
        style={{
          minHeight: "calc(100vh - 64px)",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: isMobile ? "16px" : "24px",
          // background: "linear-gradient(135deg, #f7f9fc 0%, #eef2f7 100%)",
        }}
      >
        <Card
          className="login-form"
          style={{
            maxWidth: 500,
            width: "100%",
          }}
          bodyStyle={{
            padding: isMobile ? "24px" : "40px",
          }}
        >
          <div style={{ textAlign: "center", marginBottom: isMobile ? 24 : 32 }}>
            <Avatar
              size={isMobile ? 64 : 80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <CrownOutlined style={{ fontSize: isMobile ? 28 : 40 }} />
            </Avatar>

            <Title
              level={2}
              style={{
                marginBottom: 8,
                color: "#2d3748",
                textAlign: "center",
                fontSize: isMobile ? "1.5rem" : "2rem",
              }}
            >
              כניסת מנהל
            </Title>
            <Text
              type="secondary"
              style={{
                fontSize: isMobile ? 14 : 16,
                display: "block",
              }}
            >
              ברוכים הבאים למערכת ניהול העסק
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item label="אימייל" required>
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size="large"
                value={admin.email}
                onChange={(e) => setAdmin((prev) => ({ ...prev, email: e.target.value }))}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Form.Item label="סיסמא" required>
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size="large"
                value={admin.password}
                onChange={(e) => setAdmin((prev) => ({ ...prev, password: e.target.value }))}
                style={{ borderRadius: 10 }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: 16,
                marginBottom: 16,
              }}
            >
              התחבר
            </Button>

            <Divider><Text type="secondary">או</Text></Divider>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary">אין לך חשבון?</Text>
                <Link href="/register-admin&business" style={{ fontWeight: 600 }}>
                  הירשם כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((index) => (
                  <Alert
                    key={index}
                    message="שגיאה בהתחברות"
                    description="המערכת נתקלה בבעיה. אנא נסו מאוחר יותר."
                    type="error"
                    showIcon
                    icon={<ExclamationCircleOutlined />}
                    style={{
                      marginBottom: 8,
                      borderRadius: 8,
                      background: "linear-gradient(135deg, #fff2f0 0%, #ffebe8 100%)",
                      border: "1px solid #ffccc7",
                      fontSize: isMobile ? 12 : 14,
                    }}
                  />
                ))}
              </div>
            )}
            
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default AdminLogin
"use client"

import type React from "react"
import { useContext, useState } from "react"
import * as Yup from "yup"
import axios from "axios"
import type { UserPostModel } from "../models/UserPostModel"
import { validationSchemaAdminLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import type { UserDto } from "../models/UserDto"
import { converFromUserDto } from "../utils/convertFromUserDto"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  UserAddOutlined,
  CrownOutlined,
} from "@ant-design/icons"

const { Title, Text } = Typography

const AdminRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const validationSchema = validationSchemaAdminLogin
  const [myAdmin, setMyAdmin] = useState<UserPostModel>({
    firstName: "יוסי",
    lastName: "כהן",
    email: "a@a",
    password: "",
    phone: "050-1234567",
    role: 1,
    idNumber: "123456789",
  })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  const handleSubmit = (adminRegister: UserPostModel) => async () => {
    setLoading(true)
  
    try {
      // נוודא שכל השדות נבדקים לפי הסכמה, כולל הודעות שגיאה
      await validationSchema.validate(adminRegister, { abortEarly: false })
  
      // אם עבר ולידציה, נמשיך לנסות לשלוח לשרת
      try {
        const { data } = await axios.post<UserDto>(
          `${url}/Auth/admin-register`,
          adminRegister,
          { withCredentials: true }
        )
  
        globalContextDetails.setUser(converFromUserDto(data))
        if (data.role == 1) {
          globalContextDetails.setIsAdmin(true)
        }
  
        if (onSubmitSuccess) onSubmitSuccess()
        setErrors([]) // ננקה שגיאות אם הכל עבר
      } catch (e) {
        setErrors(["שגיאה ברישום"])
      }
    } catch (err) {
      // נציג את כל שגיאות ה־Yup
      if (err instanceof Yup.ValidationError) {
        setErrors(err.errors)
      } else {
        setErrors(["שגיאה כללית בוולידציה"])
      }
    } finally {
      setLoading(false)
    }
  }
  
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
    const { name, value, type } = event.target
    setMyAdmin((prevUser) => ({
      ...prevUser,
      [name]: type === "number" ? Number(value) : value,
    }))
  }

  return (
    <ConfigProvider direction="rtl">
      <Card className="form-section" style={{ width: "100%", maxWidth: "none" }}>
        <div style={{ textAlign: "center", marginBottom: 32 }}>
          <Avatar
            size={80}
            style={{
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              marginBottom: 16,
              boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
            }}
          >
            <CrownOutlined style={{ fontSize: 40 }} />
          </Avatar>

          <Title level={3} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
            רישום מנהל חדש
          </Title>

          <Text type="secondary" style={{ fontSize: 16 }}>
            נא למלא את כל הפרטים הנדרשים לרישום המנהל
          </Text>

          <Divider />
        </div>

        <Form layout="vertical" onFinish={handleSubmit(myAdmin)}>
          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            פרטים אישיים
          </Title>

          <Row gutter={[24, 16]}>
            <Col xs={24} md={12}>
              <Form.Item label="שם פרטי" required>
                <Input
                  name="firstName"
                  prefix={<UserOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם פרטי"
                  size="large"
                  value={myAdmin.firstName}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="שם משפחה" required>
                <Input
                  name="lastName"
                  prefix={<UserOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם משפחה"
                  size="large"
                  value={myAdmin.lastName}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="טלפון" required>
                <Input
                  name="phone"
                  prefix={<PhoneOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מספר טלפון"
                  size="large"
                  value={myAdmin.phone}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="מספר תעודת זהות" required>
                <Input
                  name="idNumber"
                  prefix={<IdcardOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מספר תעודת זהות"
                  size="large"
                  value={myAdmin.idNumber}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24}>
              <Form.Item label="אימייל" required>
                <Input
                  name="email"
                  prefix={<MailOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן כתובת אימייל"
                  size="large"
                  type="email"
                  value={myAdmin.email}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="סיסמא" required>
                <Input.Password
                  name="password"
                  prefix={<LockOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן סיסמא"
                  size="large"
                  value={myAdmin.password}
                  onChange={handleChange}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
            </Col>
          </Row>

          <Row gutter={[16, 16]} style={{ marginTop: 32 }}>
            <Col xs={24}>
              <Button
              onClick={() => handleSubmit(myAdmin)}
                type="primary"
                htmlType="submit"
                size="large"
                loading={loading}
                icon={<UserAddOutlined />}
                block
                style={{
                  height: 56,
                  fontWeight: 600,
                  fontSize: 16,
                  borderRadius: 12,
                  maxWidth: 220,
                }}
              >
                {loading ? "שומר נתונים..." : "שמור פרטי מנהל"}
              </Button>
            </Col>
          </Row>

          {errors.length > 0 && (
            <div style={{ marginTop: 24 }}>
              {errors.map((error, index) => (
                <Alert key={index} message={error} type="error" showIcon style={{ marginBottom: 8, borderRadius: 8 }} />
              ))}
            </div>
          )}
        </Form>
      </Card>
    </ConfigProvider>
  )
}

export default AdminRegister
"use client"

import type { JSX } from "react"
import { useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import { Result, Button, Card, ConfigProvider } from "antd"
import { StopOutlined } from "@ant-design/icons"
import { useNavigate } from "react-router-dom"

const AdminRoute = ({ children }: { children: JSX.Element }) => {
  const { isAdmin } = useContext(globalContext)
  const navigate = useNavigate()

  if (isAdmin === false) {
    return (
      <ConfigProvider direction="rtl">
        <div
          style={{
            minHeight: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
            padding: "20px",
          }}
        >
          <Card
            style={{
              maxWidth: 500,
              width: "100%",
              borderRadius: 20,
              boxShadow: "0 10px 40px rgba(0, 0, 0, 0.1)",
              border: "none",
              textAlign: "center",
            }}
            bodyStyle={{
              padding: "40px 30px",
            }}
          >
            <Result
              icon={
                <div
                  style={{
                    width: 120,
                    height: 120,
                    borderRadius: "50%",
                    background: "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    margin: "0 auto 24px auto",
                    boxShadow: "0 8px 25px rgba(255, 107, 107, 0.3)",
                  }}
                >
                  <StopOutlined style={{ fontSize: 60, color: "white" }} />
                </div>
              }
              title={
                <div style={{ marginBottom: 16 }}>
                  <h2
                    style={{
                      fontSize: 28,
                      fontWeight: 700,
                      color: "#2d3748",
                      margin: 0,
                      marginBottom: 8,
                    }}
                  >
                    גישה נדחתה
                  </h2>
                  <div
                    style={{
                      width: 60,
                      height: 4,
                      background: "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)",
                      borderRadius: 2,
                      margin: "0 auto",
                    }}
                  />
                </div>
              }
              subTitle={
                <div style={{ marginBottom: 32 }}>
                  <p
                    style={{
                      fontSize: 16,
                      color: "#718096",
                      lineHeight: 1.6,
                      margin: 0,
                      marginBottom: 8,
                    }}
                  >
                    אין לך הרשאה לצפות בדף זה
                  </p>
                  <p
                    style={{
                      fontSize: 14,
                      color: "#a0aec0",
                      lineHeight: 1.5,
                      margin: 0,
                    }}
                  >
                    רק מנהלים יכולים לגשת לתוכן זה. אנא פנה למנהל המערכת לקבלת הרשאות.
                  </p>
                </div>
              }
              extra={
                <div style={{ display: "flex", gap: 12, justifyContent: "center", flexWrap: "wrap" }}>
                  <Button
                    type="primary"
                    size="large"
                    onClick={() => navigate("/")}
                    style={{
                      height: 48,
                      padding: "0 32px",
                      borderRadius: 24,
                      fontWeight: 600,
                      fontSize: 16,
                      background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                      border: "none",
                      boxShadow: "0 4px 15px rgba(102, 126, 234, 0.4)",
                    }}
                  >
                    חזרה לדף הבית
                  </Button>
                  <Button
                    size="large"
                    onClick={() => navigate("/concat-us")}
                    style={{
                      height: 48,
                      padding: "0 32px",
                      borderRadius: 24,
                      fontWeight: 600,
                      fontSize: 16,
                      borderColor: "#d1d5db",
                      color: "#6b7280",
                    }}
                  >
                    צור קשר
                  </Button>
                </div>
              }
            />
          </Card>
        </div>
      </ConfigProvider>
    )
  }

  return children
}

export default AdminRoute
"use client"

import { useContext, useEffect, useState } from "react"
import RegisterBusinessData from "./RegisterBusinessData"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import type { BusinessResponsePutModel } from "../models/BusinessResponsePutModel"
import AdminRegister from "./AdminRegister"
import type { UserDto } from "../models/UserDto"
import {
  Button,
  Typography,
  Card,
  Steps,
  Divider,
  Alert,
  ConfigProvider,
  Space,
  Avatar,
} from "antd"
import {
  ShopOutlined,
  UserOutlined,
  CheckCircleOutlined,
  RocketOutlined,
} from "@ant-design/icons"

const { Title, Text } = Typography

const BusinessAndAdmin = () => {
  const [isBusiness, setIsBusiness] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [businessDone, setBusinessDone] = useState(false)
  const [adminDone, setAdminDone] = useState(false)
  const [activeStep, setActiveStep] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL

  useEffect(() => {
    if (businessDone && adminDone) {
      updateObjects()
    }
  }, [businessDone, adminDone])

  const updateObjects = async () => {
    setError(null)

    const updateAdmin = {
      ...globalContextDetails.user,
      businessId: globalContextDetails.business_global.id,
      business: {
        ...globalContextDetails.business_global,
        createdAt: new Date(globalContextDetails.business_global.createdAt),
        updatedAt: new Date(globalContextDetails.business_global.updatedAt),
      },
      role: 1,
      updateBy:
        globalContextDetails.user.firstName +
        " " +
        globalContextDetails.user.lastName,
    }
    const updateBusiness = {
      ...globalContextDetails.business_global,
      users: [globalContextDetails.user],
      updateBy:
        globalContextDetails.user.firstName +
        " " +
        globalContextDetails.user.lastName,
    }
    globalContextDetails.setUser(updateAdmin)
    globalContextDetails.setBusinessGlobal(updateBusiness)

    try {
      await axios.put<UserDto>(
        `${url}/api/User/${globalContextDetails.user.id}`,
        updateAdmin,
        {
          withCredentials: true,
        },
      )
      await axios.put<BusinessResponsePutModel>(
        `${url}/api/Business/${globalContextDetails.business_global.id}`,
        updateBusiness,
        { withCredentials: true },
      )

      globalContextDetails.setBusinessGlobal(updateBusiness)
      globalContextDetails.setUser(updateAdmin)
      setSuccess(true)
      setActiveStep(3)
    } catch (e) {
      setError("אירעה שגיאה בעדכון הנתונים. אנא נסה שנית.")
    }
  }

  const handleAdminSuccess = () => {
    setAdminDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 1))
  }

  const handleBusinessSuccess = () => {
    setBusinessDone(true)
    setActiveStep((prevStep) => Math.max(prevStep, 2))
  }

  const steps = [
    {
      title: "התחלה",
      icon: <RocketOutlined />,
    },
    {
      title: "פרטי מנהל",
      icon: <UserOutlined />,
    },
    {
      title: "פרטי עסק",
      icon: <ShopOutlined />,
    },
    {
      title: "סיום",
      icon: <CheckCircleOutlined />,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          padding: "40px 20px",
          minHeight: "100vh",
          // background: "#f0f2f5",
        }}
      >        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                // boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <RocketOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              הגדרת עסק ומנהל
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              הגדר את העסק שלך ופרטי המנהל בתהליך פשוט ומהיר
            </Text>

            <Divider />
          </div>

          <Steps current={activeStep} items={steps} style={{ marginBottom: 32 }} />

          {success ? (
            <div style={{ textAlign: "center", padding: "60px 20px" }}>
              <Avatar
                size={100}
                style={{
                  background: "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)",
                  marginBottom: 24,
                }}
              >
                <CheckCircleOutlined style={{ fontSize: 50 }} />
              </Avatar>
              <Title level={3} style={{ color: "#52c41a", marginBottom: 16 }}>
                הרישום הושלם בהצלחה!
              </Title>
              <Text type="secondary" style={{ fontSize: 16 }}>
                פרטי העסק והמנהל נשמרו במערכת בהצלחה
              </Text>
            </div>
          ) : (
            <Space direction="vertical" style={{ width: "100%" }} size="large">
              <Card
                title={
                  <Space>
                    <UserOutlined style={{ color: "#667eea" }} />
                    <span>רישום פרטי מנהל</span>
                  </Space>
                }
              >
                <Text type="secondary" style={{ display: "block", marginBottom: 16 }}>
                  הזן את פרטי המנהל שיהיה אחראי על ניהול העסק במערכת
                </Text>
                <Button
                  onClick={() => {
                    setIsAdmin(!isAdmin)
                    if (!isAdmin) setActiveStep(1)
                  }}
                  type={isAdmin ? "default" : "primary"}
                  size="large"
                  icon={<UserOutlined />}
                  block
                  style={{
                    marginBottom: isAdmin ? 24 : 0,
                    height: 48,
                    fontWeight: 600,
                    maxWidth: 220,
                  }}
                >
                  {isAdmin ? "סגור טופס רישום מנהל" : "פתח טופס רישום מנהל"}
                </Button>
                {isAdmin && (
                  <div style={{ marginTop: 24 }}>
                    <AdminRegister onSubmitSuccess={handleAdminSuccess} />
                  </div>
                )}
              </Card>

              {adminDone && (
                <Card
                  title={
                    <Space>
                      <ShopOutlined style={{ color: "#667eea" }} />
                      <span>רישום פרטי עסק</span>
                    </Space>
                  }
                >
                  <Text type="secondary" style={{ display: "block", marginBottom: 16 }}>
                    הזן את פרטי העסק הפיננסיים והבסיסיים
                  </Text>
                  <Button
                    onClick={() => {
                      setIsBusiness(!isBusiness)
                      if (!isBusiness) setActiveStep(2)
                    }}
                    type={isBusiness ? "default" : "primary"}
                    size="large"
                    icon={<ShopOutlined />}
                    block
                    style={{
                      marginBottom: isBusiness ? 24 : 0,
                      height: 48,
                      fontWeight: 600,
                      maxWidth: 220,
                    }}
                  >
                    {isBusiness ? "סגור טופס רישום עסק" : "פתח טופס רישום עסק"}
                  </Button>
                  {isBusiness && (
                    <div style={{ marginTop: 24 }}>
                      <RegisterBusinessData onSubmitSuccess={handleBusinessSuccess} />
                    </div>
                  )}
                </Card>
              )}

              {error && (
                <Alert
                  message="שגיאה!"
                  description={error}
                  type="error"
                  showIcon
                  style={{ borderRadius: 8 }}
                />
              )}
            </Space>
          )}
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default BusinessAndAdmin
import React, { useEffect, useState } from "react"
import {
    Button,
    List,
    Typography,
    message,
    Spin,
    Card,
    Space,
    Empty,
    Badge,
    Tooltip,
    Divider,
    Row,
    Col,
} from "antd"
import {
    DownloadOutlined,
    FileOutlined,
    CloudDownloadOutlined,
    FolderOpenOutlined,
    FileTextOutlined,
    FilePdfOutlined,
    FileImageOutlined,
    FileExcelOutlined,
    FileWordOutlined,
    FileZipOutlined
} from "@ant-design/icons"
import axios from "axios"
import { FileItem } from "../models/FileItem"

const { Text, Title } = Typography

const BusinessFiles: React.FC = () => {
    const [files, setFiles] = useState<FileItem[]>([])
    const [loading, setLoading] = useState(false)
    const [downloadingZip, setDownloadingZip] = useState(false)
    const [downloadingFileId, setDownloadingFileId] = useState<string | null>(null)
    const url = import.meta.env.VITE_API_URL

    const fetchFiles = async () => {
        try {
            setLoading(true)
            const response = await axios.get<FileItem[]>(`${url}/FileUpload/my-files`, {
                withCredentials: true,
            })
            setFiles(response.data)
        } catch (err) {
            message.error("אירעה שגיאה בעת טעינת הקבצים")
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        fetchFiles()
    }, [])

    const getFileIcon = (fileName: string) => {
        const extension = fileName.split('.').pop()?.toLowerCase()
        switch (extension) {
            case 'pdf':
                return <FilePdfOutlined style={{ color: '#ff4d4f' }} />
            case 'doc':
            case 'docx':
                return <FileWordOutlined style={{ color: '#1890ff' }} />
            case 'xls':
            case 'xlsx':
                return <FileExcelOutlined style={{ color: '#52c41a' }} />
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'gif':
                return <FileImageOutlined style={{ color: '#722ed1' }} />
            case 'zip':
            case 'rar':
                return <FileZipOutlined style={{ color: '#fa8c16' }} />
            case 'txt':
                return <FileTextOutlined style={{ color: '#13c2c2' }} />
            default:
                return <FileOutlined style={{ color: '#8c8c8c' }} />
        }
    }

    const handleDownloadZip = async () => {
        try {
            setDownloadingZip(true)
            const response = await axios.get(`${url}/FileUpload/my-files-download-zip`, {
                responseType: "blob",
                withCredentials: true,
            })

            const blob = new Blob([response.data], { type: "application/zip" })
            const link = document.createElement("a")
            link.href = URL.createObjectURL(blob)
            link.download = "business-files.zip"
            link.click()
            URL.revokeObjectURL(link.href)
            message.success("הקבצים הורדו בהצלחה!")
        } catch (err) {
            console.error(err)
            message.error("לא הצלחנו להוריד את כל הקבצים")
        } finally {
            setDownloadingZip(false)
        }
    }

    const handleDownloadFile = async (file: FileItem) => {
        try {
            if (!file.id) {
                message.error("קובץ לא זמין להורדה")
                return
            }

            setDownloadingFileId(file.id.toString())
            const response = await axios.get(`${url}/FileUpload/download-file/${file.id}`, {
                responseType: "blob",
                withCredentials: true,
            })

            const fileName = file.fileName ?? "file"
            const blob = new Blob([response.data])
            const link = document.createElement("a")
            link.href = URL.createObjectURL(blob)
            link.download = fileName
            link.click()
            URL.revokeObjectURL(link.href)
            message.success(`קובץ "${fileName}" הורד בהצלחה!`)
        } catch (err) {
            console.error(err)
            message.error("שגיאה בהורדת הקובץ")
        } finally {
            setDownloadingFileId(null)
        }
    }

    return (
        <div dir="rtl" style={{ padding: "24px", minHeight: "100vh", backgroundColor: "#f5f5f5" }}>
            <Card
                style={{
                    maxWidth: 1200,
                    margin: "0 auto",
                    borderRadius: 12,
                    boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
                }}
            >
                <div style={{ marginBottom: 24 }}>
                    <Space align="center" style={{ marginBottom: 16 }}>
                        <FolderOpenOutlined style={{ fontSize: 24, color: "#1890ff" }} />
                        <Title level={2} style={{ margin: 0, color: "#262626" }}>
                            קבצי העסק שלי
                        </Title>
                    </Space>

                    <Row gutter={16}>
                        <Col xs={24} sm={12} md={8}>
                            <Card size="small" style={{ textAlign: "center", backgroundColor: "#f0f9ff" }}>
                                <Badge count={files.length} showZero color="#1890ff">
                                    <FileOutlined style={{ fontSize: 20 }} />
                                </Badge>
                                <div style={{ marginTop: 8 }}>
                                    <Text strong>סה"כ קבצים</Text>
                                </div>
                            </Card>
                        </Col>
                    </Row>
                </div>

                <Divider />

                <div style={{ marginBottom: 24 }}>
                    <Space wrap>
                        <Button
                            type="primary"
                            size="large"
                            icon={<CloudDownloadOutlined />}
                            onClick={handleDownloadZip}
                            loading={downloadingZip}
                            disabled={files.length === 0}
                            style={{
                                borderRadius: 8,
                                fontWeight: 600,
                                height: 48
                            }}
                        >
                            {downloadingZip ? "מוריד קבצים..." : "הורד את כל הקבצים כ־ZIP"}
                        </Button>

                        <Tooltip title="רענן רשימת קבצים">
                            <Button
                                icon={<FolderOpenOutlined />}
                                onClick={fetchFiles}
                                loading={loading}
                                style={{ borderRadius: 8, height: 48 }}
                            >
                                רענן
                            </Button>
                        </Tooltip>
                    </Space>
                </div>

                {loading ? (
                    <div style={{ textAlign: "center", padding: "60px 0" }}>
                        <Spin size="large" tip="טוען קבצים..." />
                    </div>
                ) : files.length === 0 ? (
                    <Empty
                        image={Empty.PRESENTED_IMAGE_SIMPLE}
                        description={
                            <div>
                                <Text type="secondary" style={{ fontSize: 16 }}>
                                    לא נמצאו קבצים
                                </Text>
                                <br />
                                <Text type="secondary">
                                    העלה קבצים כדי לראות אותם כאן
                                </Text>
                            </div>
                        }
                        style={{ padding: "60px 0" }}
                    />
                ) : (
                    <>

                        <List
                            bordered={false}
                            dataSource={files}
                            renderItem={(file) => {
                                const displayName = file.fileName ?? file.invoicePath?.split('/').pop() ?? "קובץ לא ידוע"
                                const isDownloading = downloadingFileId === file.id?.toString()

                                return (
                                    <List.Item
                                        style={{
                                            padding: "16px 20px",
                                            marginBottom: 8,
                                            backgroundColor: "#fafafa",
                                            borderRadius: 8,
                                            border: "1px solid #f0f0f0",
                                            transition: "all 0.3s ease"
                                        }}
                                        className="file-item"
                                        actions={[
                                            <Button
                                                type="primary"
                                                icon={<DownloadOutlined />}
                                                onClick={() => handleDownloadFile(file)}
                                                loading={isDownloading}
                                                style={{
                                                    borderRadius: 6,
                                                    fontWeight: 600
                                                }}
                                                key="download"
                                            >
                                                {isDownloading ? "מוריד..." : "הורד"}
                                            </Button>,
                                        ]}
                                        key={file.id}
                                    >
                                        <List.Item.Meta
                                            avatar={
                                                <div style={{ fontSize: 24 }}>
                                                    {getFileIcon(displayName)}
                                                </div>
                                            }
                                            title={
                                                <Text strong style={{ fontSize: 16 }}>
                                                    {displayName}
                                                </Text>
                                            }

                                        />
                                    </List.Item>
                                )
                            }}
                        />
                    </>
                )}
            </Card>

            <style>{`
                .file-item:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    background-color: #ffffff !important;
                }
            `}</style>
        </div>
    )
}

export default BusinessFiles
import type React from "react"
import type { Business } from "../models/Business"
import { Table, Typography, Card, ConfigProvider, Tag } from "antd"
import type { ColumnsType } from "antd/es/table"

const { Title } = Typography

interface BusinessTableProps {
  business: Business
}

const BusinessTable: React.FC<BusinessTableProps> = ({ business }) => {
  const dataSource = [business]

  const columns: ColumnsType<Business> = [
    {
      title: "מזהה",
      dataIndex: "id",
      key: "id",
      align: "right",
    },
    {
      title: "שם עסק",
      dataIndex: "name",
      key: "name",
      align: "right",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "כתובת",
      dataIndex: "address",
      key: "address",
      align: "right",
    },
    {
      title: "אימייל",
      dataIndex: "email",
      key: "email",
      align: "right",
    },
    {
      title: "סוג עסק",
      dataIndex: "businessType",
      key: "businessType",
      align: "right",
      render: (text) => <Tag color="blue">{text}</Tag>,
    },
    {
      title: "הכנסות",
      dataIndex: "income",
      key: "income",
      align: "right",
      render: (value) => <span style={{ color: "#52c41a", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "הוצאות",
      dataIndex: "expenses",
      key: "expenses",
      align: "right",
      render: (value) => <span style={{ color: "#ff4d4f", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "תזרים מזומנים",
      dataIndex: "cashFlow",
      key: "cashFlow",
      align: "right",
      render: (value) => <span style={{ color: "#1890ff", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
    {
      title: "שווי נקי",
      dataIndex: "netWorth",
      key: "netWorth",
      align: "right",
      render: (value) => <span style={{ color: "#722ed1", fontWeight: "bold" }}>₪{value?.toLocaleString()}</span>,
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div style={{ width: "100%" }}>
        <Title level={4} style={{ marginBottom: 16, textAlign: "right" }}>
          פרטי העסק
        </Title>

        <Card style={{ borderRadius: 12, overflow: "hidden" }}>
          <Table
            dataSource={dataSource}
            columns={columns}
            pagination={false}
            rowKey="id"
            scroll={{ x: 800 }}
            style={{ direction: "rtl" }}
          />
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default BusinessTable
"use client"

import type React from "react"
import { useState } from "react"
import { Form, Input, Button, Card, Row, Col, Typography, Space, message, ConfigProvider, Avatar } from "antd"
import {
  MailOutlined,
  PhoneOutlined,
  EnvironmentOutlined,
  SendOutlined,
//   CustomerServiceOutlined,
  ClockCircleOutlined,
  UserOutlined,
} from "@ant-design/icons"

const { Title, Text, Paragraph } = Typography
const { TextArea } = Input

interface ContactFormData {
  name: string
  email: string
  phone?: string
  subject: string
  message: string
}

const ContactUs: React.FC = () => {
  const [form] = Form.useForm()
  const [loading, setLoading] = useState(false)

  const handleSubmit = async (values: ContactFormData) => {
    setLoading(true)
    try {
      // כאן תוכל להוסיף את הלוגיקה לשליחת הטופס
      console.log("Contact form data:", values)

      // סימולציה של שליחה
      await new Promise((resolve) => setTimeout(resolve, 2000))

      message.success("הודעתך נשלחה בהצלחה! נחזור אליך בהקדם האפשרי.")
      form.resetFields()
    } catch (error) {
      message.error("אירעה שגיאה בשליחת ההודעה. אנא נסה שוב.")
    } finally {
      setLoading(false)
    }
  }

  const contactInfo = [
    {
      icon: <MailOutlined style={{ fontSize: 24, color: "#1890ff" }} />,
      title: "אימייל",
      content: "brurya.zarbiv@gmail.com",
      description: "שלחו אלינו מייל ונשתדל לחזור תוך 2 ימי עסקים",
    },
    {
      icon: <PhoneOutlined style={{ fontSize: 24, color: "#52c41a" }} />,
      title: "טלפון (למקרים דחופים בלבד :)",
      content: "055-675-8244",
      description: "ימים א'-ה' 9:00-18:00",
    },
    {
      icon: <EnvironmentOutlined style={{ fontSize: 24, color: "#fa8c16" }} />,
      title: "כתובת",
      content: "חתם סופר 16 עמנואל",
      description: "קומה 4 ",
    },
    // {
    //   icon: <CustomerServiceOutlined style={{ fontSize: 24, color: "#722ed1" }} />,
    //   title: "תמיכה טכנית",
    //   content: "help@businessman.co.il",
    //   description: "זמינים 24/7",
    // },
  ]

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          padding: "40px 20px",
        }}
      >
        <div style={{ maxWidth: 1200, margin: "0 auto" }}>
          {/* Header */}
          <div style={{ textAlign: "center", marginBottom: 60 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 24,
              }}
            >
              <MailOutlined style={{ fontSize: 40 }} />
            </Avatar>
            <Title level={1} style={{ color: "#2d3748", marginBottom: 16 }}>
              צור קשר
            </Title>
            <Paragraph
              style={{
                fontSize: 18,
                color: "#718096",
                maxWidth: 600,
                margin: "0 auto",
                lineHeight: 1.6,
              }}
            >
              יש לך שאלות? רוצה לדעת יותר על המערכת? אנחנו כאן לעזור!
              <br />
              צור איתנו קשר ונחזור אליך בהקדם האפשרי.
            </Paragraph>
          </div>

          <Row gutter={[32, 32]}>
            {/* Contact Form */}
            <Col xs={24} lg={14}>
              <Card
                style={{
                  borderRadius: 20,
                  boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
                  border: "none",
                }}
                bodyStyle={{ padding: "40px" }}
              >
                <div style={{ marginBottom: 32 }}>
                  <Title level={3} style={{ color: "#2d3748", marginBottom: 8 }}>
                    שלח לנו הודעה
                  </Title>
                  <Text type="secondary" style={{ fontSize: 16 }}>
                    מלא את הפרטים למטה ונחזור אליך בהקדם
                  </Text>
                </div>

                <Form form={form} layout="vertical" onFinish={handleSubmit} size="large">
                  <Row gutter={[16, 0]}>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="name"
                        label="שם מלא"
                        rules={[
                          { required: true, message: "אנא הזן את שמך המלא" },
                          { min: 2, message: "השם חייב להכיל לפחות 2 תווים" },
                        ]}
                      >
                        <Input
                          prefix={<UserOutlined style={{ color: "#bfbfbf" }} />}
                          placeholder="הזן את שמך המלא"
                          style={{ borderRadius: 8 }}
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="email"
                        label="כתובת אימייל"
                        rules={[
                          { required: true, message: "אנא הזן כתובת אימייל" },
                          { type: "email", message: "אנא הזן כתובת אימייל תקינה" },
                        ]}
                      >
                        <Input
                          prefix={<MailOutlined style={{ color: "#bfbfbf" }} />}
                          placeholder="your@email.com"
                          style={{ borderRadius: 8 }}
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Row gutter={[16, 0]}>
                    <Col xs={24} sm={12}>
                      <Form.Item name="phone" label="מספר טלפון (אופציונלי)">
                        <Input
                          prefix={<PhoneOutlined style={{ color: "#bfbfbf" }} />}
                          placeholder="050-1234567"
                          style={{ borderRadius: 8 }}
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="subject"
                        label="נושא"
                        rules={[{ required: true, message: "אנא הזן נושא להודעה" }]}
                      >
                        <Input placeholder="נושא ההודעה" style={{ borderRadius: 8 }} />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="message"
                    label="הודעה"
                    rules={[
                      { required: true, message: "אנא כתב את ההודעה" },
                      { min: 10, message: "ההודעה חייבת להכיל לפחות 10 תווים" },
                    ]}
                  >
                    <TextArea
                      rows={6}
                      placeholder="כתב כאן את ההודעה שלך..."
                      showCount
                      maxLength={500}
                      style={{ borderRadius: 8 }}
                    />
                  </Form.Item>

                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={loading}
                    icon={<SendOutlined />}
                    block
                    style={{
                      height: 50,
                      borderRadius: 25,
                      fontWeight: 600,
                      fontSize: 16,
                      background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                      border: "none",
                      boxShadow: "0 4px 15px rgba(102, 126, 234, 0.4)",
                    }}
                  >
                    {loading ? "שולח הודעה..." : "שלח הודעה"}
                  </Button>
                </Form>
              </Card>
            </Col>

            {/* Contact Information */}
            <Col xs={24} lg={10}>
              <Space direction="vertical" size="large" style={{ width: "100%" }}>
                {contactInfo.map((info, index) => (
                  <Card
                    key={index}
                    style={{
                      borderRadius: 16,
                      boxShadow: "0 4px 20px rgba(0, 0, 0, 0.08)",
                      border: "none",
                    }}
                    bodyStyle={{ padding: "24px" }}
                  >
                    <Space align="start" size="middle">
                      <Avatar
                        size={48}
                        style={{
                          background: `${info.icon.props.style.color}15`,
                          border: `2px solid ${info.icon.props.style.color}20`,
                        }}
                      >
                        {info.icon}
                      </Avatar>
                      <div>
                        <Title level={5} style={{ margin: 0, marginBottom: 4 }}>
                          {info.title}
                        </Title>
                        <Text strong style={{ fontSize: 16, color: "#2d3748" }}>
                          {info.content}
                        </Text>
                        <br />
                        <Text type="secondary" style={{ fontSize: 14 }}>
                          {info.description}
                        </Text>
                      </div>
                    </Space>
                  </Card>
                ))}

                {/* Working Hours */}
                <Card
                  style={{
                    borderRadius: 16,
                    background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                    border: "none",
                    color: "white",
                  }}
                  bodyStyle={{ padding: "24px" }}
                >
                  <Space align="start" size="middle">
                    <Avatar
                      size={48}
                      style={{
                        background: "rgba(255,255,255,0.2)",
                        color: "white",
                      }}
                    >
                      <ClockCircleOutlined style={{ fontSize: 24 }} />
                    </Avatar>
                    <div>
                      <Title level={5} style={{ margin: 0, marginBottom: 8, color: "white" }}>
                        שעות פעילות
                      </Title>
                      <div style={{ color: "rgba(255,255,255,0.9)" }}>
                        <div>ימים א'-ה': 9:00-18:00</div>
                        <div>יום ו': 9:00-13:00</div>
                        <div>שבת: סגור</div>
                      </div>
                    </div>
                  </Space>
                </Card>
              </Space>
            </Col>
          </Row>

          {/* FAQ Section */}
          <Card
            style={{
              marginTop: 60,
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <div style={{ textAlign: "center", marginBottom: 40 }}>
              <Title level={2} style={{ color: "#2d3748" }}>
                שאלות נפוצות
              </Title>
              <Text type="secondary" style={{ fontSize: 16 }}>
                תשובות לשאלות הנפוצות ביותר
              </Text>
            </div>

            <Row gutter={[32, 32]}>
              <Col xs={24} md={12}>
                <div style={{ marginBottom: 24 }}>
                  <Title level={4} style={{ color: "#2d3748", marginBottom: 8 }}>
                    כמה זמן לוקח לקבל תשובה?
                  </Title>
                  <Text type="secondary" style={{ lineHeight: 1.6 }}>
                    אנחנו מתחייבים לחזור אליך תוך 2 ימי עסקים. לבקשות דחופות, אנא צור קשר טלפונית.
                  </Text>
                </div>
              </Col>
              <Col xs={24} md={12}>
                <div style={{ marginBottom: 24 }}>
                  <Title level={4} style={{ color: "#2d3748", marginBottom: 8 }}>
                    האם יש תמיכה טכנית?
                  </Title>
                  <Text type="secondary" style={{ lineHeight: 1.6 }}>
                    כרגע עדיין לא. תוכל ליצור קשר באמצעות המייל או הטלפון המופיעים למעלה, ונשמח לעזור בכל שאלה.
                  </Text>
                </div>
              </Col>
            </Row>
          </Card>
        </div>
      </div>
    </ConfigProvider>
  )
}

export default ContactUs
"use client"
import axios from "axios"
import type React from "react"

import { useState, useContext, useEffect } from "react"
import {
  Button,
  Typography,
  Card,
  Alert,
  Spin,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
  Statistic,
  Progress,
  Tag,
  Input,
  Form,
  Modal,
  InputNumber,
  message,
} from "antd"
import {
  EyeOutlined,
  ShopOutlined,
  EditOutlined,
  SaveOutlined,
  CloseOutlined,
  DollarOutlined,
  WarningOutlined,
  CreditCardOutlined,
  WalletOutlined,
  RiseOutlined,
  FallOutlined,
  FileTextOutlined,
} from "@ant-design/icons"
import { Business } from "../models/Business"
import { globalContext } from "../context/GlobalContext"

const { Title, Text } = Typography

function DataViewing() {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [dataLoaded, setDataLoaded] = useState(false)
  const [editModalVisible, setEditModalVisible] = useState(false)
  const globalContextDetails = useContext(globalContext) as { user: { businessId: number } }
  const [form] = Form.useForm()
  const [businessReport, setBusinessReport] = useState<{ totalIncome: number; totalExpenses: number; cashFlow: number; netProfit: number; invoiceCount: number } | null>(null);
  const [monthlyReport, setMonthlyReport] = useState<{ incomeChangePercent: number; expensesChangePercent: number; netProfitChangePercent: number } | null>(null);
  const [error, setError] = useState<string[] | null>(null);

  const [business, setBusiness] = useState<Business>({
    id: 0,
    businessId: 0,
    name: "",
    address: "",
    email: "",
    businessType: "",
    income: 0,
    expenses: 0,
    cashFlow: 0,
    totalAssets: 0,
    totalLiabilities: 0,
    netWorth: 0,
    createdAt: new Date(),
    createdBy: "",
    updatedAt: new Date(),
    updatedBy: "",
    users: [],
    invoices: [],
    usersCount: 0,
  });

  useEffect(() => {
    const fetchReports = async () => {
      try {
        setLoading(true);
        setError(null);

        // קריאה לדוח העסק
        const businessReportResponse = await axios.get(
          `${url}/api/Reports/business-report/${globalContextDetails.user.businessId}`,
          { withCredentials: true }
        );

        const monthlyReportResponse = await axios.get(
          `${url}/api/Reports/monthly`,
          {
            params: {
              businessId: globalContextDetails.user.businessId,
              year: new Date().getFullYear(),
              month: new Date().getMonth() + 1, // חודש ב-0 מבוסס, לכן מוסיפים 1
            },
          }
        );

        setBusinessReport(businessReportResponse.data);
        setMonthlyReport(monthlyReportResponse.data);
      } catch (err) {
        console.error(err);
        setError(["שגיאה בטעינת הדוחות"]);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, [business]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setErrors([])
    setLoading(true)

    try {
      const res = await axios.get<Business>(`${url}/api/Business/${globalContextDetails.user.businessId}`, {
        withCredentials: true,
      })

      if (res.status !== 200) {
        setErrors(["שגיאה בטעינת נתוני העסק"])
        setLoading(false)
        return
      }

      if (!res.data) {
        setErrors(["לא נמצאו נתונים"])
        setLoading(false)
        return
      }
      setBusiness(res.data)
      setDataLoaded(true)
      setLoading(false)
    } catch (error) {
      console.error("Error fetching business data:", error)
      setErrors(["שגיאה בטעינת נתוני העסק"])
      setLoading(false)
    }
  }

  const handleEdit = () => {
    form.setFieldsValue(business)
    setEditModalVisible(true)
  }

  const handleSave = async () => {
    try {
      const values = await form.validateFields()
      const updatedBusiness = { ...business, ...values }

      setBusiness(updatedBusiness)
      setEditModalVisible(false)
      message.success("נתוני העסק עודכנו בהצלחה!")
    } catch (error) {
      message.error("שגיאה בעדכון נתוני העסק")
    }
  }


  const getChangeIcon = (value: number) => {
    return value > 0 ? <RiseOutlined style={{ color: "#52c41a" }} /> : <FallOutlined style={{ color: "#ff4d4f" }} />
  }

  const calculateProfitMargin = () => {
    if (business.income === 0) return 0
    return (((business.income - business.expenses) / business.income) * 100).toFixed(1)
  }

  const calculateROI = () => {
    if (business.totalAssets === 0) return 0
    return ((business.netWorth / business.totalAssets) * 100).toFixed(1)
  }

  const businessMetrics = [
    {
      title: "הכנסות כוללות",
      value: businessReport ? businessReport.totalIncome : 0,
      prefix: "₪",
      icon: <DollarOutlined />,
      color: "#52c41a",
      change: monthlyReport ? monthlyReport.incomeChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.incomeChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "הוצאות כוללות",
      value: businessReport ? businessReport.totalExpenses : 0,
      prefix: "₪",
      icon: <CreditCardOutlined />,
      color: "#ff4d4f",
      change: monthlyReport ? monthlyReport.expensesChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.expensesChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "תזרים מזומנים",
      value: businessReport ? businessReport.cashFlow : 0,
      prefix: "₪",
      icon: <WalletOutlined />,
      color: businessReport ? businessReport.cashFlow : 0 > 0 ? "#52c41a" : "#ff4d4f",
      change: null, // אין שינוי בדוח שלך, אפשר להוריד או להוסיף חישוב אם תרצה
      description: "תזרים מזומנים נוכחי",
    },
    {
      title: "רווח נקי",
      value: businessReport ? businessReport.netProfit : 0,
      prefix: "₪",
      icon: <WarningOutlined />,
      color: "#722ed1",
      change: monthlyReport ? monthlyReport.netProfitChangePercent : 0,
      description: `שינוי של ${monthlyReport ? monthlyReport.netProfitChangePercent : 0}% מהחודש הקודם`,
    },
    {
      title: "מספר חשבוניות",
      value: businessReport ? businessReport.invoiceCount : 0,
      prefix: "",
      icon: <FileTextOutlined />,
      color: "#1890ff",
      change: null,
      description: "מספר החשבוניות בחודש",
    },
  ];

  const performanceMetrics = [
    {
      title: "שיעור רווח",
      value: calculateProfitMargin(),
      color: "#52c41a",
    },
    {
      title: "תשואה על השקעה",
      value: calculateROI(),
      color: "#1890ff",
    },
    {
      title: "יחס חוב להון",
      value: business.totalAssets > 0 ? ((business.totalLiabilities / business.totalAssets) * 100).toFixed(1) : 0,
      color: "#fa8c16",
    },
  ]

  return (
    <ConfigProvider direction="rtl">
      {/* <div style={{ marginTop: "100vh" }}></div> */}

      <div className="business-data-container" style={{ maxWidth: 1400, margin: "0 auto" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <ShopOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748" }}>
              לוח בקרה עסקי מתקדם
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה ונהל את נתוני העסק שלך בצורה חכמה ויעילה
            </Text>

            <Divider />
          </div>

          {!dataLoaded ? (
            <div style={{ textAlign: "center", marginBottom: 32 }}>
              <Button
                type="primary"
                size="large"
                disabled={loading}
                loading={loading}
                icon={<EyeOutlined />}
                onClick={handleSubmit}
                style={{
                  height: 56,
                  padding: "0 40px",
                  fontWeight: 600,
                  fontSize: 18,
                  borderRadius: 16,
                }}
              >
                {loading ? "טוען נתונים..." : "טען נתוני עסק"}
              </Button>
            </div>
          ) : (
            <Space direction="vertical" style={{ width: "100%" }} size="large">
              {/* Business Header */}
              <Card
                style={{
                  background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                  color: "white",
                  border: "none",
                }}
              >
                <Row align="middle" justify="space-between">
                  <Col>
                    <Space direction="vertical" size="small">
                      <Title level={3} style={{ color: "white", margin: 0, textAlign: "right" }}>
                        {business.name}
                      </Title>
                      <Text style={{ color: "rgba(255,255,255,0.8)", fontSize: 16 }}>
                        {business.businessType} • {business.address}
                      </Text>
                      <Tag color="gold" style={{ marginTop: 8 }}>
                        {business.email}
                      </Tag>
                    </Space>
                  </Col>
                  <Col>
                    <Button
                      type="primary"
                      ghost
                      icon={<EditOutlined />}
                      onClick={handleEdit}
                      size="large"
                      style={{
                        borderColor: "white",
                        color: "white",
                        fontWeight: 600,
                      }}
                    >
                      ערוך פרטים
                    </Button>
                  </Col>
                </Row>
              </Card>

              {/* Financial Metrics */}

              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדים פיננסיים עיקריים
                </Title>
                <Row gutter={[16, 16]}>
                  {businessMetrics.map((metric, index) => (
                    <Col xs={24} sm={12} lg={8} key={index}>
                      <Card
                        className="business-metric"
                        style={{
                          height: "100%",
                          background: `${metric.color}08`,
                          border: `1px solid ${metric.color}30`,
                          borderRadius: 16,
                          "--metric-index": index,
                        } as React.CSSProperties}
                      >
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                            <Text type="secondary" style={{ fontSize: 14 }}>
                              {metric.title}
                            </Text>
                            <Avatar
                              size={40}
                              style={{
                                background: `${metric.color}20`,
                                color: String(metric.color),
                              }}
                            >
                              {metric.icon}
                            </Avatar>
                          </div>

                          <Statistic
                            value={metric.value}
                            prefix={metric.prefix}
                            valueStyle={{
                              color: String(metric.color),
                              fontSize: "1.8rem",
                              fontWeight: "bold",
                            }}
                          />

                          <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                            {getChangeIcon(metric.change ?? 0)}
                            {metric.change !== null && (
                              <Text
                                style={{
                                  color: metric.change > 0 ? "#52c41a" : "#ff4d4f",
                                  fontWeight: 600,
                                }}
                              >
                                {metric.change > 0 ? "+" : ""}
                                {metric.change}%
                              </Text>
                            )}
                          </div>

                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {metric.description}
                          </Text>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>
              {/* הצגת השגיאות */}
              {error && (
                <Alert
                  message="שגיאה בטעינת דוחות"
                  description={error.join(", ")}
                  type="error"
                  showIcon
                  style={{ marginBottom: 16, borderRadius: 12 }}
                />
              )}

              {/* Performance Indicators */}
              <div>
                <Title level={4} style={{ marginBottom: 16 }}>
                  מדדי ביצועים
                </Title>
                <Row gutter={[16, 16]}>
                  {performanceMetrics.map((metric, index) => (
                    <Col xs={24} md={8} key={index}>
                      <Card style={{ height: "100%", borderRadius: 16 }}>
                        <Space direction="vertical" style={{ width: "100%" }}>
                          <Text strong style={{ fontSize: 16 }}>
                            {metric.title}
                          </Text>

                          <div style={{ textAlign: "center", margin: "16px 0" }}>
                            <Progress
                              type="circle"
                              format={() => (
                                <div>
                                  <div style={{ fontSize: "1.5rem", fontWeight: "bold", color: metric.color }}>
                                    {metric.value}
                                  </div>
                                  <div style={{ fontSize: "0.8rem", color: "#666" }}>
                                  </div>
                                </div>
                              )}
                              strokeColor={metric.color}
                              size={120}
                            />
                          </div>

                          <div style={{ textAlign: "center" }}>
                          </div>
                        </Space>
                      </Card>
                    </Col>
                  ))}
                </Row>
              </div>
            </Space>
          )}

          {loading && (
            <div style={{ textAlign: "center", padding: "60px 0" }}>
              <Spin size="large" />
              <div style={{ marginTop: 24 }}>
                <Text type="secondary" style={{ fontSize: 16 }}>
                  טוען נתוני העסק...
                </Text>
              </div>
            </div>
          )}

          {errors.length > 0 && (
            <div>
              {errors.map((error, index) => (
                <Alert
                  key={index}
                  message="שגיאה"
                  description={error}
                  type="error"
                  showIcon
                  style={{ marginBottom: 8, borderRadius: 12 }}
                />
              ))}
            </div>
          )}
        </Card>

        {/* Edit Modal */}
        <Modal
          title="עריכת נתוני עסק"
          open={editModalVisible}
          onCancel={() => setEditModalVisible(false)}
          footer={[
            <Button key="cancel" onClick={() => setEditModalVisible(false)} icon={<CloseOutlined />}>
              ביטול
            </Button>,
            <Button key="save" type="primary" onClick={handleSave} icon={<SaveOutlined />}>
              שמור שינויים
            </Button>,
          ]}
          width={800}
          className="edit-mode"
        >
          <Form form={form} layout="vertical" style={{ marginTop: 16 }}>
            <Row gutter={[16, 16]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם העסק" name="name">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סוג העסק" name="businessType">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="כתובת" name="address">
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הכנסות" name="income">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="הוצאות" name="expenses">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סך נכסים" name="totalAssets">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="התחייבויות" name="totalLiabilities">
                  <InputNumber
                    size="large"
                    style={{ width: "100%" }}
                    formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                    parser={(value) => value!.replace(/₪\s?|(,*)/g, "")}
                  />
                </Form.Item>
              </Col>
            </Row>
          </Form>
        </Modal>
      </div>
    </ConfigProvider>
  )
}

export default DataViewing
"use client"
import { useContext, useEffect, useState } from "react"
import axios from "axios"
import { useNavigate, useParams } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { convertToUser } from "../utils/converToUser"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  EditOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"
import { UserDto } from "../models/UserDto"

const { Title, Text } = Typography

const EditUserPage = () => {
  const { id } = useParams()
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const { setUser } = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL
  const [myUser, setMyUser] = useState<UserDto>({
    id: 0,
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    idNumber: "",
    password: "",
    role: 0,
    status: "", // Default value for status
    lastLogin: new Date(), // Default value for lastLogin
    createdAt: new Date(), // Default value for createdAt
    updateAt: new Date(), // Default value for updateAt
    businessId: 0, // Default value for businessId
  })

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data } = await axios.get<UserDto>(`${url}/api/User/${id}`, { withCredentials: true })
        setMyUser(data)
      } catch (e) {
        setErrors(["שגיאה בטעינת נתוני המשתמש"])
      }
    }

    if (id) fetchUser()
  }, [id, url])

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(myUser)
      setErrors([])

      if (valid && id) {        
        const { data } = await axios.put<UserPostModel>(`${url}/api/User/${id}`, myUser, { withCredentials: true })
        setUser(convertToUser(data))
        nav("/user-management")
      } else {
        setErrors(["נא למלא את כל השדות הנדרשים"])
      }
    } catch (e) {
      setErrors(["שגיאה בעדכון המשתמש"])
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto", marginTop: "70vh" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <EditOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              עריכת משתמש
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              עדכן את פרטי המשתמש
            </Text>

            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא (חדשה)" required>
                  <Input.Password
                    prefix={<LockOutlined />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<EditOutlined />}
                  block
                  style={{ height: 48, fontWeight: 600, fontSize: 16 }}
                >
                  עדכן משתמש
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav(-1)}
                  block
                  style={{ height: 48, fontWeight: 600, borderWidth: 2 }}
                >
                  חזרה
                </Button>
              </Col>
            </Row>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default EditUserPage
"use client"

import { useContext, useEffect, useState } from "react"
import { Typography, Row, Col, Card, Button, Space, Avatar, ConfigProvider } from "antd"
import {
  DashboardOutlined,
  ShopOutlined,
  DollarOutlined,
  BarChartOutlined,
  ArrowRightOutlined,
  TeamOutlined,
  EyeOutlined,
  UploadOutlined,
  RiseOutlined,
  FallOutlined,
  BuildOutlined,
} from "@ant-design/icons"
import { motion } from "framer-motion"
import { useNavigate } from "react-router-dom"
import { useMediaQuery } from "react-responsive"
import { globalContext } from "../context/GlobalContext"
import axios from "axios"
import dayjs from "dayjs"
import type { UserDto } from "../models/UserDto"
import { blue, green, orange, purple } from "../App"

const { Title, Text, Paragraph } = Typography

const MyHome = () => {
  const globalContextDetails = useContext(globalContext)
  const url = import.meta.env.VITE_API_URL
  const nav = useNavigate()
  const [incomes, setIcomes] = useState<number>(0)
  const [incomesPrecent, setIcomesPrecent] = useState<number>(0)
  const [expenses, setExpenses] = useState<number>(0)
  const [expensesPrecent, setExpensesPrecent] = useState<number>(0)
  const [userPrecent, setUserPrecent] = useState<number>(0)
  const users = globalContextDetails.usersCount || 0
  const [monthlyReport, setMonthlyReport] = useState<number | null>(null)

  const navigate = useNavigate()
  const isMobile = useMediaQuery({ maxWidth: 768 })

  const menuItems = [
    {
      title: "לוח בקרה",
      icon: <DashboardOutlined style={{ fontSize: isMobile ? 24 : 32, color: "#667eea" }} />,
      description: "צפה בנתונים עדכניים של העסק שלך",
      path: "/view-data",
      color: "#667eea",
    },
    {
      title: "פרטי העסק",
      icon: <ShopOutlined style={{ fontSize: isMobile ? 24 : 32, color: green }} />,
      description: " אין לך עדיין עסק? בוא נקים אותו יחד:)",
      path: "/register-admin&business",
      color: green,
    },
    {
      title: "הוספת תנועה בחשבון",
      icon: <DollarOutlined style={{ fontSize: isMobile ? 24 : 32, color: orange }} />,
      description: "נהל תנועות שונות בחשבון שלך",
      path: "/account-transactions",
      color: orange,
    },
    {
      title: "דוחות",
      icon: <BarChartOutlined style={{ fontSize: isMobile ? 24 : 32, color: purple }} />,
      description: "צפה בדוחות ביצועים ותחזיות",
      path: "/production-reports",
      color: purple,
    },
  ]

  const quickActions = [
    { title: "צפייה בנתונים", icon: <EyeOutlined />, path: "/view-data" },
    { title: "העלאת קבצים", icon: <UploadOutlined />, path: "/upload-file" },
    { title: "ניהול משתמשים", icon: <TeamOutlined />, path: "/user-management" },
  ]

  const statsData = [
    {
      title: "הכנסות החודש",
      value: incomes,
      prefix: "₪",
      trend: incomesPrecent,
      color: green,
      icon: <DollarOutlined />,
    },
    {
      title: "משתמשים פעילים",
      value: users,
      trend: userPrecent,
      color: blue,
      icon: <TeamOutlined />,
    },
    {
      title: "מדד חודשי",
      value: monthlyReport ?? 0,
      suffix: "%",
      trend: incomesPrecent,
      color: purple,
      icon: <RiseOutlined />,
    },
    {
      title: "הוצאות החודש",
      value: expenses,
      trend: expensesPrecent,
      color: orange,
      icon: <BarChartOutlined />,
    },
  ]

  const fetchUserGrowthPercent = async (businessId: number): Promise<number> => {
    try {
      const response = await axios.get<UserDto[]>(`${url}/api/User/users-by-business/${businessId}`)
      const users = response.data

      const now = dayjs()
      const currentMonth = now.month()
      const currentYear = now.year()
      const lastMonth = now.subtract(1, "month").month()
      const lastMonthYear = now.subtract(1, "month").year()

      const usersThisMonth = users.filter((user) => {
        const created = dayjs(user.createdAt)
        return created.month() === currentMonth && created.year() === currentYear
      })

      const usersLastMonth = users.filter((user) => {
        const created = dayjs(user.createdAt)
        return created.month() === lastMonth && created.year() === lastMonthYear
      })

      const countThisMonth = usersThisMonth.length
      const countLastMonth = usersLastMonth.length

      if (countLastMonth === 0) {
        return countThisMonth > 0 ? 100 : 0
      }

      const percentGrowth = ((countThisMonth - countLastMonth) / countLastMonth) * 100
      return Math.round(percentGrowth)
    } catch (error) {
      console.error("שגיאה בעת שליפת המשתמשים:", error)
      return 0
    }
  }

  useEffect(() => {
    const fetchMonthlyReport = async () => {
      console.log(globalContextDetails.user);
      
      try {
        const businessId = globalContextDetails.business_global.id
        const year = new Date().getFullYear()
        const month = new Date().getMonth() + 1
        const res = await axios.get(
          `${url}/api/Reports/monthly?businessId=${businessId}&year=${year}&month=${month}`,
        )
        setMonthlyReport(res.data?.monthlyMetric ?? 0)
        setIcomes(res.data?.currentMonthIncome ?? 0)
        setIcomesPrecent(res.data?.incomeChangePercent ?? 0)
        setExpenses(res.data?.currentMonthExpenses ?? 0)
        setExpensesPrecent(res.data?.expensesChangePercent ?? 0)
        setUserPrecent(await fetchUserGrowthPercent(businessId))
      } catch (err) {
        console.error("שגיאה בקבלת דוח חודשי:", err)
        setMonthlyReport(0)
      }
    }

    if (globalContextDetails.business_global?.id) {
      fetchMonthlyReport()
    }
  }, [globalContextDetails.business_global?.id])

  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  }

  return (
    <ConfigProvider direction="rtl">
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="show"
        style={{
          width: "100%",
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
        }}
      >
        {/* Hero Section - Full Screen */}
        <motion.div
          className="hero-section"
          variants={containerVariants}
          style={{
            minHeight: "100vh",
            background: "linear-gradient(135deg,purple 0%,#6878e2  100%) ",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "60px 40px",
            position: "relative",
          }}
        >
          <div
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background:
                'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>\')',
              opacity: 0.3,
            }}
          />
          <Row gutter={[48, 48]} align="middle" style={{ width: "100%", maxWidth: "1400px", zIndex: 1 }}>
            <Col xs={24} lg={12}>
              <motion.div variants={containerVariants} style={{ textAlign: "center" }}>
                <Title
                  level={1}
                  style={{
                    color: "white",
                    marginBottom: 32,
                    fontSize: isMobile ? "3rem" : "4rem",
                    fontWeight: 700,
                    lineHeight: 1.2,
                    textShadow: "0 4px 20px rgba(0,0,0,0.3)",
                  }}
                >
                  שלום, {globalContextDetails.user?.firstName || "אורח"}
                </Title>
                <Title
                  level={2}
                  style={{
                    color: "rgba(255,255,255,0.95)",
                    marginBottom: 40,
                    fontWeight: 300,
                    fontSize: isMobile ? "1.8rem" : "2.4rem",
                    lineHeight: 1.4,
                  }}
                >
                  ברוכים הבאים למערכת BusinessMan
                </Title>
                <Paragraph
                  style={{
                    color: "rgba(255,255,255,0.85)",
                    fontSize: isMobile ? 18 : 22,
                    marginBottom: 60,
                    lineHeight: 1.7,
                    maxWidth: "600px",
                    margin: "0 auto 60px auto",
                  }}
                >
                  הדרך החכמה לנהל את העסק שלך - כלים מתקדמים לניהול הכנסות, הוצאות ודוחות
                </Paragraph>
                <Space size="large" wrap style={{ justifyContent: "center" }}>
                  <Button
                    type="primary"
                    size="large"
                    onClick={() => navigate("/view-data")}
                    style={{
                      height: 70,
                      padding: "0 50px",
                      background: "rgba(255,255,255,0.2)",
                      borderColor: "rgba(255,255,255,0.4)",
                      color: "white",
                      fontWeight: 600,
                      fontSize: 20,
                      borderRadius: 35,
                      backdropFilter: "blur(10px)",
                      boxShadow: "0 8px 32px rgba(0,0,0,0.2)",
                    }}
                  >
                    צפה בנתוני העסק
                  </Button>
                  <Button
                    size="large"
                    onClick={() => navigate("/account-transactions")}
                    style={{
                      height: 70,
                      padding: "0 50px",
                      background: orange,
                      borderColor: orange,
                      color: "white",
                      fontWeight: 600,
                      fontSize: 20,
                      borderRadius: 35,
                      boxShadow: "0 8px 32px rgba(250,140,22,0.3)",
                    }}
                  >
                    נהל תנועות בעסק
                  </Button>
                </Space>
              </motion.div>
            </Col>
            <Col xs={24} lg={12} style={{ textAlign: "center" }}>
              <motion.div variants={containerVariants}>
                <div
                  style={{
                    width: "100%",
                    maxWidth: 600,
                    height: 500,
                    background: "rgba(255,255,255,0.15)",
                    borderRadius: 40,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    backdropFilter: "blur(20px)",
                    border: "2px solid rgba(255,255,255,0.3)",
                    margin: "0 auto",
                    boxShadow: "0 20px 60px rgba(0,0,0,0.2)",
                  }}
                >
                  <BuildOutlined style={{ fontSize: 200, color: "rgba(255,255,255,0.9)" }} />
                </div>
              </motion.div>
            </Col>
          </Row>
        </motion.div>

        {/* Stats Section - Full Screen */}
        <motion.div
          variants={containerVariants}
          style={{
            minHeight: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "80px 40px",
            background: "linear-gradient(180deg, #f8fafc 0%, #e2e8f0 100%)",
            position: "relative",
            width: "100%",
          }}
        >
          <div style={{ width: "100%", maxWidth: "1400px" }}>
            <div style={{ textAlign: "center", marginBottom: 80 }}>
              <Title
                level={1}
                style={{
                  marginBottom: 24,
                  fontSize: isMobile ? "2.5rem" : "3.5rem",
                  color: "#1a202c",
                  fontWeight: 700,
                }}
              >
                סטטיסטיקות העסק
              </Title>
              <Text
                style={{
                  fontSize: 20,
                  color: "#4a5568",
                  display: "block",
                  maxWidth: "600px",
                  margin: "0 auto",
                  lineHeight: 1.6,
                }}
              >
                מבט כללי על ביצועי העסק שלך החודש
              </Text>
            </div>
            <Row gutter={[40, 40]} justify="center">
              {statsData.map((stat, index) => (
                <Col xs={24} sm={12} lg={6} key={index}>
                  <motion.div variants={containerVariants}>
                    <Card
                      style={{
                        // height: "280px",
                        borderRadius: "32px",
                        border: "none",
                        boxShadow: "0 20px 60px rgba(0, 0, 0, 0.08)",
                        background: "white",
                        overflow: "hidden",
                        position: "relative",
                      }}
                    >
                      <div
                        style={{
                          position: "absolute",
                          top: 0,
                          left: 0,
                          right: 0,
                          height: "6px",
                          background: `linear-gradient(90deg, ${stat.color}, ${stat.color}80)`,
                        }}
                      />
                      <div
                        style={{
                          display: "flex",
                          flexDirection: "column",
                          alignItems: "center",
                          justifyContent: "center",
                          textAlign: "center",
                          height: "100%",
                          // padding: "40px 24px",
                        }}
                      >
                        <Avatar
                          size={100}
                          style={{
                            background: `${stat.color}15`,
                            color: stat.color,
                            marginBottom: 32,
                            border: `3px solid ${stat.color}30`,
                          }}
                        >
                          <div style={{ fontSize: 40 }}>{stat.icon}</div>
                        </Avatar>
                        <Title
                          level={4}
                          style={{
                            color: "#2d3748",
                            marginBottom: 16,
                            fontSize: 16,
                            fontWeight: 500,
                          }}
                        >
                          {stat.title}
                        </Title>
                        <div
                          style={{
                            color: stat.color,
                            fontSize: "2.8rem",
                            fontWeight: "bold",
                            marginBottom: 16,
                            lineHeight: 1,
                          }}
                        >
                          {stat.prefix}
                          {stat.value}
                          {stat.suffix}
                        </div>
                        <div style={{ display: "flex", alignItems: "center" }}>
                          {stat.trend > 0 ? (
                            <RiseOutlined style={{ color: "#48bb78", marginLeft: 8, fontSize: 20 }} />
                          ) : (
                            <FallOutlined style={{ color: "#f56565", marginLeft: 8, fontSize: 20 }} />
                          )}
                          <Text
                            style={{
                              color: stat.trend > 0 ? "#48bb78" : "#f56565",
                              fontWeight: 600,
                              fontSize: 18,
                            }}
                          >
                            {stat.trend > 0 ? "+" : ""}
                            {stat.trend}%
                          </Text>
                        </div>
                      </div>
                    </Card>
                  </motion.div>
                </Col>
              ))}
            </Row>
          </div>
        </motion.div>

        {/* Quick Actions - Full Screen */}
        <motion.div
          variants={containerVariants}
          style={{
            minHeight: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "0 30px",
            background: "white",
            position: "relative",
            width: "100%",
          }}
        >
          <div style={{ width: "100%", maxWidth: "800px" }}>
            <Title
              level={2}
              style={{
                textAlign: "center",
                marginBottom: 60,
                fontSize: isMobile ? "2rem" : "2.5rem",
                color: "#2d3748",
              }}
            >
              פעולות מהירות
            </Title>
            <Row gutter={[24, 24]}>
              {quickActions.map((action, index) => (
                <Col xs={24} sm={8} key={index}>
                  <motion.div variants={containerVariants}>
                    <Button
                      type="default"
                      size="large"
                      icon={action.icon}
                      onClick={() => navigate(action.path)}
                      block
                      style={{
                        height: "120px",
                        borderRadius: 20,
                        borderWidth: 2,
                        fontWeight: 600,
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "center",
                        justifyContent: "center",
                        fontSize: 18,
                        gap: 12,
                      }}
                    >
                      <div style={{ fontSize: 32 }}>{action.icon}</div>
                      {action.title}
                    </Button>
                  </motion.div>
                </Col>
              ))}
            </Row>
          </div>
        </motion.div>

        {/* Main Menu Cards - Full Screen */}
        <motion.div
          variants={containerVariants}
          style={{
            minHeight: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "0 30px",
            background: "#f8fafc",
            position: "relative",
            width: "100%",
          }}
        >
          <div style={{ width: "100%", maxWidth: "1200px" , height: "100%" }}>
            <div style={{ textAlign: "center", marginBottom: 60 }}>
              <Title
                level={2}
                style={{
                  marginBottom: 16,
                  fontSize: isMobile ? "2rem" : "2.5rem",
                  color: "#2d3748",
                }}
              >
                ניהול העסק שלך
              </Title>
              <Text
                type="secondary"
                style={{
                  fontSize: 18,
                  display: "block",
                  maxWidth: "600px",
                  margin: "0 auto",
                  lineHeight: 1.6,
                }}
              >
                כל הכלים שאתה צריך לניהול יעיל ומוצלח של העסק שלך במקום אחד
              </Text>
            </div>

            <Row gutter={[32, 32]} >
              {menuItems.map((item, index) => (
                <Col xs={24} sm={12} lg={6} key={index}>
                  <motion.div variants={containerVariants} style={{ height: "100%" }}>
                    <Card
                      className="feature-card"
                      hoverable
                      style={{
                        height: "100%",
                        borderRadius: "24px",
                        border: "none",
                        boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
                        background: "white",
                      }}
                      bodyStyle={{
                        height: "100%",
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "space-between",
                      }}
                    >
                      <div>
                        <div
                          className="icon-wrapper"
                          style={{
                            background: `${item.color}20`,
                            color: item.color,
                            width: "80px",
                            height: "80px",
                            borderRadius: "20px",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            marginBottom: "24px",
                            fontSize: "40px",
                          }}
                        >
                          {item.icon}
                        </div>
                        <Title
                          level={3}
                          style={{
                            marginBottom: 16,
                            color: "#2d3748",
                            fontSize: "1.5rem",
                          }}
                        >
                          {item.title}
                        </Title>
                        <Paragraph
                          type="secondary"
                          style={{
                            marginBottom: 32,
                            fontSize: 16,
                            lineHeight: 1.5,
                          }}
                        >
                          {item.description}
                        </Paragraph>
                      </div>
                      <Button
                        type="primary"
                        icon={<ArrowRightOutlined />}
                        onClick={() => navigate(item.path)}
                        style={{
                          height: 50,
                          background: item.color,
                          borderColor: item.color,
                          fontWeight: 600,
                          fontSize: 16,
                        }}
                        block
                      >
                        כניסה
                      </Button>
                    </Card>
                  </motion.div>
                </Col>
              ))}
            </Row>
          </div>
        </motion.div>

        {/* Testimonial & Footer - Full Screen */}
        <motion.div
          variants={containerVariants}
          style={{
            minHeight: "100vh",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            padding: "0 30px",
            background: "white",
            position: "relative",
            width: "100%",
          }}
        >
          <div
            style={{
              width: "100%",
              maxWidth: "1000px",
              flex: 1,
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
            }}
          >
            <Card
              className="testimonial-section"
              style={{
                background: "linear-gradient(135deg, #f7f9fc 0%, #eef2f7 100%)",
                border: "none",
                borderRadius: "30px",
                marginBottom: 60,
                boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              }}
              bodyStyle={{
                padding: "60px",
              }}
            >
              <Row gutter={[32, 32]} align="middle">
                <Col xs={24} lg={16}>
                  <Title
                    level={3}
                    style={{
                      color: "#667eea",
                      marginBottom: 24,
                      fontSize: isMobile ? "1.5rem" : "2rem",
                      textAlign: isMobile ? "center" : "right",
                      lineHeight: 1.4,
                    }}
                  >
                    "מערכת BusinessMan שינתה את הדרך שבה אני מנהל את העסק שלי. הכל נגיש ויעיל."
                  </Title>
                  <Text
                    type="secondary"
                    style={{
                      fontSize: 16,
                      display: "block",
                      textAlign: isMobile ? "center" : "right",
                    }}
                  >
                    יוסי כהן, בעלים של "טכנולוגיות מתקדמות" בע״מ
                  </Text>
                </Col>
                <Col xs={24} lg={8} style={{ textAlign: "center" }}>
                  <Button
                    type="primary"
                    size="large"
                    onClick={() => navigate("/register-user")}
                    style={{
                      height: 60,
                      padding: "0 40px",
                      fontWeight: 600,
                      marginBottom: 16,
                      fontSize: 18,
                    }}
                  >
                    הצטרף עכשיו
                  </Button>
                  <div>
                    <Text
                      type="secondary"
                      style={{
                        fontSize: 14,
                        display: "block",
                      }}
                    >
                      הצטרפו למאות עסקים שכבר משתמשים במערכת
                    </Text>
                  </div>
                </Col>
              </Row>
            </Card>

            {/* Footer */}
            <div style={{ borderTop: "1px solid #f0f0f0", paddingTop: 40 }}>
              <Row justify="space-between" align="middle" gutter={[16, 16]}>
                <Col xs={24} sm={12}>
                  <Space style={{ width: "100%", justifyContent: isMobile ? "center" : "flex-start" }}>
                    <Avatar size={48} style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
                      <DashboardOutlined />
                    </Avatar>
                    <div style={{ textAlign: isMobile ? "center" : "right" }}>
                      <Title
                        level={4}
                        style={{
                          margin: 0,
                          color: "#667eea",
                          fontSize: "1.5rem",
                        }}
                      >
                        BusinessMan
                      </Title>
                      <Text
                        type="secondary"
                        style={{
                          fontSize: 14,
                        }}
                      >
                        © 2025 BusinessMan. כל הזכויות שמורות.
                      </Text>
                    </div>
                  </Space>
                </Col>
                <Col xs={24} sm={12}>
                  <Space style={{ width: "100%", justifyContent: isMobile ? "center" : "flex-end" }}>
                    <Button onClick={() => {nav("/term-of-service")}} type="text" size="large" style={{ fontSize: 16 }}>
                      תנאי שימוש
                    </Button>
                    <Button onClick={() => {nav("/private-policy")}} type="text" size="large" style={{ fontSize: 16 }}>
                      פרטיות
                    </Button>
                    <Button onClick={() => {nav('/concat-us')}} type="text" size="large" style={{ fontSize: 16 }}>
                      צור קשר
                    </Button>
                  </Space>
                </Col>
              </Row>
            </div>
          </div>
        </motion.div>

      </motion.div>
    </ConfigProvider>
  )
}

export default MyHome
"use client"

import type React from "react"
import { Typography, Card, ConfigProvider, Avatar, Row, Col, Timeline, Alert } from "antd"
import {
  CheckOutlined,
  LockOutlined,
  EyeInvisibleOutlined,
  SafetyOutlined,
  UserOutlined,
  DatabaseOutlined,
} from "@ant-design/icons"

const { Title, Text, Paragraph } = Typography

const PrivacyPolicy: React.FC = () => {
  const privacySections = [
    {
      icon: <DatabaseOutlined style={{ color: "#1890ff" }} />,
      title: "איסוף מידע",
      content: [
        "אנו אוספים מידע אישי שאתה מספק לנו בעת הרשמה למערכת",
        "מידע על השימוש שלך במערכת לשיפור השירות",
        "מידע טכני כמו כתובת IP וסוג דפדפן",
        "מידע עסקי הנדרש לתפעול המערכת",
      ],
    },
    {
      icon: <LockOutlined style={{ color: "#52c41a" }} />,
      title: "שימוש במידע",
      content: [
        "מתן השירותים המבוקשים על ידך",
        "שיפור וטיוב המערכת והשירותים",
        "יצירת קשר איתך בנושאים רלוונטיים",
        "עמידה בדרישות חוקיות ורגולטוריות",
      ],
    },
    {
      icon: <SafetyOutlined style={{ color: "#fa8c16" }} />,
      title: "אבטחת מידע",
      content: [
        "הצפנה מתקדמת של כל המידע הרגיש",
        "גיבויים קבועים ומאובטחים",
        "הגבלת גישה למידע לעובדים מורשים בלבד",
        "מעקב ובקרה על כל פעילות במערכת",
      ],
    },
    {
      icon: <EyeInvisibleOutlined style={{ color: "#722ed1" }} />,
      title: "שיתוף מידע",
      content: [
        "איננו מוכרים או משתפים מידע אישי עם צדדים שלישיים",
        "שיתוף מידע רק במקרים חוקיים נדרשים",
        "שיתוף מידע עם ספקי שירות מורשים בלבד",
        "קבלת הסכמה מפורשת לכל שיתוף מידע",
      ],
    },
  ]

  const userRights = [
    "זכות עיון במידע האישי השמור עליך",
    "זכות תיקון מידע שגוי או לא מדויק",
    "זכות מחיקת מידע אישי",
    "זכות הגבלת עיבוד המידע",
    "זכות העברת מידע למערכת אחרת",
    "זכות התנגדות לעיבוד מידע",
  ]

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          padding: "40px 20px",
        }}
      >
        <div style={{ maxWidth: 1000, margin: "0 auto" }}>
          {/* Header */}
          <div style={{ textAlign: "center", marginBottom: 60 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)",
                marginBottom: 24,
              }}
            >
              <CheckOutlined style={{ fontSize: 40 }} />
            </Avatar>
            <Title level={1} style={{ color: "#2d3748", marginBottom: 16 }}>
              מדיניות פרטיות
            </Title>
            <Paragraph
              style={{
                fontSize: 18,
                color: "#718096",
                maxWidth: 600,
                margin: "0 auto",
                lineHeight: 1.6,
              }}
            >
              אנו מתחייבים להגן על הפרטיות שלך ולשמור על המידע האישי שלך בצורה מאובטחת ואחראית.
            </Paragraph>
          </div>

          {/* Last Updated */}
          <Alert
            message="עדכון אחרון: 15 בדצמבר 2024"
            description="מדיניות הפרטיות עודכנה לאחרונה בתאריך זה. אנא קרא בעיון את השינויים."
            type="info"
            showIcon
            style={{ marginBottom: 40, borderRadius: 12 }}
          />

          {/* Main Content */}
          <Card
            style={{
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
              marginBottom: 40,
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <Title level={2} style={{ color: "#2d3748", marginBottom: 24 }}>
              מבוא
            </Title>
            <Paragraph style={{ fontSize: 16, lineHeight: 1.7, color: "#4a5568" }}>
              ברוכים הבאים למערכת BusinessMan. אנו מכבדים את פרטיותך ומתחייבים להגן על המידע האישי שלך. מדיניות פרטיות
              זו מסבירה כיצד אנו אוספים, משתמשים, ומגנים על המידע שלך כאשר אתה משתמש בשירותים שלנו.
            </Paragraph>
            <Paragraph style={{ fontSize: 16, lineHeight: 1.7, color: "#4a5568" }}>
              על ידי שימוש במערכת שלנו, אתה מסכים לתנאים המפורטים במדיניות פרטיות זו. אם אינך מסכים לתנאים אלה, אנא
              הימנע משימוש במערכת.
            </Paragraph>
          </Card>

          {/* Privacy Sections */}
          <Row gutter={[24, 24]} style={{ marginBottom: 40 }}>
            {privacySections.map((section, index) => (
              <Col xs={24} md={12} key={index}>
                <Card
                  style={{
                    height: "100%",
                    borderRadius: 16,
                    boxShadow: "0 4px 20px rgba(0, 0, 0, 0.08)",
                    border: "none",
                  }}
                  bodyStyle={{ padding: "24px" }}
                >
                  <div style={{ display: "flex", alignItems: "center", marginBottom: 16 }}>
                    <Avatar
                      size={40}
                      style={{
                        background: `${section.icon.props.style.color}15`,
                        marginLeft: 12,
                      }}
                    >
                      {section.icon}
                    </Avatar>
                    <Title level={4} style={{ margin: 0, color: "#2d3748" }}>
                      {section.title}
                    </Title>
                  </div>
                  <ul style={{ paddingRight: 20, margin: 0 }}>
                    {section.content.map((item, itemIndex) => (
                      <li key={itemIndex} style={{ marginBottom: 8 }}>
                        <Text style={{ color: "#4a5568", lineHeight: 1.6 }}>{item}</Text>
                      </li>
                    ))}
                  </ul>
                </Card>
              </Col>
            ))}
          </Row>

          {/* User Rights */}
          <Card
            style={{
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
              marginBottom: 40,
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <div style={{ display: "flex", alignItems: "center", marginBottom: 24 }}>
              <Avatar
                size={48}
                style={{
                  background: "linear-gradient(135deg, #722ed1 0%, #531dab 100%)",
                  marginLeft: 16,
                }}
              >
                <UserOutlined style={{ fontSize: 24 }} />
              </Avatar>
              <Title level={2} style={{ margin: 0, color: "#2d3748" }}>
                הזכויות שלך
              </Title>
            </div>
            <Paragraph style={{ fontSize: 16, lineHeight: 1.7, color: "#4a5568", marginBottom: 24 }}>
              כמשתמש במערכת שלנו, יש לך זכויות חשובות בנוגע למידע האישי שלך:
            </Paragraph>
            <Timeline
              items={userRights.map((right, index) => ({
                children: <Text style={{ fontSize: 16, color: "#4a5568" }}>{right}</Text>,
                color: index % 2 === 0 ? "#1890ff" : "#52c41a",
              }))}
            />
          </Card>

          {/* Contact Information */}
          <Card
            style={{
              borderRadius: 20,
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              border: "none",
              color: "white",
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <Title level={3} style={{ color: "white", marginBottom: 16 }}>
              יש לך שאלות?
            </Title>
            <Paragraph style={{ color: "rgba(255,255,255,0.9)", fontSize: 16, lineHeight: 1.6 }}>
              אם יש לך שאלות או חששות בנוגע למדיניות הפרטיות שלנו, אנא צור איתנו קשר:
            </Paragraph>
            <div style={{ color: "rgba(255,255,255,0.9)" }}>
              <div style={{ marginBottom: 8 }}>
                📧 <strong>אימייל:</strong> brurya.zarbiv@gmail.com
              </div>
              <div style={{ marginBottom: 8 }}>
                📞 <strong>טלפון:</strong> 055-675-8244
              </div>
              <div>
                📍 <strong>כתובת:</strong> חתם סופר 16 עמנואל
              </div>
            </div>
          </Card>
        </div>
      </div>
    </ConfigProvider>
  )
}

export default PrivacyPolicy
import {
  Typography,
  Card,
  ConfigProvider,
  Tabs,
  Divider,
  Spin,
  Row,
  Col,
  Statistic,
  Avatar,
  Space,
  Tag,
  Button,
} from "antd";
import {
  BarChartOutlined,
  PieChartOutlined,
  LineChartOutlined,
  FileTextOutlined,
  WarningOutlined,
  DingdingOutlined,
  DollarOutlined,
  CalendarOutlined,
  DownloadOutlined,
  PrinterOutlined,
} from "@ant-design/icons";
import { useContext, useEffect, useState } from "react";
import axios from "axios";
import { globalContext } from "../context/GlobalContext";
import type { ProdactionReportData, ProdactionReportMonthlyData } from "../models/ProdactionReportData";
import { TrendingDownOutlined, TrendingUpOutlined } from "@mui/icons-material";

import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const { Title, Text } = Typography;
const { TabPane } = Tabs;

const ProductionReports = () => {
  const [activeTab, setActiveTab] = useState("1");
  const [reportData, setReportData] = useState<ProdactionReportData | null>(null);
  const [monthlyReportData, setMonthlyReportData] = useState<ProdactionReportMonthlyData | null>(null);
  const [loading, setLoading] = useState(true);
  const globalContextDetails = useContext(globalContext);
  const url = import.meta.env.VITE_API_URL;

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/business-report/${globalContextDetails.business_global.id}`,
          { withCredentials: true }
        );
        setReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח ייצור:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const { data } = await axios.get(
          `${url}/api/Reports/monthly?businessId=${globalContextDetails.business_global.id}&year=${new Date().getFullYear()}&month=${new Date().getMonth() + 1}`,
          { withCredentials: true }
        );
        setMonthlyReportData(data);
      } catch (error) {
        console.error("שגיאה בטעינת דוח:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  const reportMetrics = reportData && monthlyReportData
    ? [
      {
        title: "סה״כ הכנסות",
        value: reportData.totalIncome,
        prefix: "₪",
        icon: <WarningOutlined />,
        color: "#52c41a",
        change: monthlyReportData.incomeChangePercent,
      },
      {
        title: "סה״כ הוצאות",
        value: reportData.totalExpenses,
        prefix: "₪",
        icon: <DingdingOutlined />,
        color: "#ff4d4f",
        change: monthlyReportData.expensesChangePercent,
      },
      {
        title: "רווח נקי",
        value: reportData.netProfit,
        prefix: "₪",
        icon: <DollarOutlined />,
        color: "#1890ff",
        change: monthlyReportData.netProfitChangePercent,
      },
      {
        title: "תזרים מזומנים",
        value: reportData.cashFlow,
        prefix: "₪",
        icon: <BarChartOutlined />,
        color: "#722ed1",
        change: 0, // אם יש לך ערך דינמי גם לזה, שים אותו כאן
      },
      {
        title: "מספר חשבוניות",
        value: reportData.invoiceCount,
        icon: <FileTextOutlined />,
        color: "#fa8c16",
        change: 0, // אם יש לך שינוי במספר חשבוניות מחודש קודם
      },
      {
        title: "סה״כ סכום חובה",
        value: reportData.totalDebit,
        prefix: "₪",
        icon: <TrendingDownOutlined />,
        color: "#f5222d",
        change: 0,
      },
      {
        title: "סה״כ סכום זכות",
        value: reportData.totalCredit,
        prefix: "₪",
        icon: <TrendingUpOutlined />,
        color: "#13c2c2",
        change: 0,
      },
      {
        title: "תאריך הדוח",
        value: new Date(reportData.reportDate).toLocaleDateString("he-IL"),
        icon: <CalendarOutlined />,
        color: "#666",
        change: 0,
      },
    ]
    : [];

  const handlePrint = () => {
    const printContent = document.getElementById("report-to-print")?.innerHTML;
    if (!printContent) return;

    const newWindow = window.open("", "_blank");
    newWindow?.document.write(`
        <html>
          <head>
            <title>דוח ייצור - ${reportData?.businessName ?? ""}</title>
            <style>
        body {
          direction: rtl;
          font-family: Arial, sans-serif;
          padding: 20px;
          background-color: #1e1e1e;
          color: #ffffff;
        }

        table {
          width: 100%;
          border-collapse: collapse;
          background-color: #2c2c2c;
          color: #ffffff;
        }

        th, td {
          border: 1px solid #555;
          padding: 8px;
          text-align: right;
        }

        th {
          background-color: #333;
          color: #f0f0f0;
        }

        h1, h2, h3, h4 {
          color: #ffffff;
        }

        .section {
          margin-bottom: 20px;
          padding: 10px;
          background-color: #2a2a2a;
          border-radius: 8px;
        }

        @media print {
          .business-metric {
            display: fles;
            flex-direction: row;
            align-items: center;
            max-height: 150px;
            padding: 4px;
            margin: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-family: "Assistant", "Rubik", "Heebo", sans-serif;
          }

          #report-to-print {
            page-break-inside: auto;
            break-inside: auto;
            color: black;
          }

          body {
            font-size: 12px;
            background-color: white !important;
            color: black !important;
          }

          .section {
            background-color: white !important;
          }

          table {
            background-color: white !important;
            color: black !important;
          }

          th {
            background-color: #eee !important;
            color: black !important;
          }
        }
      </style>
          </head>
          <body>
            ${printContent}
          </body>
        </html>
      `);
    newWindow?.document.close();
    newWindow?.focus();
    newWindow?.print();
    newWindow?.close();
  };

  const handleDownload = () => {
    const input = document.getElementById("report-to-print");
    if (!input) return;
  
    // הוספת פילטר שמגדיל קונטרסט
    input.style.filter = "contrast(1.3) brightness(0.9)";
  
    setTimeout(() => {
      html2canvas(input, { scale: 2 }).then((canvas) => {
        const imgData = canvas.toDataURL("image/png");
        const pdf = new jsPDF("p", "mm", "a4");
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
  
        pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
        pdf.save(`דוח_ייצור_${new Date().toLocaleDateString("he-IL")}.pdf`);
  
        // הסרת הפילטר אחרי הצילום
        input.style.filter = "";
      });
    }, 300);
  };
  
  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          padding: "40px 20px",
          maxWidth: 1400,
          margin: "0 auto",
        }}
      >
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <FileTextOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title
              level={2}
              style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}
            >
              דוח ייצור - {reportData?.businessName ?? "טוען..."}
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              צפה בביצועי הייצור והנתונים הפיננסיים של העסק שלך
            </Text>

            <Divider />
          </div>

          <div style={{ marginBottom: 24 }}>
            <Row gutter={[16, 16]} justify="end">
              <Col>
                <Button
                  type="primary"
                  icon={<DownloadOutlined />}
                  size="large"
                  onClick={handleDownload}
                >
                  הורד דוח
                </Button>
              </Col>
              <Col>
                <Button
                  type="default"
                  icon={<PrinterOutlined />}
                  size="large"
                  onClick={handlePrint}
                >
                  הדפס
                </Button>
              </Col>
            </Row>
          </div>

          <Tabs activeKey={activeTab} onChange={setActiveTab} size="large">
            <TabPane
              tab={
                <span>
                  <BarChartOutlined />
                  סקירה כללית
                </span>
              }
              key="1"
            >
              <div >
                {loading ? (
                  <div style={{ textAlign: "center", padding: "60px 0" }}>
                    <Spin size="large" />
                    <div style={{ marginTop: 24 }}>
                      <Text type="secondary" style={{ fontSize: 16 }}>
                        טוען נתוני הדוח...
                      </Text>
                    </div>
                  </div>
                ) : (
                  <Space direction="vertical" style={{ width: "100%" }} size="large">
                    <div id="report-to-print">
                      <Title level={4} style={{ marginBottom: 16 }}>
                        מדדים פיננסיים עיקריים
                      </Title>
                      <Row gutter={[16, 16]}>
                        {reportMetrics.map((metric, index) => (
                          <Col xs={24} sm={12} lg={6} key={index}>
                            <Card
                              className="business-metric"
                              style={{
                                height: "100%",
                                background: `${metric.color}08`,
                                border: `1px solid ${metric.color}30`,
                                borderRadius: 16,
                              }}
                            >
                              <Space direction="vertical" style={{ width: "100%" }}>
                                <div
                                  style={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                  }}
                                >
                                  <Text type="secondary" style={{ fontSize: 14 }}>
                                    {metric.title}
                                  </Text>
                                  <Avatar
                                    size={40}
                                    style={{
                                      background: `${metric.color}20`,
                                      color: metric.color,
                                    }}
                                  >
                                    {metric.icon}
                                  </Avatar>
                                </div>

                                <Statistic
                                  value={metric.value}
                                  prefix={metric.prefix}
                                  valueStyle={{
                                    color: metric.color,
                                    fontSize: "1.8rem",
                                    fontWeight: "bold",
                                  }}
                                />

                                {metric.change !== 0 && (
                                  <div
                                    style={{
                                      display: "flex",
                                      alignItems: "center",
                                      gap: 8,
                                    }}
                                  >
                                    <Tag color={metric.change > 0 ? "success" : "error"}>
                                      {metric.change > 0 ? "+" : ""}
                                      {metric.change}%
                                    </Tag>
                                    <Text type="secondary" style={{ fontSize: 12 }}>
                                      מהחודש הקודם
                                    </Text>
                                  </div>
                                )}
                              </Space>
                            </Card>
                          </Col>
                        ))}
                      </Row>
                    </div>
                  </Space>
                )}
              </div>
            </TabPane>

            {/* שאר הטאבס נשארים כפי שהם */}
            <TabPane
              tab={
                <span>
                  <LineChartOutlined />
                  מגמות
                </span>
              }
              key="2"
            >
              {/* תוכן הטאב */}
            </TabPane>

            <TabPane
              tab={
                <span>
                  <PieChartOutlined />
                  התפלגות
                </span>
              }
              key="3"
            >
              {/* תוכן הטאב */}
            </TabPane>
          </Tabs>
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default ProductionReports;
"use client"
import axios from "axios"
import { useState, useContext } from "react"
import { globalContext } from "../context/GlobalContext"
import type { BusinessPostModel } from "../models/BusinessPostModel"
import {  convertToBusinessDto } from "../utils/convertToBusiness"
import { validationSchemaBusinessRegister } from "../utils/validationSchema"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  ShopOutlined,
  MailOutlined,
  EnvironmentOutlined,
  TagOutlined,
  DollarOutlined,
  MinusCircleOutlined,
  BankOutlined,
  SaveOutlined,
  CreditCardOutlined,
} from "@ant-design/icons"
import { Business } from "../models/Business"

const { Title, Text } = Typography

const RegisterBusinessData = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const url = import.meta.env.VITE_API_URL
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const validationSchema = validationSchemaBusinessRegister
  const globalContextDetails = useContext(globalContext)

  const [businessData, setBusinessData] = useState<BusinessPostModel>({
    id: 0,
    businessId: 1,
    name: "עסק לדוגמה",
    address: "כתובת לדוגמה",
    email: "example@business.com",
    businessType: "סוג עסק לדוגמה",
    income: 10000,
    expenses: 5000,
    cashFlow: 5000,
    totalAssets: 20000,
    totalLiabilities: 10000,
  })

  const handleChange = (field: string, value: any) => {
    setBusinessData((prevData) => ({
      ...prevData,
      [field]: value,
    }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    setErrors([])
    try {
      await validationSchema.validate(businessData, { abortEarly: false })

      const { data } = await axios.post<Business>(`${url}/api/Business`, businessData, {
        withCredentials: true,
      })
      globalContextDetails.setBusinessGlobal(convertToBusinessDto(data))
      if (onSubmitSuccess) onSubmitSuccess()
    } catch (err: any) {
      if (err.name === "ValidationError") {
        if (axios.isAxiosError(err)) {
          setErrors([
            err.response?.data?.message || "שגיאה כללית מהשרת"
          ])
        } else {
          console.error("Unknown error:", err)
          setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
        }
      } else {
        console.error(err)
        setErrors(["שגיאה לא צפויה, נא לנסות שוב מאוחר יותר"])
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <Card className="form-section" style={{ width: "100%", maxWidth: "none" }}>
        <div style={{ textAlign: "center", marginBottom: 32 }}>
          <Avatar
            size={80}
            style={{
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              marginBottom: 16,
              boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
            }}
          >
            <ShopOutlined style={{ fontSize: 40 }} />
          </Avatar>
          <Title level={3} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
            רישום פרטי העסק
          </Title>
          <Text type="secondary" style={{ fontSize: 16 }}>
            נא למלא את כל הפרטים הנדרשים לרישום העסק שלך
          </Text>
          <Divider />
        </div>

        <Form layout="vertical" onFinish={handleSubmit}>
          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            פרטים בסיסיים
          </Title>
          <Row gutter={[24, 16]}>
            <Col xs={24} md={12}>
              <Form.Item label="מזהה ייחודי לעסק" required>
                <InputNumber
                  prefix={<ShopOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן מזהה עסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.businessId}
                  onChange={(value) => handleChange("businessId", value ?? 1)}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="שם העסק" required>
                <Input
                  prefix={<ShopOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן שם העסק"
                  size="large"
                  value={businessData.name}
                  onChange={(e) => handleChange("name", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="כתובת העסק" required>
                <Input
                  prefix={<EnvironmentOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן כתובת העסק"
                  size="large"
                  value={businessData.address}
                  onChange={(e) => handleChange("address", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={12}>
              <Form.Item label="אימייל של העסק" required>
                <Input
                  prefix={<MailOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן אימייל העסק"
                  size="large"
                  type="email"
                  value={businessData.email}
                  onChange={(e) => handleChange("email", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
            <Col xs={24}>
              <Form.Item label="סוג העסק" required>
                <Input
                  prefix={<TagOutlined style={{ color: "#667eea" }} />}
                  placeholder="הזן סוג העסק (לדוגמה: טכנולוגיה, מסחר, שירותים)"
                  size="large"
                  value={businessData.businessType}
                  onChange={(e) => handleChange("businessType", e.target.value)}
                  style={{ height: 48 }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider />

          <Title level={4} style={{ marginBottom: 24, color: "#667eea" }}>
            נתונים פיננסיים
          </Title>

          <Row gutter={[24, 16]}>
            <Col xs={24} md={8}>
              <Form.Item label="הכנסות העסק (₪)" required>
                <InputNumber
                  prefix={<DollarOutlined style={{ color: "#52c41a" }} />}
                  placeholder="הזן הכנסות העסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.income}
                  onChange={(value) => handleChange("income", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="הוצאות העסק (₪)" required>
                <InputNumber
                  prefix={<MinusCircleOutlined style={{ color: "#ff4d4f" }} />}
                  placeholder="הזן הוצאות העסק"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.expenses}
                  onChange={(value) => handleChange("expenses", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="תזרים מזומנים (₪)" required>
                <InputNumber
                  prefix={<BankOutlined style={{ color: "#1890ff" }} />}
                  placeholder="הזן תזרים מזומנים"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.cashFlow}
                  onChange={(value) => handleChange("cashFlow", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="סך הנכסים (₪)" required>
                <InputNumber
                  prefix={<BankOutlined style={{ color: "#722ed1" }} />}
                  placeholder="הזן סך הנכסים"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.totalAssets}
                  onChange={(value) => handleChange("totalAssets", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
            <Col xs={24} md={8}>
              <Form.Item label="סך ההתחייבויות (₪)" required>
                <InputNumber
                  prefix={<CreditCardOutlined style={{ color: "#fa8c16" }} />}
                  placeholder="הזן סך ההתחייבויות"
                  size="large"
                  style={{ width: "100%", height: 48 }}
                  value={businessData.totalLiabilities}
                  onChange={(value) => handleChange("totalLiabilities", value ?? 0)}
                  formatter={(value) => `₪ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  parser={(value) => Number(value!.replace(/₪\s?|(,*)/g, ""))}
                  min={0}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[16, 16]} style={{ marginTop: 32 }}>
            <Col xs={24}>
              <Button
                type="primary"
                htmlType="submit"
                size="large"
                loading={loading}
                icon={<SaveOutlined />}
                block
                style={{
                  height: 56,
                  fontWeight: 600,
                  fontSize: 16,
                  borderRadius: 12,
                  maxWidth: 220,
                }}
              >
                {loading ? "שומר נתונים..." : "שמור פרטי עסק"}
              </Button>
            </Col>
          </Row>

          {errors.length > 0 && (
            <div style={{ marginTop: 24 }}>
              {errors.map((error, index) => (
                <Alert key={index} message={error} type="error" showIcon style={{ marginBottom: 8, borderRadius: 8 }} />
              ))}
            </div>
          )}
        </Form>
      </Card>
    </ConfigProvider>
  )
}

export default RegisterBusinessData
"use client"

import type React from "react"
import { Typography, Card, ConfigProvider, Avatar, Row, Col, Steps, Alert, Tag } from "antd"
import {
  FileTextOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  SafetyOutlined,
  UserOutlined,
  CrownOutlined,
} from "@ant-design/icons"

const { Title, Text, Paragraph } = Typography

const TermsOfService: React.FC = () => {
  const termsSteps = [
    {
      title: "הסכמה לתנאים",
      description: "על ידי שימוש במערכת, אתה מסכים לכל התנאים המפורטים כאן",
      icon: <CheckCircleOutlined />,
    },
    {
      title: "שימוש אחראי",
      description: "השתמש במערכת באופן חוקי ואתי בלבד",
      icon: <SafetyOutlined />,
    },
    {
      title: "הגנה על מידע",
      description: "שמור על סודיות פרטי הגישה שלך ועל מידע רגיש",
      icon: <UserOutlined />,
    },
    {
      title: "עמידה בחוקים",
      description: "ציית לכל החוקים והתקנות הרלוונטיים",
      icon: <ExclamationCircleOutlined />,
    },
  ]

  const userObligations = [
    {
      title: "שמירה על פרטי גישה",
      description: "אתה אחראי לשמור על סודיות שם המשתמש והסיסמה שלך",
      severity: "high",
    },
    {
      title: "שימוש חוקי בלבד",
      description: "אסור להשתמש במערכת לפעילויות בלתי חוקיות או מזיקות",
      severity: "high",
    },
    {
      title: "דיווח על בעיות",
      description: "דווח על כל בעיה או תקלה שאתה מזהה במערכת",
      severity: "medium",
    },
    {
      title: "עדכון פרטים",
      description: "שמור על פרטיך עדכניים ומדויקים במערכת",
      severity: "medium",
    },
    {
      title: "גיבוי מידע",
      description: "מומלץ לבצע גיבויים קבועים למידע החשוב שלך",
      severity: "low",
    },
  ]

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "#ff4d4f"
      case "medium":
        return "#fa8c16"
      case "low":
        return "#52c41a"
      default:
        return "#1890ff"
    }
  }

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case "high":
        return "חובה"
      case "medium":
        return "חשוב"
      case "low":
        return "מומלץ"
      default:
        return "רגיל"
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          padding: "40px 20px",
        }}
      >
        <div style={{ maxWidth: 1000, margin: "0 auto" }}>
          {/* Header */}
          <div style={{ textAlign: "center", marginBottom: 60 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #fa8c16 0%, #d46b08 100%)",
                marginBottom: 24,
              }}
            >
              <FileTextOutlined style={{ fontSize: 40 }} />
            </Avatar>
            <Title level={1} style={{ color: "#2d3748", marginBottom: 16 }}>
              תנאי שימוש
            </Title>
            <Paragraph
              style={{
                fontSize: 18,
                color: "#718096",
                maxWidth: 600,
                margin: "0 auto",
                lineHeight: 1.6,
              }}
            >
              תנאי השימוש במערכת BusinessMan. אנא קרא בעיון לפני השימוש במערכת.
            </Paragraph>
          </div>

          {/* Last Updated */}
          <Alert
            message="עדכון אחרון: 15 בדצמבר 2024"
            description="תנאי השימוש עודכנו לאחרונה בתאריך זה. השינויים נכנסו לתוקף מיידית."
            type="warning"
            showIcon
            style={{ marginBottom: 40, borderRadius: 12 }}
          />

          {/* Introduction */}
          <Card
            style={{
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
              marginBottom: 40,
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <Title level={2} style={{ color: "#2d3748", marginBottom: 24 }}>
              מבוא
            </Title>
            <Paragraph style={{ fontSize: 16, lineHeight: 1.7, color: "#4a5568" }}>
              ברוכים הבאים למערכת BusinessMan לניהול עסקים. תנאי שימוש אלה מהווים הסכם משפטי בינך לבין החברה. השימוש
              במערכת מותנה בהסכמתך המלאה לתנאים אלה.
            </Paragraph>
            <Paragraph style={{ fontSize: 16, lineHeight: 1.7, color: "#4a5568" }}>
              אם אינך מסכים לתנאים אלה, אנא הימנע משימוש במערכת. המשך השימוש במערכת מהווה הסכמה לתנאים אלה.
            </Paragraph>
          </Card>

          {/* Steps */}
          <Card
            style={{
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
              marginBottom: 40,
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <Title level={2} style={{ color: "#2d3748", marginBottom: 32 }}>
              עקרונות יסוד
            </Title>
            <Steps
              direction="vertical"
              current={-1}
              items={termsSteps.map((step) => ({
                title: step.title,
                description: step.description,
                icon: step.icon,
              }))}
            />
          </Card>

          {/* User Obligations */}
          <Card
            style={{
              borderRadius: 20,
              boxShadow: "0 10px 30px rgba(0, 0, 0, 0.1)",
              border: "none",
              marginBottom: 40,
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <div style={{ display: "flex", alignItems: "center", marginBottom: 32 }}>
              <Avatar
                size={48}
                style={{
                  background: "linear-gradient(135deg, #722ed1 0%, #531dab 100%)",
                  marginLeft: 16,
                }}
              >
                <CrownOutlined style={{ fontSize: 24 }} />
              </Avatar>
              <Title level={2} style={{ margin: 0, color: "#2d3748" }}>
                חובות המשתמש
              </Title>
            </div>

            <Row gutter={[24, 24]}>
              {userObligations.map((obligation, index) => (
                <Col xs={24} md={12} key={index}>
                  <Card
                    size="small"
                    style={{
                      height: "100%",
                      borderRadius: 12,
                      border: `2px solid ${getSeverityColor(obligation.severity)}20`,
                    }}
                    bodyStyle={{ padding: "20px" }}
                  >
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "flex-start",
                        marginBottom: 12,
                      }}
                    >
                      <Title level={5} style={{ margin: 0, color: "#2d3748", flex: 1 }}>
                        {obligation.title}
                      </Title>
                      <Tag color={getSeverityColor(obligation.severity)} style={{ marginRight: 8 }}>
                        {getSeverityText(obligation.severity)}
                      </Tag>
                    </div>
                    <Text style={{ color: "#4a5568", lineHeight: 1.6 }}>{obligation.description}</Text>
                  </Card>
                </Col>
              ))}
            </Row>
          </Card>

          {/* Service Availability */}
          <Row gutter={[24, 24]} style={{ marginBottom: 40 }}>
            <Col xs={24} md={12}>
              <Card
                style={{
                  height: "100%",
                  borderRadius: 16,
                  boxShadow: "0 4px 20px rgba(0, 0, 0, 0.08)",
                  border: "none",
                }}
                bodyStyle={{ padding: "24px" }}
              >
                <Title level={4} style={{ color: "#2d3748", marginBottom: 16 }}>
                  זמינות השירות
                </Title>
                <ul style={{ paddingRight: 20, margin: 0 }}>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>אנו שואפים לזמינות של 99.9% אך לא מתחייבים לכך</Text>
                  </li>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>תחזוקות מתוכננות יבוצעו בהודעה מוקדמת</Text>
                  </li>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>אנו לא אחראים להפסקות שירות בשל כוח עליון</Text>
                  </li>
                </ul>
              </Card>
            </Col>

            <Col xs={24} md={12}>
              <Card
                style={{
                  height: "100%",
                  borderRadius: 16,
                  boxShadow: "0 4px 20px rgba(0, 0, 0, 0.08)",
                  border: "none",
                }}
                bodyStyle={{ padding: "24px" }}
              >
                <Title level={4} style={{ color: "#2d3748", marginBottom: 16 }}>
                  הגבלת אחריות
                </Title>
                <ul style={{ paddingRight: 20, margin: 0 }}>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>השימוש במערכת הוא על אחריותך הבלעדית</Text>
                  </li>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>אנו לא אחראים לנזקים עקיפים או תוצאתיים</Text>
                  </li>
                  <li style={{ marginBottom: 8 }}>
                    <Text style={{ color: "#4a5568" }}>מומלץ לבצע גיבויים קבועים למידע שלך</Text>
                  </li>
                </ul>
              </Card>
            </Col>
          </Row>

          {/* Contact Information */}
          <Card
            style={{
              borderRadius: 20,
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              border: "none",
              color: "white",
            }}
            bodyStyle={{ padding: "40px" }}
          >
            <Title level={3} style={{ color: "white", marginBottom: 16 }}>
              שאלות על התנאים?
            </Title>
            <Paragraph style={{ color: "rgba(255,255,255,0.9)", fontSize: 16, lineHeight: 1.6 }}>
              אם יש לך שאלות או הבהרות בנוגע לתנאי השימוש, אנא צור איתנו קשר:
            </Paragraph>
            <div style={{ color: "rgba(255,255,255,0.9)" }}>
              <div style={{ marginBottom: 8 }}>
                📧 <strong>אימייל:</strong> brurya.zarbiv@gmail.com
              </div>
              <div style={{ marginBottom: 8 }}>
                📞 <strong>טלפון:</strong> 055-675-8244
              </div>
              <div>
                📍 <strong>כתובת:</strong> חתם סופר 16 עמנואל
              </div>
            </div>
          </Card>
        </div>
      </div>
    </ConfigProvider>
  )
}

export default TermsOfService
"use client"
import { useState } from "react"
import axios from "axios"
import {
  Upload,
  Button,
  Typography,
  Card,
  Alert,
  Progress,
  ConfigProvider,
  Space,
  Avatar,
  Divider,
  Row,
  Col,
} from "antd"
import {
  CloudUploadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  InboxOutlined,
  FileOutlined,
  DeleteOutlined,
  EyeOutlined,
  DownloadOutlined,
  RocketOutlined,
} from "@ant-design/icons"
import type { UploadProps } from "antd"

const { Title, Text } = Typography
const { Dragger } = Upload

const UploadFiles = () => {
  const [file, setFile] = useState<File | null>(null)
  const [message, setMessage] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState(0)
  const [uploadComplete, setUploadComplete] = useState(false)
  const [dragActive, setDragActive] = useState(false)

  const url = import.meta.env.VITE_API_URL

  const uploadProps: UploadProps = {
    name: "fileUpload",
    multiple: false,
    accept: ".jpg,.png,.pdf,.docx,.txt",
    beforeUpload: (file) => {
      setFile(file)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      return false // Prevent automatic upload
    },
    onRemove: () => {
      setFile(null)
      setMessage(null)
      setError(null)
      setUploadComplete(false)
      setProgress(0)
    },
    onDrop: () => setDragActive(false),
  }

  const handleSubmit = async () => {
    if (!file) {
      setError("יש לבחור קובץ לפני השליחה")
      return
    }

    setUploading(true)
    setProgress(0)

    const formData = new FormData()
    formData.append("fileUpload", file)

    try {
      // Simulate realistic progress
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval)
            return 90
          }
          return prev + Math.random() * 15
        })
      }, 200)

      const response = await axios.post(`${url}/FileUpload/upload`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      })

      clearInterval(progressInterval)
      setProgress(100)

      setTimeout(() => {
        setMessage(response.data.message || "הקובץ הועלה בהצלחה")
        setError(null)
        setUploading(false)
        setUploadComplete(true)
      }, 800)
    } catch (err: any) {
      setProgress(0)
      setUploading(false)
      const msg = err.response?.data || "אירעה שגיאה בהעלאת הקובץ"
      setError(msg.message || msg)
      setMessage(null)
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  const getFileIcon = (fileName: string) => {
    const extension = fileName.split(".").pop()?.toLowerCase()
    switch (extension) {
      case "pdf":
        return <FileOutlined style={{ color: "#ff4d4f" }} />
      case "jpg":
      case "jpeg":
      case "png":
        return <FileOutlined style={{ color: "#52c41a" }} />
      case "docx":
      case "doc":
        return <FileOutlined style={{ color: "#1890ff" }} />
      default:
        return <FileOutlined style={{ color: "#666" }} />
    }
  }

  return (
    <ConfigProvider direction="rtl">
      {/* Floating Upload Status Overlay */}
      {uploading && file && (
        <div
          style={{
            position: "fixed",
            top: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            zIndex: 9999,
            background: "rgba(255, 255, 255, 0.95)",
            backdropFilter: "blur(10px)",
            border: "1px solid #d9d9d9",
            borderRadius: "12px",
            padding: "16px 24px",
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.15)",
            minWidth: "300px",
            maxWidth: "500px",
          }}
        >
          <Space direction="vertical" style={{ width: "100%" }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
              <Space>
                {getFileIcon(file.name)}
                <Text strong>{file.name}</Text>
              </Space>
              <Text style={{ color: "#fa8c16", fontWeight: "bold" }}>{Math.round(progress)}%</Text>
            </div>
            <Progress
              percent={progress}
              strokeColor={{
                "0%": "#667eea",
                "50%": "#764ba2",
                "100%": "#52c41a",
              }}
              strokeWidth={6}
              showInfo={false}
            />
            <Text type="secondary" style={{ fontSize: 12, textAlign: "center" }}>
              {progress < 30 && "מתחיל העלאה..."}
              {progress >= 30 && progress < 60 && "מעלה נתונים..."}
              {progress >= 60 && progress < 90 && "מעבד קובץ..."}
              {progress >= 90 && "משלים העלאה..."}
            </Text>
          </Space>
        </div>
      )}

      <div className="upload-container" style={{ maxWidth: 900, margin: "0 auto"}}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              className="upload-avatar"
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <RocketOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              העלאת קבצים וניתוח נתונים לעסק עם AI
            </Title>

            <Text type="secondary" style={{ fontSize: 16 }}>
              גרור קבצים או לחץ לבחירה - תמיכה מלאה בכל סוגי הקבצים
            </Text>

            <Divider />
          </div>

          <Row gutter={[24, 24]}>
            <Col xs={24} lg={16}>
              <Dragger
                {...uploadProps}
                className={`upload-dragger ${dragActive ? "drag-active" : ""}`}
                style={{
                  background: dragActive
                    ? "linear-gradient(145deg, #f0f7ff, #e6f4ff)"
                    : "linear-gradient(145deg, #f8fafc, #ffffff)",
                  border: dragActive ? "3px dashed #1890ff" : "2px dashed #667eea",
                  borderRadius: 20,
                  padding: "60px 20px",
                  marginBottom: 24,
                  position: "relative",
                  overflow: "hidden",
                }}
              >
                <div
                  style={{
                    position: "relative",
                    zIndex: 2,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    flexDirection: "column",
                  }}
                >
                  <p className="ant-upload-drag-icon">
                    <InboxOutlined
                      style={{
                        fontSize: 80,
                        color: dragActive ? "#1890ff" : "#667eea",
                      }}
                    />
                  </p>
                  <Title
                    level={3}
                    style={{
                      color: "#2d3748",
                      marginBottom: 12,
                    }}
                  >
                    {dragActive ? "שחרר כאן!" : "גרור קובץ לכאן או לחץ לבחירה"}
                  </Title>
                  <Text type="secondary" style={{ fontSize: 16, display: "block", marginBottom: 16 }}>
                    תומך בקבצים מסוג JPG, PNG, PDF, DOCX, TXT
                  </Text>
                  <Text type="secondary" style={{ fontSize: 14 }}>
                    גודל מקסימלי: 10MB
                  </Text>
                </div>
              </Dragger>

              {file && !uploading && (
                <Card
                  size="small"
                  style={{
                    marginBottom: 24,
                    background: "linear-gradient(145deg, #f0f9ff, #ffffff)",
                    border: "1px solid #e6f4ff",
                    borderRadius: 12,
                  }}
                >
                  <Row align="middle" gutter={[16, 16]}>
                    <Col flex="auto">
                      <Space>
                        {getFileIcon(file.name)}
                        <div>
                          <Text strong>{file.name}</Text>
                          <br />
                          <Text type="secondary" style={{ fontSize: 12 }}>
                            {formatFileSize(file.size)}
                          </Text>
                        </div>
                      </Space>
                    </Col>
                    <Col>
                      <Space>
                        <Button type="text" icon={<EyeOutlined />} size="small" style={{ color: "#1890ff" }}>
                          תצוגה מקדימה
                        </Button>
                        <Button
                          type="text"
                          icon={<DeleteOutlined />}
                          size="small"
                          danger
                          onClick={() => {
                            setFile(null)
                            setMessage(null)
                            setError(null)
                            setUploadComplete(false)
                          }}
                        >
                          הסר
                        </Button>
                      </Space>
                    </Col>
                  </Row>
                </Card>
              )}
            </Col>

            <Col xs={24} lg={8}>
              <Card title="פעולות מהירות" size="small" style={{ marginBottom: 24 }}>
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Button
                    type="primary"
                    size="large"
                    disabled={!file || uploading}
                    loading={uploading}
                    icon={uploadComplete ? <CheckCircleOutlined /> : <CloudUploadOutlined />}
                    onClick={handleSubmit}
                    block
                    style={{
                      height: 48,
                      fontWeight: 600,
                      fontSize: 16,
                      background: uploadComplete ? "linear-gradient(135deg, #52c41a 0%, #389e0d 100%)" : undefined,
                    }}
                  >
                    {uploading ? "מעלה..." : uploadComplete ? "הועלה בהצלחה!" : "העלה קובץ"}
                  </Button>

                  {uploadComplete && (
                    <Button
                      type="default"
                      size="large"
                      icon={<DownloadOutlined />}
                      block
                      style={{
                        height: 40,
                        fontWeight: 600,
                        borderWidth: 2,
                      }}
                    >
                      הורד קובץ
                    </Button>
                  )}
                </Space>
              </Card>

              <Card title="מידע שימושי" size="small">
                <Space direction="vertical" style={{ width: "100%" }}>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>העלאה מאובטחת</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>ניתוח נתונים לעסק עם AI</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>עדכון נתונים</Text>
                  </div>
                  <div>
                    <Text strong style={{ color: "#52c41a" }}>
                      ✓
                    </Text>
                    <Text style={{ marginRight: 8 }}>גיבוי אוטומטי</Text>
                  </div>
                </Space>
              </Card>
            </Col>
          </Row>

          {message && (
            <Alert
              message="הצלחה!"
              description={
                <Space direction="vertical">
                  <Text>{message}</Text>
                  <Text type="secondary">הקובץ נשמר בבטחה במערכת</Text>
                </Space>
              }
              type="success"
              showIcon
              icon={<CheckCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #b7eb8f",
                background: "linear-gradient(145deg, #f6ffed, #ffffff)",
              }}
              action={
                <Button size="small" type="primary" ghost>
                  צפה בקובץ
                </Button>
              }
            />
          )}

          {error && (
            <Alert
              message="שגיאה!"
              description={error}
              type="error"
              showIcon
              icon={<ExclamationCircleOutlined />}
              style={{
                borderRadius: 12,
                border: "1px solid #ffccc7",
                background: "linear-gradient(145deg, #fff2f0, #ffffff)",
              }}
              action={
                <Button size="small" danger ghost>
                  נסה שוב
                </Button>
              }
            />
          )}
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UploadFiles
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import type { AdminRegister } from "../models/AdminRegister"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserLogin } from "../utils/validationSchema"
import { globalContext } from "../context/GlobalContext"
import { Form, Input, Button, Typography, Card, Alert, Space, Avatar, Divider, ConfigProvider } from "antd"
import { MailOutlined, LockOutlined, UserOutlined, LoginOutlined, ExclamationCircleOutlined } from "@ant-design/icons"
import { useMediaQuery } from "react-responsive"

const { Title, Text, Link } = Typography

const UserLogin = () => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserLogin
  const [userLogin, setUserLogin] = useState<AdminRegister>({ email: "", password: "" })
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const isMobile = useMediaQuery({ maxWidth: 768 })

  const handleSubmit = async () => {
    setLoading(true)
    try {
      const valid = await validationSchema.isValid(userLogin)
      setErrors([])

      if (valid) {
        try {
          const { data } = await axios.post<any>(`${url}/Auth/user-login`, userLogin, { withCredentials: true })
          globalContextDetails.setUserCount(data.user.businessUsersCount)
          globalContextDetails.setUser(data.user)
          nav("/")
        }
        catch (e) {
          if (axios.isAxiosError(e) && e.response?.status === 400) {
            setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"])
            return
          }
          setErrors(e instanceof Error ? [e.message] : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"])
          return
        }
      }
      else {
        const validationErrors = await validationSchema.validate(userLogin).catch((err) => err.errors)
        setErrors(validationErrors || [])
      }
    } catch (e) {
      if (axios.isAxiosError(e) && e.response?.status === 400) {
        setErrors(["משתמש לא נמצא, נא לבדוק את האימייל והסיסמה"])
        return
      }
      setErrors(e instanceof Error ? [e.message] : ["שגיאה בכניסה, נא לנסות שוב מאוחר יותר"])
      return
    }
    finally {
      setLoading(false)
    }
  }

  const handleChange = (field: string, value: string) => {
    setUserLogin((prev) => ({ ...prev, [field]: value }))
    if (errors.length > 0) {
      setErrors([])
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div
        className="centered-layout"
        style={{
          minHeight: "calc(100vh - 64px)",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: isMobile ? "16px" : "24px",
          // background: "linear-gradient(135deg, #f7f9fc 0%, #eef2f7 100%)",
        }}
      >
        <Card
          className="login-form"
          style={{
            maxWidth: 500,
            width: "100%",
          }}
          bodyStyle={{
            padding: isMobile ? "24px" : "40px",
          }}
        >
          <div style={{ textAlign: "center", marginBottom: isMobile ? 24 : 32 }}>
            <Avatar
              size={isMobile ? 64 : 80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserOutlined style={{ fontSize: isMobile ? 28 : 40 }} />
            </Avatar>

            <Title
              level={2}
              style={{
                marginBottom: 8,
                color: "#2d3748",
                textAlign: "center",
                fontSize: isMobile ? "1.5rem" : "2rem",
              }}
            >
              כניסת משתמש
            </Title>

            <Text
              type="secondary"
              style={{
                fontSize: isMobile ? 14 : 16,
                display: "block",
              }}
            >
              ברוכים הבאים למערכת ניהול העסק
            </Text>
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Form.Item
              label="אימייל"
              required
              style={{ marginBottom: isMobile ? 16 : 20 }}
            >
              <Input
                prefix={<MailOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את האימייל שלך"
                size={isMobile ? "middle" : "large"}
                value={userLogin.email}
                onChange={(e) => handleChange("email", e.target.value)}
                style={{
                  borderRadius: 10,
                  height: isMobile ? "40px" : "48px",
                }}
              />
            </Form.Item>

            <Form.Item
              label="סיסמא"
              required
              style={{ marginBottom: isMobile ? 20 : 24 }}
            >
              <Input.Password
                prefix={<LockOutlined style={{ color: "#667eea" }} />}
                placeholder="הזן את הסיסמה שלך"
                size={isMobile ? "middle" : "large"}
                value={userLogin.password}
                onChange={(e) => handleChange("password", e.target.value)}
                style={{
                  borderRadius: 10,
                  height: isMobile ? "40px" : "48px",
                }}
              />
            </Form.Item>

            <Button
              type="primary"
              htmlType="submit"
              size={isMobile ? "middle" : "large"}
              loading={loading}
              disabled={loading}
              icon={<LoginOutlined />}
              block
              style={{
                height: isMobile ? 44 : 48,
                borderRadius: 10,
                fontWeight: 600,
                fontSize: isMobile ? 14 : 16,
                marginBottom: 16,
              }}
            >
              {loading ? "מתחבר..." : "התחבר"}
            </Button>

            <Divider>
              <Text type="secondary" style={{ fontSize: isMobile ? 12 : 14 }}>או</Text>
            </Divider>

            <Button
              type="default"
              size={isMobile ? "middle" : "large"}
              block
              onClick={() => nav("/register-user")}
              style={{
                height: isMobile ? 44 : 48,
                borderRadius: 10,
                fontWeight: 600,
                marginBottom: 16,
                borderWidth: 2,
                fontSize: isMobile ? 14 : 16,
              }}
            >
              הירשם עכשיו
            </Button>

            <div style={{ textAlign: "center" }}>
              <Space>
                <Text type="secondary" style={{ fontSize: isMobile ? 12 : 14 }}>מנהל?</Text>
                <Link
                  href="/admin-login"
                  style={{
                    fontWeight: 600,
                    fontSize: isMobile ? 12 : 14,
                  }}
                >
                  התחבר כמנהל
                </Link>
              </Space>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((index) => (
                  <Alert
                    key={index}
                    message="שגיאה בהתחברות"
                    description="המערכת נתקלה בבעיה. אנא נסו מאוחר יותר."
                    type="error"
                    showIcon
                    icon={<ExclamationCircleOutlined />}
                    style={{
                      marginBottom: 8,
                      borderRadius: 8,
                      background: "linear-gradient(135deg, #fff2f0 0%, #ffebe8 100%)",
                      border: "1px solid #ffccc7",
                      fontSize: isMobile ? 12 : 14,
                    }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserLogin
"use client"

import type React from "react"
import { useContext, useEffect, useState } from "react"
import {
  Typography,
  Card,
  ConfigProvider,
  Button,
  Table,
  Tag,
  Space,
  Avatar,
  Row,
  Col,
  Modal,
  message,
  Popconfirm,
  Drawer,
  Statistic,
  Tooltip,
  Input,
  Select,
} from "antd"
import {
  UserOutlined,
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
  TeamOutlined,
  CrownOutlined,
  MailOutlined,
  PhoneOutlined,
  DollarOutlined,
  SearchOutlined,
  EyeOutlined,
} from "@ant-design/icons"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import type { ColumnsType } from "antd/es/table"
import { globalContext } from "../context/GlobalContext"
import type { User } from "../models/User"

const { Title, Text } = Typography
const { Search } = Input
const { Option } = Select
const url = import.meta.env.VITE_API_URL

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([])
  const [filteredUsers, setFilteredUsers] = useState<User[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  const [modalVisible, setModalVisible] = useState(false)
  const [drawerVisible, setDrawerVisible] = useState(false)
  const [searchText, setSearchText] = useState("")
  const [roleFilter, setRoleFilter] = useState<number | undefined>(undefined)
  const [statusFilter, setStatusFilter] = useState<string | undefined>(undefined)
  const [isMobile, setIsMobile] = useState(false)

  const globalContextDetails = useContext(globalContext)
  const nav = useNavigate()

  // Check if mobile
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }

    checkMobile()
    window.addEventListener("resize", checkMobile)
    return () => window.removeEventListener("resize", checkMobile)
  }, [])

  useEffect(() => {
    fetchUsers()
  }, [])

  useEffect(() => {
    filterUsers()
  }, [users, searchText, roleFilter, statusFilter])

  const fetchUsers = async () => {
    try {
      setLoading(true)
      const { data } = await axios.get<User[]>(
        `${url}/api/User/users-by-business/${globalContextDetails.business_global.id}`,
        { withCredentials: true },
      )
      setUsers(data)
    } catch (err) {
      console.error("שגיאה בטעינת משתמשים:", err)
      message.error("שגיאה בטעינת רשימת המשתמשים")
    } finally {
      setLoading(false)
    }
  }

  const filterUsers = () => {
    let filtered = users

    if (searchText) {
      filtered = filtered.filter(
        (user) =>
          (user.firstName ?? "").toLowerCase().includes(searchText.toLowerCase()) ||
          (user.lastName ?? "").toLowerCase().includes(searchText.toLowerCase()) ||
          user.email.toLowerCase().includes(searchText.toLowerCase()) ||
          user.idNumber.includes(searchText),
      )
    }

    if (roleFilter !== undefined) {
      filtered = filtered.filter((user) => user.role === roleFilter)
    }

    if (statusFilter) {
      filtered = filtered.filter((user) => user.status === statusFilter)
    }

    setFilteredUsers(filtered)
  }

  const handleDelete = async (id: number) => {
    try {
      const res = await axios.delete(`${url}/api/User/${id}`, { withCredentials: true })
      if (res.status >= 200 && res.status < 300) {
        globalContextDetails.setUserCount(globalContextDetails.usersCount - 1)
        setUsers((prev) => prev.filter((user) => user.id !== id))
        message.success("המשתמש נמחק בהצלחה")
      }
    } catch (err) {
      console.error("שגיאה במחיקה:", err)
      message.error("שגיאה במחיקת המשתמש")
    }
  }

  const handleEdit = (id: number) => {
    nav(`/edit-user/${id}`)
  }

  const handleViewDetails = (user: User) => {
    setSelectedUser(user)
    if (isMobile) {
      setDrawerVisible(true)
    } else {
      setModalVisible(true)
    }
  }

  const getRoleInfo = (role: number) => {
    switch (role) {
      case 1:
        return { color: "purple", icon: <CrownOutlined />, text: "מנהל", bg: "#722ed1" }
      case 3:
        return { color: "orange", icon: <DollarOutlined />, text: "מנהל חשבונות", bg: "#faad14" }
      default:
        return { color: "blue", icon: <UserOutlined />, text: "משתמש רגיל", bg: "#1890ff" }
    }
  }

  const UserCard: React.FC<{ user: User }> = ({ user }) => {
    const roleInfo = getRoleInfo(user.role)

    return (
      <Card
        hoverable
        style={{
          borderRadius: 16,
          marginBottom: 16,
          boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
        }}
        bodyStyle={{ padding: "16px" }}
      >
        <Row align="middle" gutter={[16, 16]}>
          <Col flex="none">
            <Avatar size={48} style={{ background: roleInfo.bg }}>
              {roleInfo.icon}
            </Avatar>
          </Col>

          <Col flex="auto">
            <div>
              <Title level={5} style={{ margin: 0, marginBottom: 4 }}>
                {user.firstName} {user.lastName}
              </Title>
              <Space wrap size="small">
                <Tag color={roleInfo.color}>
                  {roleInfo.text}
                </Tag>
                <Text type="secondary" style={{ fontSize: 12 }}>
                  ת.ז: {user.idNumber}
                </Text>
              </Space>
              <div style={{ marginTop: 8 }}>
                <Space direction="vertical" size={2}>
                  <Space size="small">
                    <MailOutlined style={{ color: "#1890ff", fontSize: 12 }} />
                    <Text style={{ fontSize: 12 }}>{user.email}</Text>
                  </Space>
                  <Space size="small">
                    <PhoneOutlined style={{ color: "#52c41a", fontSize: 12 }} />
                    <Text style={{ fontSize: 12 }}>{user.phone}</Text>
                  </Space>
                </Space>
              </div>
            </div>
          </Col>

          <Col flex="none">
            <Space direction="vertical" size="small">
              <Button
                type="text"
                icon={<EyeOutlined />}
                onClick={() => handleViewDetails(user)}
                style={{ color: "#1890ff" }}
                size="small"
              >
                צפה
              </Button>
              <Button
                type="text"
                icon={<EditOutlined />}
                onClick={() => handleEdit(user.id)}
                style={{ color: "#fa8c16" }}
                size="small"
              >
                ערוך
              </Button>
              <Popconfirm
                title="מחיקת משתמש"
                description="האם אתה בטוח שברצונך למחוק את המשתמש?"
                onConfirm={() => handleDelete(user.id)}
                okText="כן"
                cancelText="לא"
                placement="topRight"
              >
                <Button type="text" icon={<DeleteOutlined />} danger size="small">
                  מחק
                </Button>
              </Popconfirm>
            </Space>
          </Col>
        </Row>
      </Card>
    )
  }

  const columns: ColumnsType<User> = [
    {
      title: "משתמש",
      key: "user",
      render: (_, record) => {
        const roleInfo = getRoleInfo(record.role)
        return (
          <Space>
            <Avatar size={40} style={{ background: roleInfo.bg }}>
              {roleInfo.icon}
            </Avatar>
            <div>
              <div style={{ fontWeight: 600 }}>
                {record.firstName} {record.lastName}
              </div>
              <Text type="secondary" style={{ fontSize: 12 }}>
                ת.ז: {record.idNumber}
              </Text>
            </div>
          </Space>
        )
      },
    },
    {
      title: "פרטי קשר",
      key: "contact",
      responsive: ["md"],
      render: (_, record) => (
        <Space direction="vertical" size="small">
          <Space size="small">
            <MailOutlined style={{ color: "#1890ff" }} />
            <Text>{record.email}</Text>
          </Space>
          <Space size="small">
            <PhoneOutlined style={{ color: "#52c41a" }} />
            <Text>{record.phone}</Text>
          </Space>
        </Space>
      ),
    },
    {
      title: "תפקיד",
      dataIndex: "role",
      key: "role",
      align: "center",
      render: (role: number) => {
        const roleInfo = getRoleInfo(role)
        return (
          <Tag color={roleInfo.color} icon={roleInfo.icon}>
            {roleInfo.text}
          </Tag>
        )
      },
    },
    {
      title: "סטטוס",
      dataIndex: "status",
      key: "status",
      align: "center",
      responsive: ["lg"],
      render: (status: string) => (
        <Tag color={status === "active" ? "success" : "default"}>{status === "active" ? "פעיל" : "לא פעיל"}</Tag>
      ),
    },
    {
      title: "כניסה אחרונה",
      dataIndex: "lastLogin",
      key: "lastLogin",
      responsive: ["xl"],
      render: (date: Date) => <Text type="secondary">{new Date(date).toLocaleDateString("he-IL")}</Text>,
    },
    {
      title: "פעולות",
      key: "actions",
      align: "center",
      width: 120,
      render: (_, record) => (
        <Space size="small">
          <Tooltip title="צפה בפרטים">
            <Button
              type="text"
              icon={<EyeOutlined />}
              onClick={() => handleViewDetails(record)}
              style={{ color: "#1890ff" }}
              size="small"
            />
          </Tooltip>
          <Tooltip title="ערוך">
            <Button
              type="text"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record.id)}
              style={{ color: "#fa8c16" }}
              size="small"
            />
          </Tooltip>
          <Popconfirm
            title="מחיקת משתמש"
            description="האם אתה בטוח שברצונך למחוק את המשתמש?"
            onConfirm={() => handleDelete(record.id)}
            okText="כן"
            cancelText="לא"
          >
            <Tooltip title="מחק">
              <Button type="text" icon={<DeleteOutlined />} danger size="small" />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ]

  const UserDetailsContent = () => (
    <div style={{ padding: isMobile ? "8px 0" : "16px 0" }}>
      <Row gutter={[16, 16]}>
        <Col span={24}>
          <div style={{ textAlign: "center", marginBottom: 24 }}>
            <Avatar
              size={isMobile ? 56 : 64}
              style={{
                background: selectedUser ? getRoleInfo(selectedUser.role).bg : "#1890ff",
                marginBottom: 8,
              }}
            >
              {selectedUser ? getRoleInfo(selectedUser.role).icon : <UserOutlined />}
            </Avatar>
            <div>
              <Title level={4} style={{ margin: 0 }}>
                {selectedUser?.firstName} {selectedUser?.lastName}
              </Title>
              <Tag color={selectedUser ? getRoleInfo(selectedUser.role).color : "blue"} style={{ marginTop: 8 }}>
                {selectedUser ? getRoleInfo(selectedUser.role).text : ""}
              </Tag>
            </div>
          </div>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>אימייל:</Text>
            <Text copyable>{selectedUser?.email}</Text>
          </Space>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>טלפון:</Text>
            <Text copyable>{selectedUser?.phone}</Text>
          </Space>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>תעודת זהות:</Text>
            <Text>{selectedUser?.idNumber}</Text>
          </Space>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>סטטוס:</Text>
            <Tag color={selectedUser?.status === "active" ? "success" : "default"}>
              {selectedUser?.status === "active" ? "פעיל" : "לא פעיל"}
            </Tag>
          </Space>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>כניסה אחרונה:</Text>
            <Text>
              {selectedUser?.lastLogin ? new Date(selectedUser.lastLogin).toLocaleDateString("he-IL") : "לא ידוע"}
            </Text>
          </Space>
        </Col>

        <Col xs={24} sm={12}>
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            <Text strong>תאריך הצטרפות:</Text>
            <Text>
              {selectedUser?.createdAt ? new Date(selectedUser.createdAt).toLocaleDateString("he-IL") : "לא ידוע"}
            </Text>
          </Space>
        </Col>
      </Row>
    </div>
  )

  return (
    <ConfigProvider direction="rtl">
      <div
        style={{
          padding: isMobile ? "16px" : "40px 20px",
          maxWidth: 1400,
          margin: "0 auto",
          minHeight: "100vh",
          background: "#f5f5f5",
        }}
      >
        {/* Header Card */}
        <Card
          style={{
            marginBottom: 24,
            borderRadius: 16,
            boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
          }}
        >
          <Row align="middle" gutter={[16, 16]}>
            <Col xs={24} md={16}>
              <Space direction={isMobile ? "vertical" : "horizontal"} size="middle">
                <Avatar
                  size={isMobile ? 56 : 64}
                  style={{
                    background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                  }}
                >
                  <TeamOutlined style={{ fontSize: isMobile ? 28 : 32 }} />
                </Avatar>
                <div style={{ textAlign: isMobile ? "center" : "right" }}>
                  <Title level={isMobile ? 3 : 2} style={{ margin: 0, color: "#2d3748" }}>
                    ניהול משתמשים
                  </Title>
                  <Text type="secondary" style={{ fontSize: isMobile ? 14 : 16 }}>
                    צפה, הוסף, ערוך או מחק משתמשים במערכת
                  </Text>
                </div>
              </Space>
            </Col>

            <Col xs={24} md={8} style={{ textAlign: isMobile ? "center" : "left" }}>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                size={isMobile ? "middle" : "large"}
                onClick={() => nav("/register-user")}
                style={{
                  height: isMobile ? 40 : 48,
                  padding: isMobile ? "0 16px" : "0 24px",
                  fontWeight: 600,
                  borderRadius: 8,
                }}
                block={isMobile}
              >
                הוסף משתמש חדש
              </Button>
            </Col>
          </Row>
        </Card>

        {/* Statistics Cards */}
        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
          <Col xs={12} sm={6}>
            <Card style={{ borderRadius: 12, textAlign: "center" }}>
              <Statistic
                title="סה״כ משתמשים"
                value={users.length}
                valueStyle={{ color: "#1890ff", fontSize: isMobile ? 20 : 24 }}
                prefix={<TeamOutlined />}
              />
            </Card>
          </Col>

          <Col xs={12} sm={6}>
            <Card style={{ borderRadius: 12, textAlign: "center" }}>
              <Statistic
                title="מנהלים"
                value={users.filter((u) => u.role === 1).length}
                valueStyle={{ color: "#722ed1", fontSize: isMobile ? 20 : 24 }}
                prefix={<CrownOutlined />}
              />
            </Card>
          </Col>

          <Col xs={12} sm={6}>
            <Card style={{ borderRadius: 12, textAlign: "center" }}>
              <Statistic
                title="משתמשים רגילים"
                value={users.filter((u) => u.role === 2).length}
                valueStyle={{ color: "#1890ff", fontSize: isMobile ? 20 : 24 }}
                prefix={<UserOutlined />}
              />
            </Card>
          </Col>

          <Col xs={12} sm={6}>
            <Card style={{ borderRadius: 12, textAlign: "center" }}>
              <Statistic
                title="מנהלי חשבונות"
                value={users.filter((u) => u.role === 3).length}
                valueStyle={{ color: "#faad14", fontSize: isMobile ? 20 : 24 }}
                prefix={<DollarOutlined />}
              />
            </Card>
          </Col>
        </Row>

        {/* Filters */}
        <Card style={{ marginBottom: 24, borderRadius: 12 }}>
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24} sm={12} md={8}>
              <Search
                placeholder="חפש לפי שם, אימייל או ת.ז"
                allowClear
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                style={{ width: "100%" }}
                prefix={<SearchOutlined />}
              />
            </Col>

            <Col xs={12} sm={6} md={4}>
              <Select
                placeholder="תפקיד"
                allowClear
                value={roleFilter}
                onChange={setRoleFilter}
                style={{ width: "100%" }}
              >
                <Option value={1}>מנהל</Option>
                <Option value={2}>משתמש רגיל</Option>
                <Option value={3}>מנהל חשבונות</Option>
              </Select>
            </Col>

            <Col xs={12} sm={6} md={4}>
              <Select
                placeholder="סטטוס"
                allowClear
                value={statusFilter}
                onChange={setStatusFilter}
                style={{ width: "100%" }}
              >
                <Option value="active">פעיל</Option>
                <Option value="inactive">לא פעיל</Option>
              </Select>
            </Col>

            <Col xs={24} md={8}>
              <Text type="secondary">
                מציג {filteredUsers.length} מתוך {users.length} משתמשים
              </Text>
            </Col>
          </Row>
        </Card>

        {/* Users Display */}
        <Card style={{ borderRadius: 12, overflow: "hidden" }}>
          {isMobile ? (
            // Mobile Card View
            <div>
              {loading ? (
                <div style={{ textAlign: "center", padding: "40px 0" }}>
                  <Text>טוען משתמשים...</Text>
                </div>
              ) : filteredUsers.length === 0 ? (
                <div style={{ textAlign: "center", padding: "40px 0" }}>
                  <Text type="secondary">לא נמצאו משתמשים</Text>
                </div>
              ) : (
                filteredUsers.map((user) => <UserCard key={user.id} user={user} />)
              )}
            </div>
          ) : (
            // Desktop Table View
            <Table
              columns={columns}
              dataSource={filteredUsers}
              rowKey="id"
              loading={loading}
              pagination={{
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) => `${range[0]}-${range[1]} מתוך ${total} משתמשים`,
                responsive: true,
              }}
              scroll={{ x: 800 }}
              style={{ direction: "rtl" }}
            />
          )}
        </Card>

        {/* Desktop Modal */}
        <Modal
          title={
            <Space>
              <UserOutlined />
              <span>פרטי משתמש</span>
            </Space>
          }
          open={modalVisible && !isMobile}
          onCancel={() => setModalVisible(false)}
          footer={[
            <Button key="close" onClick={() => setModalVisible(false)}>
              סגור
            </Button>,
            <Button
              key="edit"
              type="primary"
              icon={<EditOutlined />}
              onClick={() => {
                if (selectedUser) {
                  handleEdit(selectedUser.id)
                  setModalVisible(false)
                }
              }}
            >
              ערוך משתמש
            </Button>,
          ]}
          width={600}
        >
          <UserDetailsContent />
        </Modal>

        {/* Mobile Drawer */}
        <Drawer
          title={
            <Space>
              <UserOutlined />
              <span>פרטי משתמש</span>
            </Space>
          }
          placement="bottom"
          height="80%"
          open={drawerVisible && isMobile}
          onClose={() => setDrawerVisible(false)}
          extra={
            <Space>
              <Button
                type="primary"
                icon={<EditOutlined />}
                onClick={() => {
                  if (selectedUser) {
                    handleEdit(selectedUser.id)
                    setDrawerVisible(false)
                  }
                }}
                size="small"
              >
                ערוך
              </Button>
            </Space>
          }
        >
          <UserDetailsContent />
        </Drawer>
      </div>
    </ConfigProvider>
  )
}

export default UserManagement
"use client"
import { useContext, useState } from "react"
import axios from "axios"
import { useNavigate } from "react-router-dom"
import { validationSchemaUserRegister } from "../utils/validationSchema"
import type { UserPostModel } from "../models/UserPostModel"
import {
  Form,
  Input,
  Button,
  Typography,
  Card,
  Alert,
  Row,
  Col,
  Avatar,
  Divider,
  ConfigProvider,
  InputNumber,
} from "antd"
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LockOutlined,
  TeamOutlined,
  UserAddOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons"
import { globalContext } from "../context/GlobalContext"

const { Title, Text, Link } = Typography

const UserRegister = ({ onSubmitSuccess }: { onSubmitSuccess?: () => void }) => {
  const nav = useNavigate()
  const validationSchema = validationSchemaUserRegister
  const [errors, setErrors] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const url = import.meta.env.VITE_API_URL
  const globalContextDetails = useContext(globalContext)

  const [myUser, setMyUser] = useState<UserPostModel>({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    phone: "",
    role: 2,
    idNumber: "",
  })

  const handleChange = (field: string, value: any) => {
    setMyUser((prev) => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async () => {
    setLoading(true)
    try {
      await validationSchema.validate(myUser, { abortEarly: false });
      setErrors([])

      try {
        await axios.post<UserPostModel>(`${url}/Auth/user-register`, myUser, { withCredentials: true })
        globalContextDetails.setUserCount(globalContextDetails.usersCount + 1)
        if (onSubmitSuccess) onSubmitSuccess()
        nav(-1)
      } catch (e) {
        setErrors(["שגיאה ברישום המשתמש"])
      }

    } catch (e) {
      if (e instanceof Error && 'inner' in e) {
        const validationErrors = (e as any).inner.map((err: any) => err.message)
        setErrors(validationErrors)
      } else {
        setErrors(["שגיאה ברישום המשתמש, נא לנסות שוב מאוחר יותר"])
      }
    }

    finally {
      setLoading(false)
    }
  }

  return (
    <ConfigProvider direction="rtl">
      <div style={{ padding: "40px 20px", maxWidth: 800, margin: "0 auto" }}>
        <Card className="form-section">
          <div style={{ textAlign: "center", marginBottom: 32 }}>
            <Avatar
              size={80}
              style={{
                background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                marginBottom: 16,
                boxShadow: "0 4px 14px rgba(102, 126, 234, 0.3)",
              }}
            >
              <UserAddOutlined style={{ fontSize: 40 }} />
            </Avatar>

            <Title level={2} style={{ marginBottom: 8, color: "#2d3748", textAlign: "center" }}>
              הרשמת משתמש חדש
            </Title>
            <Divider />
          </div>

          <Form layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item label="שם פרטי" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם פרטי"
                    size="large"
                    value={myUser.firstName}
                    onChange={(e) => handleChange("firstName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="שם משפחה" required>
                  <Input
                    prefix={<UserOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן שם משפחה"
                    size="large"
                    value={myUser.lastName}
                    onChange={(e) => handleChange("lastName", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="טלפון" required>
                  <Input
                    prefix={<PhoneOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר טלפון"
                    size="large"
                    value={myUser.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="מספר תעודת זהות" required>
                  <Input
                    prefix={<IdcardOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן מספר תעודת זהות"
                    size="large"
                    value={myUser.idNumber}
                    onChange={(e) => handleChange("idNumber", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item label="אימייל" required>
                  <Input
                    prefix={<MailOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן כתובת אימייל"
                    size="large"
                    type="email"
                    value={myUser.email}
                    onChange={(e) => handleChange("email", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="סיסמא" required>
                  <Input.Password
                    prefix={<LockOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן סיסמא"
                    size="large"
                    value={myUser.password}
                    onChange={(e) => handleChange("password", e.target.value)}
                  />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item label="תפקיד" required>
                  <InputNumber
                    prefix={<TeamOutlined style={{ color: "#667eea" }} />}
                    placeholder="הזן קוד תפקיד"
                    size="large"
                    style={{ width: "100%" }}
                    value={myUser.role}
                    onChange={(value) => handleChange("role", value || 0)}
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
              <Col xs={24} sm={12}>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  loading={loading}
                  icon={<UserAddOutlined />}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    fontSize: 16,
                  }}
                >
                  הירשם
                </Button>
              </Col>
              <Col xs={24} sm={12}>
                <Button
                  type="default"
                  size="large"
                  icon={<ArrowLeftOutlined />}
                  onClick={() => nav(-1)}
                  block
                  style={{
                    height: 48,
                    fontWeight: 600,
                    borderWidth: 2,
                  }}
                >
                  חזרה 
                </Button>
              </Col>
            </Row>

            <div style={{ textAlign: "center", marginTop: 24 }}>
              <Text type="secondary">
                כבר יש לך חשבון?{" "}
                <Link href="/user-login" style={{ fontWeight: 600 }}>
                  התחבר כאן
                </Link>
              </Text>
            </div>

            {errors.length > 0 && (
              <div style={{ marginTop: 16 }}>
                {errors.map((error, index) => (
                  <Alert
                    key={index}
                    message={error}
                    type="error"
                    showIcon
                    style={{ marginBottom: 8, borderRadius: 8 }}
                  />
                ))}
              </div>
            )}
          </Form>
        </Card>
      </div>
    </ConfigProvider>
  )
}

export default UserRegister
